{
  "definitions": {
    "io.k8s.api.admissionregistration.v1.AuditAnnotation": {
      "required": [
        "key", 
        "valueExpression"
      ], 
      "type": "object", 
      "description": "AuditAnnotation describes how to produce an audit annotation for an API request.", 
      "properties": {
        "valueExpression": {
          "type": "string", 
          "description": "valueExpression represents the expression which is evaluated by CEL to produce an audit annotation value. The expression must evaluate to either a string or null value. If the expression evaluates to a string, the audit annotation is included with the string value. If the expression evaluates to null or empty string the audit annotation will be omitted. The valueExpression may be no longer than 5kb in length. If the result of the valueExpression is more than 10kb in length, it will be truncated to 10kb.\n\nIf multiple ValidatingAdmissionPolicyBinding resources match an API request, then the valueExpression will be evaluated for each binding. All unique values produced by the valueExpressions will be joined together in a comma-separated list.\n\nRequired."
        }, 
        "key": {
          "type": "string", 
          "description": "key specifies the audit annotation key. The audit annotation keys of a ValidatingAdmissionPolicy must be unique. The key must be a qualified name ([A-Za-z0-9][-A-Za-z0-9_.]*) no more than 63 bytes in length.\n\nThe key is combined with the resource name of the ValidatingAdmissionPolicy to construct an audit annotation key: \"{ValidatingAdmissionPolicy name}/{key}\".\n\nIf an admission webhook uses the same resource name as this ValidatingAdmissionPolicy and the same audit annotation key, the annotation key will be identical. In this case, the first annotation written with the key will be included in the audit event and all subsequent annotations with the same key will be discarded.\n\nRequired."
        }
      }
    }, 
    "io.k8s.api.resource.v1beta2.CapacityRequestPolicyRange": {
      "required": [
        "min"
      ], 
      "type": "object", 
      "description": "CapacityRequestPolicyRange defines a valid range for consumable capacity values.\n\n  - If the requested amount is less than Min, it is rounded up to the Min value.\n  - If Step is set and the requested amount is between Min and Max but not aligned with Step,\n    it will be rounded up to the next value equal to Min + (n * Step).\n  - If Step is not set, the requested amount is used as-is if it falls within the range Min to Max (if set).\n  - If the requested or rounded amount exceeds Max (if set), the request does not satisfy the policy,\n    and the device cannot be allocated.", 
      "properties": {
        "max": {
          "description": "Max defines the upper limit for capacity that can be requested.\n\nMax must be less than or equal to the capacity value. Min and requestPolicy.default must be less than or equal to the maximum.", 
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.api.resource.Quantity"
        }, 
        "step": {
          "description": "Step defines the step size between valid capacity amounts within the range.\n\nMax (if set) and requestPolicy.default must be a multiple of Step. Min + Step must be less than or equal to the capacity value.", 
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.api.resource.Quantity"
        }, 
        "min": {
          "description": "Min specifies the minimum capacity allowed for a consumption request.\n\nMin must be greater than or equal to zero, and less than or equal to the capacity value. requestPolicy.default must be more than or equal to the minimum.", 
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.api.resource.Quantity"
        }
      }
    }, 
    "io.k8s.api.core.v1.PodStatus": {
      "type": "object", 
      "description": "PodStatus represents information about the status of a pod. Status may trail the actual state of a system, especially if the node that hosts the pod cannot contact the control plane.", 
      "properties": {
        "observedGeneration": {
          "type": "integer", 
          "description": "If set, this represents the .metadata.generation that the pod status was set based upon. This is an alpha field. Enable PodObservedGenerationTracking to be able to use this field.", 
          "format": "int64"
        }, 
        "resourceClaimStatuses": {
          "description": "Status of resource claims.", 
          "x-kubernetes-list-map-keys": [
            "name"
          ], 
          "x-kubernetes-patch-merge-key": "name", 
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.PodResourceClaimStatus"
          }, 
          "type": "array", 
          "x-kubernetes-list-type": "map", 
          "x-kubernetes-patch-strategy": "merge,retainKeys"
        }, 
        "extendedResourceClaimStatus": {
          "description": "Status of extended resource claim backed by DRA.", 
          "$ref": "#/definitions/io.k8s.api.core.v1.PodExtendedResourceClaimStatus"
        }, 
        "reason": {
          "type": "string", 
          "description": "A brief CamelCase message indicating details about why the pod is in this state. e.g. 'Evicted'"
        }, 
        "podIP": {
          "type": "string", 
          "description": "podIP address allocated to the pod. Routable at least within the cluster. Empty if not yet allocated."
        }, 
        "startTime": {
          "description": "RFC 3339 date and time at which the object was acknowledged by the Kubelet. This is before the Kubelet pulled the container image(s) for the pod.", 
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
        }, 
        "hostIP": {
          "type": "string", 
          "description": "hostIP holds the IP address of the host to which the pod is assigned. Empty if the pod has not started yet. A pod can be assigned to a node that has a problem in kubelet which in turns mean that HostIP will not be updated even if there is a node is assigned to pod"
        }, 
        "phase": {
          "type": "string", 
          "description": "The phase of a Pod is a simple, high-level summary of where the Pod is in its lifecycle. The conditions array, the reason and message fields, and the individual container status arrays contain more detail about the pod's status. There are five possible phase values:\n\nPending: The pod has been accepted by the Kubernetes system, but one or more of the container images has not been created. This includes time before being scheduled as well as time spent downloading images over the network, which could take a while. Running: The pod has been bound to a node, and all of the containers have been created. At least one container is still running, or is in the process of starting or restarting. Succeeded: All containers in the pod have terminated in success, and will not be restarted. Failed: All containers in the pod have terminated, and at least one container has terminated in failure. The container either exited with non-zero status or was terminated by the system. Unknown: For some reason the state of the pod could not be obtained, typically due to an error in communicating with the host of the pod.\n\nMore info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-phase"
        }, 
        "ephemeralContainerStatuses": {
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.ContainerStatus"
          }, 
          "type": "array", 
          "description": "Statuses for any ephemeral containers that have run in this pod. Each ephemeral container in the pod should have at most one status in this list, and all statuses should be for containers in the pod. However this is not enforced. If a status for a non-existent container is present in the list, or the list has duplicate names, the behavior of various Kubernetes components is not defined and those statuses might be ignored. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-and-container-status", 
          "x-kubernetes-list-type": "atomic"
        }, 
        "message": {
          "type": "string", 
          "description": "A human readable message indicating details about why the pod is in this condition."
        }, 
        "resize": {
          "type": "string", 
          "description": "Status of resources resize desired for pod's containers. It is empty if no resources resize is pending. Any changes to container resources will automatically set this to \"Proposed\" Deprecated: Resize status is moved to two pod conditions PodResizePending and PodResizeInProgress. PodResizePending will track states where the spec has been resized, but the Kubelet has not yet allocated the resources. PodResizeInProgress will track in-progress resizes, and should be present whenever allocated resources != acknowledged resources."
        }, 
        "initContainerStatuses": {
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.ContainerStatus"
          }, 
          "type": "array", 
          "description": "Statuses of init containers in this pod. The most recent successful non-restartable init container will have ready = true, the most recently started container will have startTime set. Each init container in the pod should have at most one status in this list, and all statuses should be for containers in the pod. However this is not enforced. If a status for a non-existent container is present in the list, or the list has duplicate names, the behavior of various Kubernetes components is not defined and those statuses might be ignored. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#pod-and-container-status", 
          "x-kubernetes-list-type": "atomic"
        }, 
        "hostIPs": {
          "description": "hostIPs holds the IP addresses allocated to the host. If this field is specified, the first entry must match the hostIP field. This list is empty if the pod has not started yet. A pod can be assigned to a node that has a problem in kubelet which in turns means that HostIPs will not be updated even if there is a node is assigned to this pod.", 
          "x-kubernetes-patch-merge-key": "ip", 
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.HostIP"
          }, 
          "type": "array", 
          "x-kubernetes-patch-strategy": "merge", 
          "x-kubernetes-list-type": "atomic"
        }, 
        "qosClass": {
          "type": "string", 
          "description": "The Quality of Service (QOS) classification assigned to the pod based on resource requirements See PodQOSClass type for available QOS classes More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-qos/#quality-of-service-classes"
        }, 
        "containerStatuses": {
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.ContainerStatus"
          }, 
          "type": "array", 
          "description": "Statuses of containers in this pod. Each container in the pod should have at most one status in this list, and all statuses should be for containers in the pod. However this is not enforced. If a status for a non-existent container is present in the list, or the list has duplicate names, the behavior of various Kubernetes components is not defined and those statuses might be ignored. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-and-container-status", 
          "x-kubernetes-list-type": "atomic"
        }, 
        "podIPs": {
          "description": "podIPs holds the IP addresses allocated to the pod. If this field is specified, the 0th entry must match the podIP field. Pods may be allocated at most 1 value for each of IPv4 and IPv6. This list is empty if no IPs have been allocated yet.", 
          "x-kubernetes-list-map-keys": [
            "ip"
          ], 
          "x-kubernetes-patch-merge-key": "ip", 
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.PodIP"
          }, 
          "type": "array", 
          "x-kubernetes-list-type": "map", 
          "x-kubernetes-patch-strategy": "merge"
        }, 
        "nominatedNodeName": {
          "type": "string", 
          "description": "nominatedNodeName is set only when this pod preempts other pods on the node, but it cannot be scheduled right away as preemption victims receive their graceful termination periods. This field does not guarantee that the pod will be scheduled on this node. Scheduler may decide to place the pod elsewhere if other nodes become available sooner. Scheduler may also decide to give the resources on this node to a higher priority pod that is created after preemption. As a result, this field may be different than PodSpec.nodeName when the pod is scheduled."
        }, 
        "conditions": {
          "description": "Current service state of pod. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-conditions", 
          "x-kubernetes-list-map-keys": [
            "type"
          ], 
          "x-kubernetes-patch-merge-key": "type", 
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.PodCondition"
          }, 
          "type": "array", 
          "x-kubernetes-list-type": "map", 
          "x-kubernetes-patch-strategy": "merge"
        }
      }
    }, 
    "io.k8s.api.core.v1.HTTPGetAction": {
      "required": [
        "port"
      ], 
      "type": "object", 
      "description": "HTTPGetAction describes an action based on HTTP Get requests.", 
      "properties": {
        "path": {
          "type": "string", 
          "description": "Path to access on the HTTP server."
        }, 
        "host": {
          "type": "string", 
          "description": "Host name to connect to, defaults to the pod IP. You probably want to set \"Host\" in httpHeaders instead."
        }, 
        "scheme": {
          "type": "string", 
          "description": "Scheme to use for connecting to the host. Defaults to HTTP."
        }, 
        "httpHeaders": {
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.HTTPHeader"
          }, 
          "type": "array", 
          "description": "Custom headers to set in the request. HTTP allows repeated headers.", 
          "x-kubernetes-list-type": "atomic"
        }, 
        "port": {
          "description": "Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.", 
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.util.intstr.IntOrString"
        }
      }
    }, 
    "io.k8s.api.admissionregistration.v1.ParamRef": {
      "type": "object", 
      "x-kubernetes-map-type": "atomic", 
      "description": "ParamRef describes how to locate the params to be used as input to expressions of rules applied by a policy binding.", 
      "properties": {
        "namespace": {
          "type": "string", 
          "description": "namespace is the namespace of the referenced resource. Allows limiting the search for params to a specific namespace. Applies to both `name` and `selector` fields.\n\nA per-namespace parameter may be used by specifying a namespace-scoped `paramKind` in the policy and leaving this field empty.\n\n- If `paramKind` is cluster-scoped, this field MUST be unset. Setting this field results in a configuration error.\n\n- If `paramKind` is namespace-scoped, the namespace of the object being evaluated for admission will be used when this field is left unset. Take care that if this is left empty the binding must not match any cluster-scoped resources, which will result in an error."
        }, 
        "name": {
          "type": "string", 
          "description": "name is the name of the resource being referenced.\n\nOne of `name` or `selector` must be set, but `name` and `selector` are mutually exclusive properties. If one is set, the other must be unset.\n\nA single parameter used for all admission requests can be configured by setting the `name` field, leaving `selector` blank, and setting namespace if `paramKind` is namespace-scoped."
        }, 
        "parameterNotFoundAction": {
          "type": "string", 
          "description": "`parameterNotFoundAction` controls the behavior of the binding when the resource exists, and name or selector is valid, but there are no parameters matched by the binding. If the value is set to `Allow`, then no matched parameters will be treated as successful validation by the binding. If set to `Deny`, then no matched parameters will be subject to the `failurePolicy` of the policy.\n\nAllowed values are `Allow` or `Deny`\n\nRequired"
        }, 
        "selector": {
          "description": "selector can be used to match multiple param objects based on their labels. Supply selector: {} to match all resources of the ParamKind.\n\nIf multiple params are found, they are all evaluated with the policy expressions and the results are ANDed together.\n\nOne of `name` or `selector` must be set, but `name` and `selector` are mutually exclusive properties. If one is set, the other must be unset.", 
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector"
        }
      }
    }, 
    "io.k8s.api.core.v1.PersistentVolumeList": {
      "type": "object", 
      "required": [
        "items"
      ], 
      "x-kubernetes-group-version-kind": [
        {
          "kind": "PersistentVolumeList", 
          "version": "v1", 
          "group": ""
        }
      ], 
      "description": "PersistentVolumeList is a list of PersistentVolume items.", 
      "properties": {
        "items": {
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.PersistentVolume"
          }, 
          "type": "array", 
          "description": "items is a list of persistent volumes. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes"
        }, 
        "kind": {
          "enum": [
            "PersistentVolumeList"
          ], 
          "type": "string", 
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
        }, 
        "apiVersion": {
          "type": "string", 
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources"
        }, 
        "metadata": {
          "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds", 
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      }
    }, 
    "io.k8s.api.admissionregistration.v1.ValidatingAdmissionPolicy": {
      "type": "object", 
      "x-kubernetes-group-version-kind": [
        {
          "kind": "ValidatingAdmissionPolicy", 
          "version": "v1", 
          "group": "admissionregistration.k8s.io"
        }
      ], 
      "description": "ValidatingAdmissionPolicy describes the definition of an admission validation policy that accepts or rejects an object without changing it.", 
      "properties": {
        "status": {
          "description": "The status of the ValidatingAdmissionPolicy, including warnings that are useful to determine if the policy behaves in the expected way. Populated by the system. Read-only.", 
          "$ref": "#/definitions/io.k8s.api.admissionregistration.v1.ValidatingAdmissionPolicyStatus"
        }, 
        "kind": {
          "enum": [
            "ValidatingAdmissionPolicy"
          ], 
          "type": "string", 
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
        }, 
        "spec": {
          "description": "Specification of the desired behavior of the ValidatingAdmissionPolicy.", 
          "$ref": "#/definitions/io.k8s.api.admissionregistration.v1.ValidatingAdmissionPolicySpec"
        }, 
        "apiVersion": {
          "type": "string", 
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources"
        }, 
        "metadata": {
          "description": "Standard object metadata; More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata.", 
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        }
      }
    }, 
    "io.k8s.api.flowcontrol.v1.QueuingConfiguration": {
      "type": "object", 
      "description": "QueuingConfiguration holds the configuration parameters for queuing", 
      "properties": {
        "handSize": {
          "type": "integer", 
          "description": "`handSize` is a small positive number that configures the shuffle sharding of requests into queues.  When enqueuing a request at this priority level the request's flow identifier (a string pair) is hashed and the hash value is used to shuffle the list of queues and deal a hand of the size specified here.  The request is put into one of the shortest queues in that hand. `handSize` must be no larger than `queues`, and should be significantly smaller (so that a few heavy flows do not saturate most of the queues).  See the user-facing documentation for more extensive guidance on setting this field.  This field has a default value of 8.", 
          "format": "int32"
        }, 
        "queues": {
          "type": "integer", 
          "description": "`queues` is the number of queues for this priority level. The queues exist independently at each apiserver. The value must be positive.  Setting it to 1 effectively precludes shufflesharding and thus makes the distinguisher method of associated flow schemas irrelevant.  This field has a default value of 64.", 
          "format": "int32"
        }, 
        "queueLengthLimit": {
          "type": "integer", 
          "description": "`queueLengthLimit` is the maximum number of requests allowed to be waiting in a given queue of this priority level at a time; excess requests are rejected.  This value must be positive.  If not specified, it will be defaulted to 50.", 
          "format": "int32"
        }
      }
    }, 
    "io.k8s.api.storage.v1.VolumeAttributesClassList": {
      "type": "object", 
      "required": [
        "items"
      ], 
      "x-kubernetes-group-version-kind": [
        {
          "kind": "VolumeAttributesClassList", 
          "version": "v1", 
          "group": "storage.k8s.io"
        }
      ], 
      "description": "VolumeAttributesClassList is a collection of VolumeAttributesClass objects.", 
      "properties": {
        "items": {
          "items": {
            "$ref": "#/definitions/io.k8s.api.storage.v1.VolumeAttributesClass"
          }, 
          "type": "array", 
          "description": "items is the list of VolumeAttributesClass objects."
        }, 
        "kind": {
          "enum": [
            "VolumeAttributesClassList"
          ], 
          "type": "string", 
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
        }, 
        "apiVersion": {
          "type": "string", 
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources"
        }, 
        "metadata": {
          "description": "Standard list metadata More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata", 
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      }
    }, 
    "io.k8s.api.networking.v1beta1.ServiceCIDRList": {
      "type": "object", 
      "required": [
        "items"
      ], 
      "x-kubernetes-group-version-kind": [
        {
          "kind": "ServiceCIDRList", 
          "version": "v1beta1", 
          "group": "networking.k8s.io"
        }
      ], 
      "description": "ServiceCIDRList contains a list of ServiceCIDR objects.", 
      "properties": {
        "items": {
          "items": {
            "$ref": "#/definitions/io.k8s.api.networking.v1beta1.ServiceCIDR"
          }, 
          "type": "array", 
          "description": "items is the list of ServiceCIDRs."
        }, 
        "kind": {
          "enum": [
            "ServiceCIDRList"
          ], 
          "type": "string", 
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
        }, 
        "apiVersion": {
          "type": "string", 
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources"
        }, 
        "metadata": {
          "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata", 
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      }
    }, 
    "io.k8s.api.apps.v1.RollingUpdateDeployment": {
      "type": "object", 
      "description": "Spec to control the desired behavior of rolling update.", 
      "properties": {
        "maxSurge": {
          "description": "The maximum number of pods that can be scheduled above the desired number of pods. Value can be an absolute number (ex: 5) or a percentage of desired pods (ex: 10%). This can not be 0 if MaxUnavailable is 0. Absolute number is calculated from percentage by rounding up. Defaults to 25%. Example: when this is set to 30%, the new ReplicaSet can be scaled up immediately when the rolling update starts, such that the total number of old and new pods do not exceed 130% of desired pods. Once old pods have been killed, new ReplicaSet can be scaled up further, ensuring that total number of pods running at any time during the update is at most 130% of desired pods.", 
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.util.intstr.IntOrString"
        }, 
        "maxUnavailable": {
          "description": "The maximum number of pods that can be unavailable during the update. Value can be an absolute number (ex: 5) or a percentage of desired pods (ex: 10%). Absolute number is calculated from percentage by rounding down. This can not be 0 if MaxSurge is 0. Defaults to 25%. Example: when this is set to 30%, the old ReplicaSet can be scaled down to 70% of desired pods immediately when the rolling update starts. Once new pods are ready, old ReplicaSet can be scaled down further, followed by scaling up the new ReplicaSet, ensuring that the total number of pods available at all times during the update is at least 70% of desired pods.", 
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.util.intstr.IntOrString"
        }
      }
    }, 
    "io.k8s.api.core.v1.TCPSocketAction": {
      "required": [
        "port"
      ], 
      "type": "object", 
      "description": "TCPSocketAction describes an action based on opening a socket", 
      "properties": {
        "host": {
          "type": "string", 
          "description": "Optional: Host name to connect to, defaults to the pod IP."
        }, 
        "port": {
          "description": "Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.", 
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.util.intstr.IntOrString"
        }
      }
    }, 
    "io.k8s.api.apps.v1.ReplicaSet": {
      "type": "object", 
      "x-kubernetes-group-version-kind": [
        {
          "kind": "ReplicaSet", 
          "version": "v1", 
          "group": "apps"
        }
      ], 
      "description": "ReplicaSet ensures that a specified number of pod replicas are running at any given time.", 
      "properties": {
        "status": {
          "description": "Status is the most recently observed status of the ReplicaSet. This data may be out of date by some window of time. Populated by the system. Read-only. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status", 
          "$ref": "#/definitions/io.k8s.api.apps.v1.ReplicaSetStatus"
        }, 
        "kind": {
          "enum": [
            "ReplicaSet"
          ], 
          "type": "string", 
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
        }, 
        "spec": {
          "description": "Spec defines the specification of the desired behavior of the ReplicaSet. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status", 
          "$ref": "#/definitions/io.k8s.api.apps.v1.ReplicaSetSpec"
        }, 
        "apiVersion": {
          "type": "string", 
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources"
        }, 
        "metadata": {
          "description": "If the Labels of a ReplicaSet are empty, they are defaulted to be the same as the Pod(s) that the ReplicaSet manages. Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata", 
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        }
      }
    }, 
    "io.k8s.api.resource.v1beta1.DeviceAllocationConfiguration": {
      "required": [
        "source"
      ], 
      "type": "object", 
      "description": "DeviceAllocationConfiguration gets embedded in an AllocationResult.", 
      "properties": {
        "source": {
          "type": "string", 
          "description": "Source records whether the configuration comes from a class and thus is not something that a normal user would have been able to set or from a claim."
        }, 
        "requests": {
          "items": {
            "type": "string"
          }, 
          "type": "array", 
          "description": "Requests lists the names of requests where the configuration applies. If empty, its applies to all requests.\n\nReferences to subrequests must include the name of the main request and may include the subrequest using the format <main request>[/<subrequest>]. If just the main request is given, the configuration applies to all subrequests.", 
          "x-kubernetes-list-type": "atomic"
        }, 
        "opaque": {
          "description": "Opaque provides driver-specific configuration parameters.", 
          "$ref": "#/definitions/io.k8s.api.resource.v1beta1.OpaqueDeviceConfiguration"
        }
      }
    }, 
    "io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.CustomResourceSubresources": {
      "type": "object", 
      "description": "CustomResourceSubresources defines the status and scale subresources for CustomResources.", 
      "properties": {
        "status": {
          "description": "status indicates the custom resource should serve a `/status` subresource. When enabled: 1. requests to the custom resource primary endpoint ignore changes to the `status` stanza of the object. 2. requests to the custom resource `/status` subresource ignore changes to anything other than the `status` stanza of the object.", 
          "$ref": "#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.CustomResourceSubresourceStatus"
        }, 
        "scale": {
          "description": "scale indicates the custom resource should serve a `/scale` subresource that returns an `autoscaling/v1` Scale object.", 
          "$ref": "#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.CustomResourceSubresourceScale"
        }
      }
    }, 
    "io.k8s.api.core.v1.GlusterfsPersistentVolumeSource": {
      "required": [
        "endpoints", 
        "path"
      ], 
      "type": "object", 
      "description": "Represents a Glusterfs mount that lasts the lifetime of a pod. Glusterfs volumes do not support ownership management or SELinux relabeling.", 
      "properties": {
        "path": {
          "type": "string", 
          "description": "path is the Glusterfs volume path. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod"
        }, 
        "readOnly": {
          "type": "boolean", 
          "description": "readOnly here will force the Glusterfs volume to be mounted with read-only permissions. Defaults to false. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod"
        }, 
        "endpoints": {
          "type": "string", 
          "description": "endpoints is the endpoint name that details Glusterfs topology. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod"
        }, 
        "endpointsNamespace": {
          "type": "string", 
          "description": "endpointsNamespace is the namespace that contains Glusterfs endpoint. If this field is empty, the EndpointNamespace defaults to the same namespace as the bound PVC. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod"
        }
      }
    }, 
    "io.k8s.api.resource.v1.CapacityRequestPolicyRange": {
      "required": [
        "min"
      ], 
      "type": "object", 
      "description": "CapacityRequestPolicyRange defines a valid range for consumable capacity values.\n\n  - If the requested amount is less than Min, it is rounded up to the Min value.\n  - If Step is set and the requested amount is between Min and Max but not aligned with Step,\n    it will be rounded up to the next value equal to Min + (n * Step).\n  - If Step is not set, the requested amount is used as-is if it falls within the range Min to Max (if set).\n  - If the requested or rounded amount exceeds Max (if set), the request does not satisfy the policy,\n    and the device cannot be allocated.", 
      "properties": {
        "max": {
          "description": "Max defines the upper limit for capacity that can be requested.\n\nMax must be less than or equal to the capacity value. Min and requestPolicy.default must be less than or equal to the maximum.", 
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.api.resource.Quantity"
        }, 
        "step": {
          "description": "Step defines the step size between valid capacity amounts within the range.\n\nMax (if set) and requestPolicy.default must be a multiple of Step. Min + Step must be less than or equal to the capacity value.", 
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.api.resource.Quantity"
        }, 
        "min": {
          "description": "Min specifies the minimum capacity allowed for a consumption request.\n\nMin must be greater than or equal to zero, and less than or equal to the capacity value. requestPolicy.default must be more than or equal to the minimum.", 
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.api.resource.Quantity"
        }
      }
    }, 
    "io.k8s.api.core.v1.PreferredSchedulingTerm": {
      "required": [
        "weight", 
        "preference"
      ], 
      "type": "object", 
      "description": "An empty preferred scheduling term matches all objects with implicit weight 0 (i.e. it's a no-op). A null preferred scheduling term matches no objects (i.e. is also a no-op).", 
      "properties": {
        "preference": {
          "description": "A node selector term, associated with the corresponding weight.", 
          "$ref": "#/definitions/io.k8s.api.core.v1.NodeSelectorTerm"
        }, 
        "weight": {
          "type": "integer", 
          "description": "Weight associated with matching the corresponding nodeSelectorTerm, in the range 1-100.", 
          "format": "int32"
        }
      }
    }, 
    "io.k8s.api.core.v1.NodeSwapStatus": {
      "type": "object", 
      "description": "NodeSwapStatus represents swap memory information.", 
      "properties": {
        "capacity": {
          "type": "integer", 
          "description": "Total amount of swap memory in bytes.", 
          "format": "int64"
        }
      }
    }, 
    "io.k8s.api.resource.v1alpha3.DeviceTaint": {
      "required": [
        "key", 
        "effect"
      ], 
      "type": "object", 
      "description": "The device this taint is attached to has the \"effect\" on any claim which does not tolerate the taint and, through the claim, to pods using the claim.", 
      "properties": {
        "key": {
          "type": "string", 
          "description": "The taint key to be applied to a device. Must be a label name."
        }, 
        "timeAdded": {
          "description": "TimeAdded represents the time at which the taint was added. Added automatically during create or update if not set.", 
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
        }, 
        "effect": {
          "type": "string", 
          "description": "The effect of the taint on claims that do not tolerate the taint and through such claims on the pods using them. Valid effects are NoSchedule and NoExecute. PreferNoSchedule as used for nodes is not valid here."
        }, 
        "value": {
          "type": "string", 
          "description": "The taint value corresponding to the taint key. Must be a label value."
        }
      }
    }, 
    "io.k8s.api.authorization.v1.SubjectRulesReviewStatus": {
      "required": [
        "resourceRules", 
        "nonResourceRules", 
        "incomplete"
      ], 
      "type": "object", 
      "description": "SubjectRulesReviewStatus contains the result of a rules check. This check can be incomplete depending on the set of authorizers the server is configured with and any errors experienced during evaluation. Because authorization rules are additive, if a rule appears in a list it's safe to assume the subject has that permission, even if that list is incomplete.", 
      "properties": {
        "nonResourceRules": {
          "items": {
            "$ref": "#/definitions/io.k8s.api.authorization.v1.NonResourceRule"
          }, 
          "type": "array", 
          "description": "NonResourceRules is the list of actions the subject is allowed to perform on non-resources. The list ordering isn't significant, may contain duplicates, and possibly be incomplete.", 
          "x-kubernetes-list-type": "atomic"
        }, 
        "evaluationError": {
          "type": "string", 
          "description": "EvaluationError can appear in combination with Rules. It indicates an error occurred during rule evaluation, such as an authorizer that doesn't support rule evaluation, and that ResourceRules and/or NonResourceRules may be incomplete."
        }, 
        "resourceRules": {
          "items": {
            "$ref": "#/definitions/io.k8s.api.authorization.v1.ResourceRule"
          }, 
          "type": "array", 
          "description": "ResourceRules is the list of actions the subject is allowed to perform on resources. The list ordering isn't significant, may contain duplicates, and possibly be incomplete.", 
          "x-kubernetes-list-type": "atomic"
        }, 
        "incomplete": {
          "type": "boolean", 
          "description": "Incomplete is true when the rules returned by this call are incomplete. This is most commonly encountered when an authorizer, such as an external authorizer, doesn't support rules evaluation."
        }
      }
    }, 
    "io.k8s.api.core.v1.ResourceStatus": {
      "required": [
        "name"
      ], 
      "type": "object", 
      "description": "ResourceStatus represents the status of a single resource allocated to a Pod.", 
      "properties": {
        "name": {
          "type": "string", 
          "description": "Name of the resource. Must be unique within the pod and in case of non-DRA resource, match one of the resources from the pod spec. For DRA resources, the value must be \"claim:<claim_name>/<request>\". When this status is reported about a container, the \"claim_name\" and \"request\" must match one of the claims of this container."
        }, 
        "resources": {
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.ResourceHealth"
          }, 
          "type": "array", 
          "description": "List of unique resources health. Each element in the list contains an unique resource ID and its health. At a minimum, for the lifetime of a Pod, resource ID must uniquely identify the resource allocated to the Pod on the Node. If other Pod on the same Node reports the status with the same resource ID, it must be the same resource they share. See ResourceID type definition for a specific format it has in various use cases.", 
          "x-kubernetes-list-map-keys": [
            "resourceID"
          ], 
          "x-kubernetes-list-type": "map"
        }
      }
    }, 
    "io.k8s.api.admissionregistration.v1alpha1.MatchResources": {
      "type": "object", 
      "x-kubernetes-map-type": "atomic", 
      "description": "MatchResources decides whether to run the admission control policy on an object based on whether it meets the match criteria. The exclude rules take precedence over include rules (if a resource matches both, it is excluded)", 
      "properties": {
        "objectSelector": {
          "description": "ObjectSelector decides whether to run the policy based on if the object has matching labels. objectSelector is evaluated against both the oldObject and newObject that would be sent to the policy's expression (CEL), and is considered to match if either object matches the selector. A null object (oldObject in the case of create, or newObject in the case of delete) or an object that cannot have labels (like a DeploymentRollback or a PodProxyOptions object) is not considered to match. Use the object selector only if the webhook is opt-in, because end users may skip the admission webhook by setting the labels. Default to the empty LabelSelector, which matches everything.", 
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector"
        }, 
        "matchPolicy": {
          "type": "string", 
          "description": "matchPolicy defines how the \"MatchResources\" list is used to match incoming requests. Allowed values are \"Exact\" or \"Equivalent\".\n\n- Exact: match a request only if it exactly matches a specified rule. For example, if deployments can be modified via apps/v1, apps/v1beta1, and extensions/v1beta1, but \"rules\" only included `apiGroups:[\"apps\"], apiVersions:[\"v1\"], resources: [\"deployments\"]`, the admission policy does not consider requests to apps/v1beta1 or extensions/v1beta1 API groups.\n\n- Equivalent: match a request if modifies a resource listed in rules, even via another API group or version. For example, if deployments can be modified via apps/v1, apps/v1beta1, and extensions/v1beta1, and \"rules\" only included `apiGroups:[\"apps\"], apiVersions:[\"v1\"], resources: [\"deployments\"]`, the admission policy **does** consider requests made to apps/v1beta1 or extensions/v1beta1 API groups. The API server translates the request to a matched resource API if necessary.\n\nDefaults to \"Equivalent\""
        }, 
        "excludeResourceRules": {
          "items": {
            "$ref": "#/definitions/io.k8s.api.admissionregistration.v1alpha1.NamedRuleWithOperations"
          }, 
          "type": "array", 
          "description": "ExcludeResourceRules describes what operations on what resources/subresources the policy should not care about. The exclude rules take precedence over include rules (if a resource matches both, it is excluded)", 
          "x-kubernetes-list-type": "atomic"
        }, 
        "resourceRules": {
          "items": {
            "$ref": "#/definitions/io.k8s.api.admissionregistration.v1alpha1.NamedRuleWithOperations"
          }, 
          "type": "array", 
          "description": "ResourceRules describes what operations on what resources/subresources the admission policy matches. The policy cares about an operation if it matches _any_ Rule.", 
          "x-kubernetes-list-type": "atomic"
        }, 
        "namespaceSelector": {
          "description": "NamespaceSelector decides whether to run the admission control policy on an object based on whether the namespace for that object matches the selector. If the object itself is a namespace, the matching is performed on object.metadata.labels. If the object is another cluster scoped resource, it never skips the policy.\n\nFor example, to run the webhook on any objects whose namespace is not associated with \"runlevel\" of \"0\" or \"1\";  you will set the selector as follows: \"namespaceSelector\": {\n  \"matchExpressions\": [\n    {\n      \"key\": \"runlevel\",\n      \"operator\": \"NotIn\",\n      \"values\": [\n        \"0\",\n        \"1\"\n      ]\n    }\n  ]\n}\n\nIf instead you want to only run the policy on any objects whose namespace is associated with the \"environment\" of \"prod\" or \"staging\"; you will set the selector as follows: \"namespaceSelector\": {\n  \"matchExpressions\": [\n    {\n      \"key\": \"environment\",\n      \"operator\": \"In\",\n      \"values\": [\n        \"prod\",\n        \"staging\"\n      ]\n    }\n  ]\n}\n\nSee https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/ for more examples of label selectors.\n\nDefault to the empty LabelSelector, which matches everything.", 
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector"
        }
      }
    }, 
    "io.k8s.api.resource.v1.Counter": {
      "required": [
        "value"
      ], 
      "type": "object", 
      "description": "Counter describes a quantity associated with a device.", 
      "properties": {
        "value": {
          "description": "Value defines how much of a certain device counter is available.", 
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.api.resource.Quantity"
        }
      }
    }, 
    "io.k8s.api.apps.v1.StatefulSetOrdinals": {
      "type": "object", 
      "description": "StatefulSetOrdinals describes the policy used for replica ordinal assignment in this StatefulSet.", 
      "properties": {
        "start": {
          "type": "integer", 
          "description": "start is the number representing the first replica's index. It may be used to number replicas from an alternate index (eg: 1-indexed) over the default 0-indexed names, or to orchestrate progressive movement of replicas from one StatefulSet to another. If set, replica indices will be in the range:\n  [.spec.ordinals.start, .spec.ordinals.start + .spec.replicas).\nIf unset, defaults to 0. Replica indices will be in the range:\n  [0, .spec.replicas).", 
          "format": "int32"
        }
      }
    }, 
    "io.k8s.api.apps.v1.DeploymentSpec": {
      "required": [
        "selector", 
        "template"
      ], 
      "type": "object", 
      "description": "DeploymentSpec is the specification of the desired behavior of the Deployment.", 
      "properties": {
        "progressDeadlineSeconds": {
          "type": "integer", 
          "description": "The maximum time in seconds for a deployment to make progress before it is considered to be failed. The deployment controller will continue to process failed deployments and a condition with a ProgressDeadlineExceeded reason will be surfaced in the deployment status. Note that progress will not be estimated during the time a deployment is paused. Defaults to 600s.", 
          "format": "int32"
        }, 
        "replicas": {
          "type": "integer", 
          "description": "Number of desired pods. This is a pointer to distinguish between explicit zero and not specified. Defaults to 1.", 
          "format": "int32"
        }, 
        "selector": {
          "description": "Label selector for pods. Existing ReplicaSets whose pods are selected by this will be the ones affected by this deployment. It must match the pod template's labels.", 
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector"
        }, 
        "paused": {
          "type": "boolean", 
          "description": "Indicates that the deployment is paused."
        }, 
        "template": {
          "description": "Template describes the pods that will be created. The only allowed template.spec.restartPolicy value is \"Always\".", 
          "$ref": "#/definitions/io.k8s.api.core.v1.PodTemplateSpec"
        }, 
        "revisionHistoryLimit": {
          "type": "integer", 
          "description": "The number of old ReplicaSets to retain to allow rollback. This is a pointer to distinguish between explicit zero and not specified. Defaults to 10.", 
          "format": "int32"
        }, 
        "strategy": {
          "$ref": "#/definitions/io.k8s.api.apps.v1.DeploymentStrategy", 
          "x-kubernetes-patch-strategy": "retainKeys", 
          "description": "The deployment strategy to use to replace existing pods with new ones."
        }, 
        "minReadySeconds": {
          "type": "integer", 
          "description": "Minimum number of seconds for which a newly created pod should be ready without any of its container crashing, for it to be considered available. Defaults to 0 (pod will be considered available as soon as it is ready)", 
          "format": "int32"
        }
      }
    }, 
    "io.k8s.api.policy.v1.Eviction": {
      "type": "object", 
      "x-kubernetes-group-version-kind": [
        {
          "kind": "Eviction", 
          "version": "v1", 
          "group": "policy"
        }
      ], 
      "description": "Eviction evicts a pod from its node subject to certain policies and safety constraints. This is a subresource of Pod.  A request to cause such an eviction is created by POSTing to .../pods/<pod name>/evictions.", 
      "properties": {
        "deleteOptions": {
          "description": "DeleteOptions may be provided", 
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
        }, 
        "kind": {
          "enum": [
            "Eviction"
          ], 
          "type": "string", 
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
        }, 
        "apiVersion": {
          "type": "string", 
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources"
        }, 
        "metadata": {
          "description": "ObjectMeta describes the pod that is being evicted.", 
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        }
      }
    }, 
    "io.k8s.api.batch.v1.PodFailurePolicyOnExitCodesRequirement": {
      "required": [
        "operator", 
        "values"
      ], 
      "type": "object", 
      "description": "PodFailurePolicyOnExitCodesRequirement describes the requirement for handling a failed pod based on its container exit codes. In particular, it lookups the .state.terminated.exitCode for each app container and init container status, represented by the .status.containerStatuses and .status.initContainerStatuses fields in the Pod status, respectively. Containers completed with success (exit code 0) are excluded from the requirement check.", 
      "properties": {
        "operator": {
          "type": "string", 
          "description": "Represents the relationship between the container exit code(s) and the specified values. Containers completed with success (exit code 0) are excluded from the requirement check. Possible values are:\n\n- In: the requirement is satisfied if at least one container exit code\n  (might be multiple if there are multiple containers not restricted\n  by the 'containerName' field) is in the set of specified values.\n- NotIn: the requirement is satisfied if at least one container exit code\n  (might be multiple if there are multiple containers not restricted\n  by the 'containerName' field) is not in the set of specified values.\nAdditional values are considered to be added in the future. Clients should react to an unknown operator by assuming the requirement is not satisfied."
        }, 
        "containerName": {
          "type": "string", 
          "description": "Restricts the check for exit codes to the container with the specified name. When null, the rule applies to all containers. When specified, it should match one the container or initContainer names in the pod template."
        }, 
        "values": {
          "items": {
            "type": "integer", 
            "format": "int32"
          }, 
          "type": "array", 
          "description": "Specifies the set of values. Each returned container exit code (might be multiple in case of multiple containers) is checked against this set of values with respect to the operator. The list of values must be ordered and must not contain duplicates. Value '0' cannot be used for the In operator. At least one element is required. At most 255 elements are allowed.", 
          "x-kubernetes-list-type": "set"
        }
      }
    }, 
    "io.k8s.api.core.v1.NodeStatus": {
      "type": "object", 
      "description": "NodeStatus is information about the current status of a node.", 
      "properties": {
        "capacity": {
          "additionalProperties": {
            "$ref": "#/definitions/io.k8s.apimachinery.pkg.api.resource.Quantity"
          }, 
          "type": "object", 
          "description": "Capacity represents the total resources of a node. More info: https://kubernetes.io/docs/reference/node/node-status/#capacity"
        }, 
        "addresses": {
          "description": "List of addresses reachable to the node. Queried from cloud provider, if available. More info: https://kubernetes.io/docs/reference/node/node-status/#addresses Note: This field is declared as mergeable, but the merge key is not sufficiently unique, which can cause data corruption when it is merged. Callers should instead use a full-replacement patch. See https://pr.k8s.io/79391 for an example. Consumers should assume that addresses can change during the lifetime of a Node. However, there are some exceptions where this may not be possible, such as Pods that inherit a Node's address in its own status or consumers of the downward API (status.hostIP).", 
          "x-kubernetes-list-map-keys": [
            "type"
          ], 
          "x-kubernetes-patch-merge-key": "type", 
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.NodeAddress"
          }, 
          "type": "array", 
          "x-kubernetes-list-type": "map", 
          "x-kubernetes-patch-strategy": "merge"
        }, 
        "images": {
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.ContainerImage"
          }, 
          "type": "array", 
          "description": "List of container images on this node", 
          "x-kubernetes-list-type": "atomic"
        }, 
        "nodeInfo": {
          "description": "Set of ids/uuids to uniquely identify the node. More info: https://kubernetes.io/docs/reference/node/node-status/#info", 
          "$ref": "#/definitions/io.k8s.api.core.v1.NodeSystemInfo"
        }, 
        "config": {
          "description": "Status of the config assigned to the node via the dynamic Kubelet config feature.", 
          "$ref": "#/definitions/io.k8s.api.core.v1.NodeConfigStatus"
        }, 
        "volumesAttached": {
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.AttachedVolume"
          }, 
          "type": "array", 
          "description": "List of volumes that are attached to the node.", 
          "x-kubernetes-list-type": "atomic"
        }, 
        "allocatable": {
          "additionalProperties": {
            "$ref": "#/definitions/io.k8s.apimachinery.pkg.api.resource.Quantity"
          }, 
          "type": "object", 
          "description": "Allocatable represents the resources of a node that are available for scheduling. Defaults to Capacity."
        }, 
        "volumesInUse": {
          "items": {
            "type": "string"
          }, 
          "type": "array", 
          "description": "List of attachable volumes in use (mounted) by the node.", 
          "x-kubernetes-list-type": "atomic"
        }, 
        "daemonEndpoints": {
          "description": "Endpoints of daemons running on the Node.", 
          "$ref": "#/definitions/io.k8s.api.core.v1.NodeDaemonEndpoints"
        }, 
        "phase": {
          "type": "string", 
          "description": "NodePhase is the recently observed lifecycle phase of the node. More info: https://kubernetes.io/docs/concepts/nodes/node/#phase The field is never populated, and now is deprecated."
        }, 
        "runtimeHandlers": {
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.NodeRuntimeHandler"
          }, 
          "type": "array", 
          "description": "The available runtime handlers.", 
          "x-kubernetes-list-type": "atomic"
        }, 
        "conditions": {
          "description": "Conditions is an array of current observed node conditions. More info: https://kubernetes.io/docs/reference/node/node-status/#condition", 
          "x-kubernetes-list-map-keys": [
            "type"
          ], 
          "x-kubernetes-patch-merge-key": "type", 
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.NodeCondition"
          }, 
          "type": "array", 
          "x-kubernetes-list-type": "map", 
          "x-kubernetes-patch-strategy": "merge"
        }, 
        "features": {
          "description": "Features describes the set of features implemented by the CRI implementation.", 
          "$ref": "#/definitions/io.k8s.api.core.v1.NodeFeatures"
        }
      }
    }, 
    "io.k8s.api.resource.v1beta2.DeviceClassSpec": {
      "type": "object", 
      "description": "DeviceClassSpec is used in a [DeviceClass] to define what can be allocated and how to configure it.", 
      "properties": {
        "extendedResourceName": {
          "type": "string", 
          "description": "ExtendedResourceName is the extended resource name for the devices of this class. The devices of this class can be used to satisfy a pod's extended resource requests. It has the same format as the name of a pod's extended resource. It should be unique among all the device classes in a cluster. If two device classes have the same name, then the class created later is picked to satisfy a pod's extended resource requests. If two classes are created at the same time, then the name of the class lexicographically sorted first is picked.\n\nThis is an alpha field."
        }, 
        "config": {
          "items": {
            "$ref": "#/definitions/io.k8s.api.resource.v1beta2.DeviceClassConfiguration"
          }, 
          "type": "array", 
          "description": "Config defines configuration parameters that apply to each device that is claimed via this class. Some classses may potentially be satisfied by multiple drivers, so each instance of a vendor configuration applies to exactly one driver.\n\nThey are passed to the driver, but are not considered while allocating the claim.", 
          "x-kubernetes-list-type": "atomic"
        }, 
        "selectors": {
          "items": {
            "$ref": "#/definitions/io.k8s.api.resource.v1beta2.DeviceSelector"
          }, 
          "type": "array", 
          "description": "Each selector must be satisfied by a device which is claimed via this class.", 
          "x-kubernetes-list-type": "atomic"
        }
      }
    }, 
    "io.k8s.api.admissionregistration.v1alpha1.MutatingAdmissionPolicyBindingSpec": {
      "type": "object", 
      "description": "MutatingAdmissionPolicyBindingSpec is the specification of the MutatingAdmissionPolicyBinding.", 
      "properties": {
        "policyName": {
          "type": "string", 
          "description": "policyName references a MutatingAdmissionPolicy name which the MutatingAdmissionPolicyBinding binds to. If the referenced resource does not exist, this binding is considered invalid and will be ignored Required."
        }, 
        "paramRef": {
          "description": "paramRef specifies the parameter resource used to configure the admission control policy. It should point to a resource of the type specified in spec.ParamKind of the bound MutatingAdmissionPolicy. If the policy specifies a ParamKind and the resource referred to by ParamRef does not exist, this binding is considered mis-configured and the FailurePolicy of the MutatingAdmissionPolicy applied. If the policy does not specify a ParamKind then this field is ignored, and the rules are evaluated without a param.", 
          "$ref": "#/definitions/io.k8s.api.admissionregistration.v1alpha1.ParamRef"
        }, 
        "matchResources": {
          "description": "matchResources limits what resources match this binding and may be mutated by it. Note that if matchResources matches a resource, the resource must also match a policy's matchConstraints and matchConditions before the resource may be mutated. When matchResources is unset, it does not constrain resource matching, and only the policy's matchConstraints and matchConditions must match for the resource to be mutated. Additionally, matchResources.resourceRules are optional and do not constraint matching when unset. Note that this is differs from MutatingAdmissionPolicy matchConstraints, where resourceRules are required. The CREATE, UPDATE and CONNECT operations are allowed.  The DELETE operation may not be matched. '*' matches CREATE, UPDATE and CONNECT.", 
          "$ref": "#/definitions/io.k8s.api.admissionregistration.v1alpha1.MatchResources"
        }
      }
    }, 
    "io.k8s.apimachinery.pkg.apis.meta.v1.ServerAddressByClientCIDR": {
      "required": [
        "clientCIDR", 
        "serverAddress"
      ], 
      "type": "object", 
      "description": "ServerAddressByClientCIDR helps the client to determine the server address that they should use, depending on the clientCIDR that they match.", 
      "properties": {
        "clientCIDR": {
          "type": "string", 
          "description": "The CIDR with which clients can match their IP to figure out the server address that they should use."
        }, 
        "serverAddress": {
          "type": "string", 
          "description": "Address of this server, suitable for a client that matches the above CIDR. This can be a hostname, hostname:port, IP or IP:port."
        }
      }
    }, 
    "io.k8s.api.core.v1.CinderPersistentVolumeSource": {
      "required": [
        "volumeID"
      ], 
      "type": "object", 
      "description": "Represents a cinder volume resource in Openstack. A Cinder volume must exist before mounting to a container. The volume must also be in the same region as the kubelet. Cinder volumes support ownership management and SELinux relabeling.", 
      "properties": {
        "readOnly": {
          "type": "boolean", 
          "description": "readOnly is Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. More info: https://examples.k8s.io/mysql-cinder-pd/README.md"
        }, 
        "fsType": {
          "type": "string", 
          "description": "fsType Filesystem type to mount. Must be a filesystem type supported by the host operating system. Examples: \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified. More info: https://examples.k8s.io/mysql-cinder-pd/README.md"
        }, 
        "secretRef": {
          "description": "secretRef is Optional: points to a secret object containing parameters used to connect to OpenStack.", 
          "$ref": "#/definitions/io.k8s.api.core.v1.SecretReference"
        }, 
        "volumeID": {
          "type": "string", 
          "description": "volumeID used to identify the volume in cinder. More info: https://examples.k8s.io/mysql-cinder-pd/README.md"
        }
      }
    }, 
    "io.k8s.apimachinery.pkg.apis.meta.v1.Condition": {
      "required": [
        "type", 
        "status", 
        "lastTransitionTime", 
        "reason", 
        "message"
      ], 
      "type": "object", 
      "description": "Condition contains details for one aspect of the current state of this API Resource.", 
      "properties": {
        "status": {
          "type": "string", 
          "description": "status of the condition, one of True, False, Unknown."
        }, 
        "reason": {
          "type": "string", 
          "description": "reason contains a programmatic identifier indicating the reason for the condition's last transition. Producers of specific condition types may define expected values and meanings for this field, and whether the values are considered a guaranteed API. The value should be a CamelCase string. This field may not be empty."
        }, 
        "observedGeneration": {
          "type": "integer", 
          "description": "observedGeneration represents the .metadata.generation that the condition was set based upon. For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date with respect to the current state of the instance.", 
          "format": "int64"
        }, 
        "type": {
          "type": "string", 
          "description": "type of condition in CamelCase or in foo.example.com/CamelCase."
        }, 
        "message": {
          "type": "string", 
          "description": "message is a human readable message indicating details about the transition. This may be an empty string."
        }, 
        "lastTransitionTime": {
          "description": "lastTransitionTime is the last time the condition transitioned from one status to another. This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.", 
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
        }
      }
    }, 
    "io.k8s.api.resource.v1beta2.ResourceClaimSpec": {
      "type": "object", 
      "description": "ResourceClaimSpec defines what is being requested in a ResourceClaim and how to configure it.", 
      "properties": {
        "devices": {
          "description": "Devices defines how to request devices.", 
          "$ref": "#/definitions/io.k8s.api.resource.v1beta2.DeviceClaim"
        }
      }
    }, 
    "io.k8s.api.certificates.v1.CertificateSigningRequestSpec": {
      "required": [
        "request", 
        "signerName"
      ], 
      "type": "object", 
      "description": "CertificateSigningRequestSpec contains the certificate request.", 
      "properties": {
        "username": {
          "type": "string", 
          "description": "username contains the name of the user that created the CertificateSigningRequest. Populated by the API server on creation and immutable."
        }, 
        "signerName": {
          "type": "string", 
          "description": "signerName indicates the requested signer, and is a qualified name.\n\nList/watch requests for CertificateSigningRequests can filter on this field using a \"spec.signerName=NAME\" fieldSelector.\n\nWell-known Kubernetes signers are:\n 1. \"kubernetes.io/kube-apiserver-client\": issues client certificates that can be used to authenticate to kube-apiserver.\n  Requests for this signer are never auto-approved by kube-controller-manager, can be issued by the \"csrsigning\" controller in kube-controller-manager.\n 2. \"kubernetes.io/kube-apiserver-client-kubelet\": issues client certificates that kubelets use to authenticate to kube-apiserver.\n  Requests for this signer can be auto-approved by the \"csrapproving\" controller in kube-controller-manager, and can be issued by the \"csrsigning\" controller in kube-controller-manager.\n 3. \"kubernetes.io/kubelet-serving\" issues serving certificates that kubelets use to serve TLS endpoints, which kube-apiserver can connect to securely.\n  Requests for this signer are never auto-approved by kube-controller-manager, and can be issued by the \"csrsigning\" controller in kube-controller-manager.\n\nMore details are available at https://k8s.io/docs/reference/access-authn-authz/certificate-signing-requests/#kubernetes-signers\n\nCustom signerNames can also be specified. The signer defines:\n 1. Trust distribution: how trust (CA bundles) are distributed.\n 2. Permitted subjects: and behavior when a disallowed subject is requested.\n 3. Required, permitted, or forbidden x509 extensions in the request (including whether subjectAltNames are allowed, which types, restrictions on allowed values) and behavior when a disallowed extension is requested.\n 4. Required, permitted, or forbidden key usages / extended key usages.\n 5. Expiration/certificate lifetime: whether it is fixed by the signer, configurable by the admin.\n 6. Whether or not requests for CA certificates are allowed."
        }, 
        "usages": {
          "items": {
            "type": "string"
          }, 
          "type": "array", 
          "description": "usages specifies a set of key usages requested in the issued certificate.\n\nRequests for TLS client certificates typically request: \"digital signature\", \"key encipherment\", \"client auth\".\n\nRequests for TLS serving certificates typically request: \"key encipherment\", \"digital signature\", \"server auth\".\n\nValid values are:\n \"signing\", \"digital signature\", \"content commitment\",\n \"key encipherment\", \"key agreement\", \"data encipherment\",\n \"cert sign\", \"crl sign\", \"encipher only\", \"decipher only\", \"any\",\n \"server auth\", \"client auth\",\n \"code signing\", \"email protection\", \"s/mime\",\n \"ipsec end system\", \"ipsec tunnel\", \"ipsec user\",\n \"timestamping\", \"ocsp signing\", \"microsoft sgc\", \"netscape sgc\"", 
          "x-kubernetes-list-type": "atomic"
        }, 
        "uid": {
          "type": "string", 
          "description": "uid contains the uid of the user that created the CertificateSigningRequest. Populated by the API server on creation and immutable."
        }, 
        "extra": {
          "additionalProperties": {
            "items": {
              "type": "string"
            }, 
            "type": "array"
          }, 
          "type": "object", 
          "description": "extra contains extra attributes of the user that created the CertificateSigningRequest. Populated by the API server on creation and immutable."
        }, 
        "request": {
          "format": "byte", 
          "type": "string", 
          "description": "request contains an x509 certificate signing request encoded in a \"CERTIFICATE REQUEST\" PEM block. When serialized as JSON or YAML, the data is additionally base64-encoded.", 
          "x-kubernetes-list-type": "atomic"
        }, 
        "groups": {
          "items": {
            "type": "string"
          }, 
          "type": "array", 
          "description": "groups contains group membership of the user that created the CertificateSigningRequest. Populated by the API server on creation and immutable.", 
          "x-kubernetes-list-type": "atomic"
        }, 
        "expirationSeconds": {
          "type": "integer", 
          "description": "expirationSeconds is the requested duration of validity of the issued certificate. The certificate signer may issue a certificate with a different validity duration so a client must check the delta between the notBefore and and notAfter fields in the issued certificate to determine the actual duration.\n\nThe v1.22+ in-tree implementations of the well-known Kubernetes signers will honor this field as long as the requested duration is not greater than the maximum duration they will honor per the --cluster-signing-duration CLI flag to the Kubernetes controller manager.\n\nCertificate signers may not honor this field for various reasons:\n\n  1. Old signer that is unaware of the field (such as the in-tree\n     implementations prior to v1.22)\n  2. Signer whose configured maximum is shorter than the requested duration\n  3. Signer whose configured minimum is longer than the requested duration\n\nThe minimum valid value for expirationSeconds is 600, i.e. 10 minutes.", 
          "format": "int32"
        }
      }
    }, 
    "io.k8s.api.flowcontrol.v1.FlowSchemaCondition": {
      "type": "object", 
      "description": "FlowSchemaCondition describes conditions for a FlowSchema.", 
      "properties": {
        "status": {
          "type": "string", 
          "description": "`status` is the status of the condition. Can be True, False, Unknown. Required."
        }, 
        "lastTransitionTime": {
          "description": "`lastTransitionTime` is the last time the condition transitioned from one status to another.", 
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
        }, 
        "message": {
          "type": "string", 
          "description": "`message` is a human-readable message indicating details about last transition."
        }, 
        "type": {
          "type": "string", 
          "description": "`type` is the type of the condition. Required."
        }, 
        "reason": {
          "type": "string", 
          "description": "`reason` is a unique, one-word, CamelCase reason for the condition's last transition."
        }
      }
    }, 
    "io.k8s.api.flowcontrol.v1.Subject": {
      "x-kubernetes-unions": [
        {
          "discriminator": "kind", 
          "fields-to-discriminateBy": {
            "group": "Group", 
            "serviceAccount": "ServiceAccount", 
            "user": "User"
          }
        }
      ], 
      "required": [
        "kind"
      ], 
      "type": "object", 
      "description": "Subject matches the originator of a request, as identified by the request authentication system. There are three ways of matching an originator; by user, group, or service account.", 
      "properties": {
        "group": {
          "description": "`group` matches based on user group name.", 
          "$ref": "#/definitions/io.k8s.api.flowcontrol.v1.GroupSubject"
        }, 
        "kind": {
          "type": "string", 
          "description": "`kind` indicates which one of the other fields is non-empty. Required"
        }, 
        "serviceAccount": {
          "description": "`serviceAccount` matches ServiceAccounts.", 
          "$ref": "#/definitions/io.k8s.api.flowcontrol.v1.ServiceAccountSubject"
        }, 
        "user": {
          "description": "`user` matches based on username.", 
          "$ref": "#/definitions/io.k8s.api.flowcontrol.v1.UserSubject"
        }
      }
    }, 
    "io.k8s.api.rbac.v1.ClusterRoleBindingList": {
      "type": "object", 
      "required": [
        "items"
      ], 
      "x-kubernetes-group-version-kind": [
        {
          "kind": "ClusterRoleBindingList", 
          "version": "v1", 
          "group": "rbac.authorization.k8s.io"
        }
      ], 
      "description": "ClusterRoleBindingList is a collection of ClusterRoleBindings", 
      "properties": {
        "items": {
          "items": {
            "$ref": "#/definitions/io.k8s.api.rbac.v1.ClusterRoleBinding"
          }, 
          "type": "array", 
          "description": "Items is a list of ClusterRoleBindings"
        }, 
        "kind": {
          "enum": [
            "ClusterRoleBindingList"
          ], 
          "type": "string", 
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
        }, 
        "apiVersion": {
          "type": "string", 
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources"
        }, 
        "metadata": {
          "description": "Standard object's metadata.", 
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      }
    }, 
    "io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.CustomResourceDefinition": {
      "type": "object", 
      "required": [
        "spec"
      ], 
      "x-kubernetes-group-version-kind": [
        {
          "kind": "CustomResourceDefinition", 
          "version": "v1", 
          "group": "apiextensions.k8s.io"
        }
      ], 
      "description": "CustomResourceDefinition represents a resource that should be exposed on the API server.  Its name MUST be in the format <.spec.name>.<.spec.group>.", 
      "properties": {
        "status": {
          "description": "status indicates the actual state of the CustomResourceDefinition", 
          "$ref": "#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.CustomResourceDefinitionStatus"
        }, 
        "kind": {
          "enum": [
            "CustomResourceDefinition"
          ], 
          "type": "string", 
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
        }, 
        "spec": {
          "description": "spec describes how the user wants the resources to appear", 
          "$ref": "#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.CustomResourceDefinitionSpec"
        }, 
        "apiVersion": {
          "type": "string", 
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources"
        }, 
        "metadata": {
          "description": "Standard object's metadata More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata", 
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        }
      }
    }, 
    "io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.ServiceReference": {
      "required": [
        "namespace", 
        "name"
      ], 
      "type": "object", 
      "description": "ServiceReference holds a reference to Service.legacy.k8s.io", 
      "properties": {
        "path": {
          "type": "string", 
          "description": "path is an optional URL path at which the webhook will be contacted."
        }, 
        "namespace": {
          "type": "string", 
          "description": "namespace is the namespace of the service. Required"
        }, 
        "name": {
          "type": "string", 
          "description": "name is the name of the service. Required"
        }, 
        "port": {
          "type": "integer", 
          "description": "port is an optional service port at which the webhook will be contacted. `port` should be a valid port number (1-65535, inclusive). Defaults to 443 for backward compatibility.", 
          "format": "int32"
        }
      }
    }, 
    "io.k8s.api.core.v1.PodAntiAffinity": {
      "type": "object", 
      "description": "Pod anti affinity is a group of inter pod anti affinity scheduling rules.", 
      "properties": {
        "requiredDuringSchedulingIgnoredDuringExecution": {
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.PodAffinityTerm"
          }, 
          "type": "array", 
          "description": "If the anti-affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the anti-affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.", 
          "x-kubernetes-list-type": "atomic"
        }, 
        "preferredDuringSchedulingIgnoredDuringExecution": {
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.WeightedPodAffinityTerm"
          }, 
          "type": "array", 
          "description": "The scheduler will prefer to schedule pods to nodes that satisfy the anti-affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling anti-affinity expressions, etc.), compute a sum by iterating through the elements of this field and subtracting \"weight\" from the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.", 
          "x-kubernetes-list-type": "atomic"
        }
      }
    }, 
    "io.k8s.api.core.v1.WindowsSecurityContextOptions": {
      "type": "object", 
      "description": "WindowsSecurityContextOptions contain Windows-specific options and credentials.", 
      "properties": {
        "hostProcess": {
          "type": "boolean", 
          "description": "HostProcess determines if a container should be run as a 'Host Process' container. All of a Pod's containers must have the same effective HostProcess value (it is not allowed to have a mix of HostProcess containers and non-HostProcess containers). In addition, if HostProcess is true then HostNetwork must also be set to true."
        }, 
        "gmsaCredentialSpec": {
          "type": "string", 
          "description": "GMSACredentialSpec is where the GMSA admission webhook (https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the GMSA credential spec named by the GMSACredentialSpecName field."
        }, 
        "gmsaCredentialSpecName": {
          "type": "string", 
          "description": "GMSACredentialSpecName is the name of the GMSA credential spec to use."
        }, 
        "runAsUserName": {
          "type": "string", 
          "description": "The UserName in Windows to run the entrypoint of the container process. Defaults to the user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence."
        }
      }
    }, 
    "io.k8s.api.certificates.v1alpha1.ClusterTrustBundleList": {
      "type": "object", 
      "required": [
        "items"
      ], 
      "x-kubernetes-group-version-kind": [
        {
          "kind": "ClusterTrustBundleList", 
          "version": "v1alpha1", 
          "group": "certificates.k8s.io"
        }
      ], 
      "description": "ClusterTrustBundleList is a collection of ClusterTrustBundle objects", 
      "properties": {
        "items": {
          "items": {
            "$ref": "#/definitions/io.k8s.api.certificates.v1alpha1.ClusterTrustBundle"
          }, 
          "type": "array", 
          "description": "items is a collection of ClusterTrustBundle objects"
        }, 
        "kind": {
          "enum": [
            "ClusterTrustBundleList"
          ], 
          "type": "string", 
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
        }, 
        "apiVersion": {
          "type": "string", 
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources"
        }, 
        "metadata": {
          "description": "metadata contains the list metadata.", 
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      }
    }, 
    "io.k8s.api.storage.v1.CSINodeDriver": {
      "required": [
        "name", 
        "nodeID"
      ], 
      "type": "object", 
      "description": "CSINodeDriver holds information about the specification of one CSI driver installed on a node", 
      "properties": {
        "allocatable": {
          "description": "allocatable represents the volume resources of a node that are available for scheduling. This field is beta.", 
          "$ref": "#/definitions/io.k8s.api.storage.v1.VolumeNodeResources"
        }, 
        "topologyKeys": {
          "items": {
            "type": "string"
          }, 
          "type": "array", 
          "description": "topologyKeys is the list of keys supported by the driver. When a driver is initialized on a cluster, it provides a set of topology keys that it understands (e.g. \"company.com/zone\", \"company.com/region\"). When a driver is initialized on a node, it provides the same topology keys along with values. Kubelet will expose these topology keys as labels on its own node object. When Kubernetes does topology aware provisioning, it can use this list to determine which labels it should retrieve from the node object and pass back to the driver. It is possible for different nodes to use different topology keys. This can be empty if driver does not support topology.", 
          "x-kubernetes-list-type": "atomic"
        }, 
        "name": {
          "type": "string", 
          "description": "name represents the name of the CSI driver that this object refers to. This MUST be the same name returned by the CSI GetPluginName() call for that driver."
        }, 
        "nodeID": {
          "type": "string", 
          "description": "nodeID of the node from the driver point of view. This field enables Kubernetes to communicate with storage systems that do not share the same nomenclature for nodes. For example, Kubernetes may refer to a given node as \"node1\", but the storage system may refer to the same node as \"nodeA\". When Kubernetes issues a command to the storage system to attach a volume to a specific node, it can use this field to refer to the node name using the ID that the storage system will understand, e.g. \"nodeA\" instead of \"node1\". This field is required."
        }
      }
    }, 
    "io.k8s.api.resource.v1beta2.ResourceSlice": {
      "type": "object", 
      "required": [
        "spec"
      ], 
      "x-kubernetes-group-version-kind": [
        {
          "kind": "ResourceSlice", 
          "version": "v1beta2", 
          "group": "resource.k8s.io"
        }
      ], 
      "description": "ResourceSlice represents one or more resources in a pool of similar resources, managed by a common driver. A pool may span more than one ResourceSlice, and exactly how many ResourceSlices comprise a pool is determined by the driver.\n\nAt the moment, the only supported resources are devices with attributes and capacities. Each device in a given pool, regardless of how many ResourceSlices, must have a unique name. The ResourceSlice in which a device gets published may change over time. The unique identifier for a device is the tuple <driver name>, <pool name>, <device name>.\n\nWhenever a driver needs to update a pool, it increments the pool.Spec.Pool.Generation number and updates all ResourceSlices with that new number and new resource definitions. A consumer must only use ResourceSlices with the highest generation number and ignore all others.\n\nWhen allocating all resources in a pool matching certain criteria or when looking for the best solution among several different alternatives, a consumer should check the number of ResourceSlices in a pool (included in each ResourceSlice) to determine whether its view of a pool is complete and if not, should wait until the driver has completed updating the pool.\n\nFor resources that are not local to a node, the node name is not set. Instead, the driver may use a node selector to specify where the devices are available.\n\nThis is an alpha type and requires enabling the DynamicResourceAllocation feature gate.", 
      "properties": {
        "kind": {
          "enum": [
            "ResourceSlice"
          ], 
          "type": "string", 
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
        }, 
        "spec": {
          "description": "Contains the information published by the driver.\n\nChanging the spec automatically increments the metadata.generation number.", 
          "$ref": "#/definitions/io.k8s.api.resource.v1beta2.ResourceSliceSpec"
        }, 
        "apiVersion": {
          "type": "string", 
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources"
        }, 
        "metadata": {
          "description": "Standard object metadata", 
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        }
      }
    }, 
    "io.k8s.api.networking.v1beta1.ServiceCIDRSpec": {
      "type": "object", 
      "description": "ServiceCIDRSpec define the CIDRs the user wants to use for allocating ClusterIPs for Services.", 
      "properties": {
        "cidrs": {
          "items": {
            "type": "string"
          }, 
          "type": "array", 
          "description": "CIDRs defines the IP blocks in CIDR notation (e.g. \"192.168.0.0/24\" or \"2001:db8::/64\") from which to assign service cluster IPs. Max of two CIDRs is allowed, one of each IP family. This field is immutable.", 
          "x-kubernetes-list-type": "atomic"
        }
      }
    }, 
    "io.k8s.api.core.v1.ConfigMapProjection": {
      "type": "object", 
      "description": "Adapts a ConfigMap into a projected volume.\n\nThe contents of the target ConfigMap's Data field will be presented in a projected volume as files using the keys in the Data field as the file names, unless the items element is populated with specific mappings of keys to paths. Note that this is identical to a configmap volume source without the default mode.", 
      "properties": {
        "items": {
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.KeyToPath"
          }, 
          "type": "array", 
          "description": "items if unspecified, each key-value pair in the Data field of the referenced ConfigMap will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the ConfigMap, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.", 
          "x-kubernetes-list-type": "atomic"
        }, 
        "optional": {
          "type": "boolean", 
          "description": "optional specify whether the ConfigMap or its keys must be defined"
        }, 
        "name": {
          "type": "string", 
          "description": "Name of the referent. This field is effectively required, but due to backwards compatibility is allowed to be empty. Instances of this type with an empty value here are almost certainly wrong. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"
        }
      }
    }, 
    "io.k8s.api.resource.v1beta2.DeviceClaim": {
      "type": "object", 
      "description": "DeviceClaim defines how to request devices with a ResourceClaim.", 
      "properties": {
        "requests": {
          "items": {
            "$ref": "#/definitions/io.k8s.api.resource.v1beta2.DeviceRequest"
          }, 
          "type": "array", 
          "description": "Requests represent individual requests for distinct devices which must all be satisfied. If empty, nothing needs to be allocated.", 
          "x-kubernetes-list-type": "atomic"
        }, 
        "config": {
          "items": {
            "$ref": "#/definitions/io.k8s.api.resource.v1beta2.DeviceClaimConfiguration"
          }, 
          "type": "array", 
          "description": "This field holds configuration for multiple potential drivers which could satisfy requests in this claim. It is ignored while allocating the claim.", 
          "x-kubernetes-list-type": "atomic"
        }, 
        "constraints": {
          "items": {
            "$ref": "#/definitions/io.k8s.api.resource.v1beta2.DeviceConstraint"
          }, 
          "type": "array", 
          "description": "These constraints must be satisfied by the set of devices that get allocated for the claim.", 
          "x-kubernetes-list-type": "atomic"
        }
      }
    }, 
    "io.k8s.api.resource.v1.ResourceClaimTemplateList": {
      "type": "object", 
      "required": [
        "items"
      ], 
      "x-kubernetes-group-version-kind": [
        {
          "kind": "ResourceClaimTemplateList", 
          "version": "v1", 
          "group": "resource.k8s.io"
        }
      ], 
      "description": "ResourceClaimTemplateList is a collection of claim templates.", 
      "properties": {
        "items": {
          "items": {
            "$ref": "#/definitions/io.k8s.api.resource.v1.ResourceClaimTemplate"
          }, 
          "type": "array", 
          "description": "Items is the list of resource claim templates."
        }, 
        "kind": {
          "enum": [
            "ResourceClaimTemplateList"
          ], 
          "type": "string", 
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
        }, 
        "apiVersion": {
          "type": "string", 
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources"
        }, 
        "metadata": {
          "description": "Standard list metadata", 
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      }
    }, 
    "io.k8s.api.storage.v1.CSIStorageCapacityList": {
      "type": "object", 
      "required": [
        "items"
      ], 
      "x-kubernetes-group-version-kind": [
        {
          "kind": "CSIStorageCapacityList", 
          "version": "v1", 
          "group": "storage.k8s.io"
        }
      ], 
      "description": "CSIStorageCapacityList is a collection of CSIStorageCapacity objects.", 
      "properties": {
        "items": {
          "items": {
            "$ref": "#/definitions/io.k8s.api.storage.v1.CSIStorageCapacity"
          }, 
          "type": "array", 
          "description": "items is the list of CSIStorageCapacity objects."
        }, 
        "kind": {
          "enum": [
            "CSIStorageCapacityList"
          ], 
          "type": "string", 
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
        }, 
        "apiVersion": {
          "type": "string", 
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources"
        }, 
        "metadata": {
          "description": "Standard list metadata More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata", 
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      }
    }, 
    "io.k8s.api.resource.v1beta2.AllocatedDeviceStatus": {
      "required": [
        "driver", 
        "pool", 
        "device"
      ], 
      "type": "object", 
      "description": "AllocatedDeviceStatus contains the status of an allocated device, if the driver chooses to report it. This may include driver-specific information.\n\nThe combination of Driver, Pool, Device, and ShareID must match the corresponding key in Status.Allocation.Devices.", 
      "properties": {
        "shareID": {
          "type": "string", 
          "description": "ShareID uniquely identifies an individual allocation share of the device."
        }, 
        "networkData": {
          "description": "NetworkData contains network-related information specific to the device.", 
          "$ref": "#/definitions/io.k8s.api.resource.v1beta2.NetworkDeviceData"
        }, 
        "device": {
          "type": "string", 
          "description": "Device references one device instance via its name in the driver's resource pool. It must be a DNS label."
        }, 
        "driver": {
          "type": "string", 
          "description": "Driver specifies the name of the DRA driver whose kubelet plugin should be invoked to process the allocation once the claim is needed on a node.\n\nMust be a DNS subdomain and should end with a DNS domain owned by the vendor of the driver."
        }, 
        "conditions": {
          "items": {
            "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Condition"
          }, 
          "type": "array", 
          "description": "Conditions contains the latest observation of the device's state. If the device has been configured according to the class and claim config references, the `Ready` condition should be True.\n\nMust not contain more than 8 entries.", 
          "x-kubernetes-list-map-keys": [
            "type"
          ], 
          "x-kubernetes-list-type": "map"
        }, 
        "pool": {
          "type": "string", 
          "description": "This name together with the driver name and the device name field identify which device was allocated (`<driver name>/<pool name>/<device name>`).\n\nMust not be longer than 253 characters and may contain one or more DNS sub-domains separated by slashes."
        }, 
        "data": {
          "description": "Data contains arbitrary driver-specific data.\n\nThe length of the raw data must be smaller or equal to 10 Ki.", 
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.runtime.RawExtension"
        }
      }
    }, 
    "io.k8s.api.resource.v1beta2.DeviceCapacity": {
      "required": [
        "value"
      ], 
      "type": "object", 
      "description": "DeviceCapacity describes a quantity associated with a device.", 
      "properties": {
        "requestPolicy": {
          "description": "RequestPolicy defines how this DeviceCapacity must be consumed when the device is allowed to be shared by multiple allocations.\n\nThe Device must have allowMultipleAllocations set to true in order to set a requestPolicy.\n\nIf unset, capacity requests are unconstrained: requests can consume any amount of capacity, as long as the total consumed across all allocations does not exceed the device's defined capacity. If request is also unset, default is the full capacity value.", 
          "$ref": "#/definitions/io.k8s.api.resource.v1beta2.CapacityRequestPolicy"
        }, 
        "value": {
          "description": "Value defines how much of a certain capacity that device has.\n\nThis field reflects the fixed total capacity and does not change. The consumed amount is tracked separately by scheduler and does not affect this value.", 
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.api.resource.Quantity"
        }
      }
    }, 
    "io.k8s.api.core.v1.ReplicationControllerList": {
      "type": "object", 
      "required": [
        "items"
      ], 
      "x-kubernetes-group-version-kind": [
        {
          "kind": "ReplicationControllerList", 
          "version": "v1", 
          "group": ""
        }
      ], 
      "description": "ReplicationControllerList is a collection of replication controllers.", 
      "properties": {
        "items": {
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.ReplicationController"
          }, 
          "type": "array", 
          "description": "List of replication controllers. More info: https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller"
        }, 
        "kind": {
          "enum": [
            "ReplicationControllerList"
          ], 
          "type": "string", 
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
        }, 
        "apiVersion": {
          "type": "string", 
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources"
        }, 
        "metadata": {
          "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds", 
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      }
    }, 
    "io.k8s.api.authorization.v1.SelfSubjectRulesReview": {
      "type": "object", 
      "required": [
        "spec"
      ], 
      "x-kubernetes-group-version-kind": [
        {
          "kind": "SelfSubjectRulesReview", 
          "version": "v1", 
          "group": "authorization.k8s.io"
        }
      ], 
      "description": "SelfSubjectRulesReview enumerates the set of actions the current user can perform within a namespace. The returned list of actions may be incomplete depending on the server's authorization mode, and any errors experienced during the evaluation. SelfSubjectRulesReview should be used by UIs to show/hide actions, or to quickly let an end user reason about their permissions. It should NOT Be used by external systems to drive authorization decisions as this raises confused deputy, cache lifetime/revocation, and correctness concerns. SubjectAccessReview, and LocalAccessReview are the correct way to defer authorization decisions to the API server.", 
      "properties": {
        "status": {
          "description": "Status is filled in by the server and indicates the set of actions a user can perform.", 
          "$ref": "#/definitions/io.k8s.api.authorization.v1.SubjectRulesReviewStatus"
        }, 
        "kind": {
          "enum": [
            "SelfSubjectRulesReview"
          ], 
          "type": "string", 
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
        }, 
        "spec": {
          "description": "Spec holds information about the request being evaluated.", 
          "$ref": "#/definitions/io.k8s.api.authorization.v1.SelfSubjectRulesReviewSpec"
        }, 
        "apiVersion": {
          "type": "string", 
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources"
        }, 
        "metadata": {
          "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata", 
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        }
      }
    }, 
    "io.k8s.api.resource.v1beta2.DeviceRequestAllocationResult": {
      "required": [
        "request", 
        "driver", 
        "pool", 
        "device"
      ], 
      "type": "object", 
      "description": "DeviceRequestAllocationResult contains the allocation result for one request.", 
      "properties": {
        "bindingFailureConditions": {
          "items": {
            "type": "string"
          }, 
          "type": "array", 
          "description": "BindingFailureConditions contains a copy of the BindingFailureConditions from the corresponding ResourceSlice at the time of allocation.\n\nThis is an alpha field and requires enabling the DRADeviceBindingConditions and DRAResourceClaimDeviceStatus feature gates.", 
          "x-kubernetes-list-type": "atomic"
        }, 
        "driver": {
          "type": "string", 
          "description": "Driver specifies the name of the DRA driver whose kubelet plugin should be invoked to process the allocation once the claim is needed on a node.\n\nMust be a DNS subdomain and should end with a DNS domain owned by the vendor of the driver."
        }, 
        "request": {
          "type": "string", 
          "description": "Request is the name of the request in the claim which caused this device to be allocated. If it references a subrequest in the firstAvailable list on a DeviceRequest, this field must include both the name of the main request and the subrequest using the format <main request>/<subrequest>.\n\nMultiple devices may have been allocated per request."
        }, 
        "bindingConditions": {
          "items": {
            "type": "string"
          }, 
          "type": "array", 
          "description": "BindingConditions contains a copy of the BindingConditions from the corresponding ResourceSlice at the time of allocation.\n\nThis is an alpha field and requires enabling the DRADeviceBindingConditions and DRAResourceClaimDeviceStatus feature gates.", 
          "x-kubernetes-list-type": "atomic"
        }, 
        "consumedCapacity": {
          "additionalProperties": {
            "$ref": "#/definitions/io.k8s.apimachinery.pkg.api.resource.Quantity"
          }, 
          "type": "object", 
          "description": "ConsumedCapacity tracks the amount of capacity consumed per device as part of the claim request. The consumed amount may differ from the requested amount: it is rounded up to the nearest valid value based on the device\u2019s requestPolicy if applicable (i.e., may not be less than the requested amount).\n\nThe total consumed capacity for each device must not exceed the DeviceCapacity's Value.\n\nThis field is populated only for devices that allow multiple allocations. All capacity entries are included, even if the consumed amount is zero."
        }, 
        "device": {
          "type": "string", 
          "description": "Device references one device instance via its name in the driver's resource pool. It must be a DNS label."
        }, 
        "tolerations": {
          "items": {
            "$ref": "#/definitions/io.k8s.api.resource.v1beta2.DeviceToleration"
          }, 
          "type": "array", 
          "description": "A copy of all tolerations specified in the request at the time when the device got allocated.\n\nThe maximum number of tolerations is 16.\n\nThis is an alpha field and requires enabling the DRADeviceTaints feature gate.", 
          "x-kubernetes-list-type": "atomic"
        }, 
        "adminAccess": {
          "type": "boolean", 
          "description": "AdminAccess indicates that this device was allocated for administrative access. See the corresponding request field for a definition of mode.\n\nThis is an alpha field and requires enabling the DRAAdminAccess feature gate. Admin access is disabled if this field is unset or set to false, otherwise it is enabled."
        }, 
        "pool": {
          "type": "string", 
          "description": "This name together with the driver name and the device name field identify which device was allocated (`<driver name>/<pool name>/<device name>`).\n\nMust not be longer than 253 characters and may contain one or more DNS sub-domains separated by slashes."
        }, 
        "shareID": {
          "type": "string", 
          "description": "ShareID uniquely identifies an individual allocation share of the device, used when the device supports multiple simultaneous allocations. It serves as an additional map key to differentiate concurrent shares of the same device."
        }
      }
    }, 
    "io.k8s.api.node.v1.Scheduling": {
      "type": "object", 
      "description": "Scheduling specifies the scheduling constraints for nodes supporting a RuntimeClass.", 
      "properties": {
        "tolerations": {
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.Toleration"
          }, 
          "type": "array", 
          "description": "tolerations are appended (excluding duplicates) to pods running with this RuntimeClass during admission, effectively unioning the set of nodes tolerated by the pod and the RuntimeClass.", 
          "x-kubernetes-list-type": "atomic"
        }, 
        "nodeSelector": {
          "additionalProperties": {
            "type": "string"
          }, 
          "type": "object", 
          "x-kubernetes-map-type": "atomic", 
          "description": "nodeSelector lists labels that must be present on nodes that support this RuntimeClass. Pods using this RuntimeClass can only be scheduled to a node matched by this selector. The RuntimeClass nodeSelector is merged with a pod's existing nodeSelector. Any conflicts will cause the pod to be rejected in admission."
        }
      }
    }, 
    "io.k8s.api.discovery.v1.EndpointHints": {
      "type": "object", 
      "description": "EndpointHints provides hints describing how an endpoint should be consumed.", 
      "properties": {
        "forNodes": {
          "items": {
            "$ref": "#/definitions/io.k8s.api.discovery.v1.ForNode"
          }, 
          "type": "array", 
          "description": "forNodes indicates the node(s) this endpoint should be consumed by when using topology aware routing. May contain a maximum of 8 entries. This is an Alpha feature and is only used when the PreferSameTrafficDistribution feature gate is enabled.", 
          "x-kubernetes-list-type": "atomic"
        }, 
        "forZones": {
          "items": {
            "$ref": "#/definitions/io.k8s.api.discovery.v1.ForZone"
          }, 
          "type": "array", 
          "description": "forZones indicates the zone(s) this endpoint should be consumed by when using topology aware routing. May contain a maximum of 8 entries.", 
          "x-kubernetes-list-type": "atomic"
        }
      }
    }, 
    "io.k8s.api.resource.v1beta2.DeviceClassList": {
      "type": "object", 
      "required": [
        "items"
      ], 
      "x-kubernetes-group-version-kind": [
        {
          "kind": "DeviceClassList", 
          "version": "v1beta2", 
          "group": "resource.k8s.io"
        }
      ], 
      "description": "DeviceClassList is a collection of classes.", 
      "properties": {
        "items": {
          "items": {
            "$ref": "#/definitions/io.k8s.api.resource.v1beta2.DeviceClass"
          }, 
          "type": "array", 
          "description": "Items is the list of resource classes."
        }, 
        "kind": {
          "enum": [
            "DeviceClassList"
          ], 
          "type": "string", 
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
        }, 
        "apiVersion": {
          "type": "string", 
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources"
        }, 
        "metadata": {
          "description": "Standard list metadata", 
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      }
    }, 
    "io.k8s.api.apps.v1.ReplicaSetSpec": {
      "required": [
        "selector"
      ], 
      "type": "object", 
      "description": "ReplicaSetSpec is the specification of a ReplicaSet.", 
      "properties": {
        "replicas": {
          "type": "integer", 
          "description": "Replicas is the number of desired pods. This is a pointer to distinguish between explicit zero and unspecified. Defaults to 1. More info: https://kubernetes.io/docs/concepts/workloads/controllers/replicaset", 
          "format": "int32"
        }, 
        "minReadySeconds": {
          "type": "integer", 
          "description": "Minimum number of seconds for which a newly created pod should be ready without any of its container crashing, for it to be considered available. Defaults to 0 (pod will be considered available as soon as it is ready)", 
          "format": "int32"
        }, 
        "template": {
          "description": "Template is the object that describes the pod that will be created if insufficient replicas are detected. More info: https://kubernetes.io/docs/concepts/workloads/controllers/replicaset/#pod-template", 
          "$ref": "#/definitions/io.k8s.api.core.v1.PodTemplateSpec"
        }, 
        "selector": {
          "description": "Selector is a label query over pods that should match the replica count. Label keys and values that must match in order to be controlled by this replica set. It must match the pod template's labels. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors", 
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector"
        }
      }
    }, 
    "io.k8s.api.resource.v1alpha3.DeviceSelector": {
      "type": "object", 
      "description": "DeviceSelector must have exactly one field set.", 
      "properties": {
        "cel": {
          "description": "CEL contains a CEL expression for selecting a device.", 
          "$ref": "#/definitions/io.k8s.api.resource.v1alpha3.CELDeviceSelector"
        }
      }
    }, 
    "io.k8s.api.core.v1.Event": {
      "type": "object", 
      "required": [
        "metadata", 
        "involvedObject"
      ], 
      "x-kubernetes-group-version-kind": [
        {
          "kind": "Event", 
          "version": "v1", 
          "group": ""
        }
      ], 
      "description": "Event is a report of an event somewhere in the cluster.  Events have a limited retention time and triggers and messages may evolve with time.  Event consumers should not rely on the timing of an event with a given Reason reflecting a consistent underlying trigger, or the continued existence of events with that Reason.  Events should be treated as informative, best-effort, supplemental data.", 
      "properties": {
        "series": {
          "description": "Data about the Event series this event represents or nil if it's a singleton Event.", 
          "$ref": "#/definitions/io.k8s.api.core.v1.EventSeries"
        }, 
        "kind": {
          "enum": [
            "Event"
          ], 
          "type": "string", 
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
        }, 
        "related": {
          "description": "Optional secondary object for more complex actions.", 
          "$ref": "#/definitions/io.k8s.api.core.v1.ObjectReference"
        }, 
        "lastTimestamp": {
          "description": "The time at which the most recent occurrence of this event was recorded.", 
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
        }, 
        "reason": {
          "type": "string", 
          "description": "This should be a short, machine understandable string that gives the reason for the transition into the object's current status."
        }, 
        "reportingComponent": {
          "type": "string", 
          "description": "Name of the controller that emitted this Event, e.g. `kubernetes.io/kubelet`."
        }, 
        "involvedObject": {
          "description": "The object that this event is about.", 
          "$ref": "#/definitions/io.k8s.api.core.v1.ObjectReference"
        }, 
        "message": {
          "type": "string", 
          "description": "A human-readable description of the status of this operation."
        }, 
        "count": {
          "type": "integer", 
          "description": "The number of times this event has occurred.", 
          "format": "int32"
        }, 
        "eventTime": {
          "description": "Time when this Event was first observed.", 
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.MicroTime"
        }, 
        "reportingInstance": {
          "type": "string", 
          "description": "ID of the controller instance, e.g. `kubelet-xyzf`."
        }, 
        "firstTimestamp": {
          "description": "The time at which the event was first recorded. (Time of server receipt is in TypeMeta.)", 
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
        }, 
        "apiVersion": {
          "type": "string", 
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources"
        }, 
        "source": {
          "description": "The component reporting this event. Should be a short machine understandable string.", 
          "$ref": "#/definitions/io.k8s.api.core.v1.EventSource"
        }, 
        "action": {
          "type": "string", 
          "description": "What action was taken/failed regarding to the Regarding object."
        }, 
        "type": {
          "type": "string", 
          "description": "Type of this event (Normal, Warning), new types could be added in the future"
        }, 
        "metadata": {
          "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata", 
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        }
      }
    }, 
    "io.k8s.api.core.v1.ResourceQuotaSpec": {
      "type": "object", 
      "description": "ResourceQuotaSpec defines the desired hard limits to enforce for Quota.", 
      "properties": {
        "scopes": {
          "items": {
            "type": "string"
          }, 
          "type": "array", 
          "description": "A collection of filters that must match each object tracked by a quota. If not specified, the quota matches all objects.", 
          "x-kubernetes-list-type": "atomic"
        }, 
        "hard": {
          "additionalProperties": {
            "$ref": "#/definitions/io.k8s.apimachinery.pkg.api.resource.Quantity"
          }, 
          "type": "object", 
          "description": "hard is the set of desired hard limits for each named resource. More info: https://kubernetes.io/docs/concepts/policy/resource-quotas/"
        }, 
        "scopeSelector": {
          "description": "scopeSelector is also a collection of filters like scopes that must match each object tracked by a quota but expressed using ScopeSelectorOperator in combination with possible values. For a resource to match, both scopes AND scopeSelector (if specified in spec), must be matched.", 
          "$ref": "#/definitions/io.k8s.api.core.v1.ScopeSelector"
        }
      }
    }, 
    "io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.CustomResourceDefinitionSpec": {
      "required": [
        "group", 
        "names", 
        "scope", 
        "versions"
      ], 
      "type": "object", 
      "description": "CustomResourceDefinitionSpec describes how a user wants their resource to appear", 
      "properties": {
        "preserveUnknownFields": {
          "type": "boolean", 
          "description": "preserveUnknownFields indicates that object fields which are not specified in the OpenAPI schema should be preserved when persisting to storage. apiVersion, kind, metadata and known fields inside metadata are always preserved. This field is deprecated in favor of setting `x-preserve-unknown-fields` to true in `spec.versions[*].schema.openAPIV3Schema`. See https://kubernetes.io/docs/tasks/extend-kubernetes/custom-resources/custom-resource-definitions/#field-pruning for details."
        }, 
        "conversion": {
          "description": "conversion defines conversion settings for the CRD.", 
          "$ref": "#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.CustomResourceConversion"
        }, 
        "group": {
          "type": "string", 
          "description": "group is the API group of the defined custom resource. The custom resources are served under `/apis/<group>/...`. Must match the name of the CustomResourceDefinition (in the form `<names.plural>.<group>`)."
        }, 
        "names": {
          "description": "names specify the resource and kind names for the custom resource.", 
          "$ref": "#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.CustomResourceDefinitionNames"
        }, 
        "versions": {
          "items": {
            "$ref": "#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.CustomResourceDefinitionVersion"
          }, 
          "type": "array", 
          "description": "versions is the list of all API versions of the defined custom resource. Version names are used to compute the order in which served versions are listed in API discovery. If the version string is \"kube-like\", it will sort above non \"kube-like\" version strings, which are ordered lexicographically. \"Kube-like\" versions start with a \"v\", then are followed by a number (the major version), then optionally the string \"alpha\" or \"beta\" and another number (the minor version). These are sorted first by GA > beta > alpha (where GA is a version with no suffix such as beta or alpha), and then by comparing major version, then minor version. An example sorted list of versions: v10, v2, v1, v11beta2, v10beta3, v3beta1, v12alpha1, v11alpha2, foo1, foo10.", 
          "x-kubernetes-list-type": "atomic"
        }, 
        "scope": {
          "type": "string", 
          "description": "scope indicates whether the defined custom resource is cluster- or namespace-scoped. Allowed values are `Cluster` and `Namespaced`."
        }
      }
    }, 
    "io.k8s.api.resource.v1.DeviceAllocationConfiguration": {
      "required": [
        "source"
      ], 
      "type": "object", 
      "description": "DeviceAllocationConfiguration gets embedded in an AllocationResult.", 
      "properties": {
        "source": {
          "type": "string", 
          "description": "Source records whether the configuration comes from a class and thus is not something that a normal user would have been able to set or from a claim."
        }, 
        "requests": {
          "items": {
            "type": "string"
          }, 
          "type": "array", 
          "description": "Requests lists the names of requests where the configuration applies. If empty, its applies to all requests.\n\nReferences to subrequests must include the name of the main request and may include the subrequest using the format <main request>[/<subrequest>]. If just the main request is given, the configuration applies to all subrequests.", 
          "x-kubernetes-list-type": "atomic"
        }, 
        "opaque": {
          "description": "Opaque provides driver-specific configuration parameters.", 
          "$ref": "#/definitions/io.k8s.api.resource.v1.OpaqueDeviceConfiguration"
        }
      }
    }, 
    "io.k8s.api.resource.v1beta2.ResourcePool": {
      "required": [
        "name", 
        "generation", 
        "resourceSliceCount"
      ], 
      "type": "object", 
      "description": "ResourcePool describes the pool that ResourceSlices belong to.", 
      "properties": {
        "generation": {
          "type": "integer", 
          "description": "Generation tracks the change in a pool over time. Whenever a driver changes something about one or more of the resources in a pool, it must change the generation in all ResourceSlices which are part of that pool. Consumers of ResourceSlices should only consider resources from the pool with the highest generation number. The generation may be reset by drivers, which should be fine for consumers, assuming that all ResourceSlices in a pool are updated to match or deleted.\n\nCombined with ResourceSliceCount, this mechanism enables consumers to detect pools which are comprised of multiple ResourceSlices and are in an incomplete state.", 
          "format": "int64"
        }, 
        "name": {
          "type": "string", 
          "description": "Name is used to identify the pool. For node-local devices, this is often the node name, but this is not required.\n\nIt must not be longer than 253 characters and must consist of one or more DNS sub-domains separated by slashes. This field is immutable."
        }, 
        "resourceSliceCount": {
          "type": "integer", 
          "description": "ResourceSliceCount is the total number of ResourceSlices in the pool at this generation number. Must be greater than zero.\n\nConsumers can use this to check whether they have seen all ResourceSlices belonging to the same pool.", 
          "format": "int64"
        }
      }
    }, 
    "io.k8s.api.core.v1.QuobyteVolumeSource": {
      "required": [
        "registry", 
        "volume"
      ], 
      "type": "object", 
      "description": "Represents a Quobyte mount that lasts the lifetime of a pod. Quobyte volumes do not support ownership management or SELinux relabeling.", 
      "properties": {
        "volume": {
          "type": "string", 
          "description": "volume is a string that references an already created Quobyte volume by name."
        }, 
        "readOnly": {
          "type": "boolean", 
          "description": "readOnly here will force the Quobyte volume to be mounted with read-only permissions. Defaults to false."
        }, 
        "group": {
          "type": "string", 
          "description": "group to map volume access to Default is no group"
        }, 
        "registry": {
          "type": "string", 
          "description": "registry represents a single or multiple Quobyte Registry services specified as a string as host:port pair (multiple entries are separated with commas) which acts as the central registry for volumes"
        }, 
        "tenant": {
          "type": "string", 
          "description": "tenant owning the given Quobyte volume in the Backend Used with dynamically provisioned Quobyte volumes, value is set by the plugin"
        }, 
        "user": {
          "type": "string", 
          "description": "user to map volume access to Defaults to serivceaccount user"
        }
      }
    }, 
    "io.k8s.api.admissionregistration.v1beta1.MutatingAdmissionPolicyBindingList": {
      "type": "object", 
      "required": [
        "items"
      ], 
      "x-kubernetes-group-version-kind": [
        {
          "kind": "MutatingAdmissionPolicyBindingList", 
          "version": "v1beta1", 
          "group": "admissionregistration.k8s.io"
        }
      ], 
      "description": "MutatingAdmissionPolicyBindingList is a list of MutatingAdmissionPolicyBinding.", 
      "properties": {
        "items": {
          "items": {
            "$ref": "#/definitions/io.k8s.api.admissionregistration.v1beta1.MutatingAdmissionPolicyBinding"
          }, 
          "type": "array", 
          "description": "List of PolicyBinding."
        }, 
        "kind": {
          "enum": [
            "MutatingAdmissionPolicyBindingList"
          ], 
          "type": "string", 
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
        }, 
        "apiVersion": {
          "type": "string", 
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources"
        }, 
        "metadata": {
          "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds", 
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      }
    }, 
    "io.k8s.api.core.v1.ComponentCondition": {
      "required": [
        "type", 
        "status"
      ], 
      "type": "object", 
      "description": "Information about the condition of a component.", 
      "properties": {
        "status": {
          "type": "string", 
          "description": "Status of the condition for a component. Valid values for \"Healthy\": \"True\", \"False\", or \"Unknown\"."
        }, 
        "message": {
          "type": "string", 
          "description": "Message about the condition for a component. For example, information about a health check."
        }, 
        "type": {
          "type": "string", 
          "description": "Type of condition for a component. Valid value: \"Healthy\""
        }, 
        "error": {
          "type": "string", 
          "description": "Condition error code for a component. For example, a health check error code."
        }
      }
    }, 
    "io.k8s.api.certificates.v1.CertificateSigningRequestCondition": {
      "required": [
        "type", 
        "status"
      ], 
      "type": "object", 
      "description": "CertificateSigningRequestCondition describes a condition of a CertificateSigningRequest object", 
      "properties": {
        "status": {
          "type": "string", 
          "description": "status of the condition, one of True, False, Unknown. Approved, Denied, and Failed conditions may not be \"False\" or \"Unknown\"."
        }, 
        "reason": {
          "type": "string", 
          "description": "reason indicates a brief reason for the request state"
        }, 
        "lastUpdateTime": {
          "description": "lastUpdateTime is the time of the last update to this condition", 
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
        }, 
        "type": {
          "type": "string", 
          "description": "type of the condition. Known conditions are \"Approved\", \"Denied\", and \"Failed\".\n\nAn \"Approved\" condition is added via the /approval subresource, indicating the request was approved and should be issued by the signer.\n\nA \"Denied\" condition is added via the /approval subresource, indicating the request was denied and should not be issued by the signer.\n\nA \"Failed\" condition is added via the /status subresource, indicating the signer failed to issue the certificate.\n\nApproved and Denied conditions are mutually exclusive. Approved, Denied, and Failed conditions cannot be removed once added.\n\nOnly one condition of a given type is allowed."
        }, 
        "message": {
          "type": "string", 
          "description": "message contains a human readable message with details about the request state"
        }, 
        "lastTransitionTime": {
          "description": "lastTransitionTime is the time the condition last transitioned from one status to another. If unset, when a new condition type is added or an existing condition's status is changed, the server defaults this to the current time.", 
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
        }
      }
    }, 
    "io.k8s.api.coordination.v1beta1.LeaseCandidateList": {
      "type": "object", 
      "required": [
        "items"
      ], 
      "x-kubernetes-group-version-kind": [
        {
          "kind": "LeaseCandidateList", 
          "version": "v1beta1", 
          "group": "coordination.k8s.io"
        }
      ], 
      "description": "LeaseCandidateList is a list of Lease objects.", 
      "properties": {
        "items": {
          "items": {
            "$ref": "#/definitions/io.k8s.api.coordination.v1beta1.LeaseCandidate"
          }, 
          "type": "array", 
          "description": "items is a list of schema objects."
        }, 
        "kind": {
          "enum": [
            "LeaseCandidateList"
          ], 
          "type": "string", 
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
        }, 
        "apiVersion": {
          "type": "string", 
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources"
        }, 
        "metadata": {
          "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata", 
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      }
    }, 
    "io.k8s.api.core.v1.ReplicationControllerSpec": {
      "type": "object", 
      "description": "ReplicationControllerSpec is the specification of a replication controller.", 
      "properties": {
        "replicas": {
          "type": "integer", 
          "description": "Replicas is the number of desired replicas. This is a pointer to distinguish between explicit zero and unspecified. Defaults to 1. More info: https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller#what-is-a-replicationcontroller", 
          "format": "int32"
        }, 
        "minReadySeconds": {
          "type": "integer", 
          "description": "Minimum number of seconds for which a newly created pod should be ready without any of its container crashing, for it to be considered available. Defaults to 0 (pod will be considered available as soon as it is ready)", 
          "format": "int32"
        }, 
        "template": {
          "description": "Template is the object that describes the pod that will be created if insufficient replicas are detected. This takes precedence over a TemplateRef. The only allowed template.spec.restartPolicy value is \"Always\". More info: https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller#pod-template", 
          "$ref": "#/definitions/io.k8s.api.core.v1.PodTemplateSpec"
        }, 
        "selector": {
          "additionalProperties": {
            "type": "string"
          }, 
          "type": "object", 
          "x-kubernetes-map-type": "atomic", 
          "description": "Selector is a label query over pods that should match the Replicas count. If Selector is empty, it is defaulted to the labels present on the Pod template. Label keys and values that must match in order to be controlled by this replication controller, if empty defaulted to labels on Pod template. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors"
        }
      }
    }, 
    "io.k8s.api.core.v1.ComponentStatusList": {
      "type": "object", 
      "required": [
        "items"
      ], 
      "x-kubernetes-group-version-kind": [
        {
          "kind": "ComponentStatusList", 
          "version": "v1", 
          "group": ""
        }
      ], 
      "description": "Status of all the conditions for the component as a list of ComponentStatus objects. Deprecated: This API is deprecated in v1.19+", 
      "properties": {
        "items": {
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.ComponentStatus"
          }, 
          "type": "array", 
          "description": "List of ComponentStatus objects."
        }, 
        "kind": {
          "enum": [
            "ComponentStatusList"
          ], 
          "type": "string", 
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
        }, 
        "apiVersion": {
          "type": "string", 
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources"
        }, 
        "metadata": {
          "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds", 
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      }
    }, 
    "io.k8s.api.apps.v1.DaemonSet": {
      "type": "object", 
      "x-kubernetes-group-version-kind": [
        {
          "kind": "DaemonSet", 
          "version": "v1", 
          "group": "apps"
        }
      ], 
      "description": "DaemonSet represents the configuration of a daemon set.", 
      "properties": {
        "status": {
          "description": "The current status of this daemon set. This data may be out of date by some window of time. Populated by the system. Read-only. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status", 
          "$ref": "#/definitions/io.k8s.api.apps.v1.DaemonSetStatus"
        }, 
        "kind": {
          "enum": [
            "DaemonSet"
          ], 
          "type": "string", 
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
        }, 
        "spec": {
          "description": "The desired behavior of this daemon set. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status", 
          "$ref": "#/definitions/io.k8s.api.apps.v1.DaemonSetSpec"
        }, 
        "apiVersion": {
          "type": "string", 
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources"
        }, 
        "metadata": {
          "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata", 
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        }
      }
    }, 
    "io.k8s.api.admissionregistration.v1alpha1.MutatingAdmissionPolicy": {
      "type": "object", 
      "x-kubernetes-group-version-kind": [
        {
          "kind": "MutatingAdmissionPolicy", 
          "version": "v1alpha1", 
          "group": "admissionregistration.k8s.io"
        }
      ], 
      "description": "MutatingAdmissionPolicy describes the definition of an admission mutation policy that mutates the object coming into admission chain.", 
      "properties": {
        "kind": {
          "enum": [
            "MutatingAdmissionPolicy"
          ], 
          "type": "string", 
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
        }, 
        "spec": {
          "description": "Specification of the desired behavior of the MutatingAdmissionPolicy.", 
          "$ref": "#/definitions/io.k8s.api.admissionregistration.v1alpha1.MutatingAdmissionPolicySpec"
        }, 
        "apiVersion": {
          "type": "string", 
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources"
        }, 
        "metadata": {
          "description": "Standard object metadata; More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata.", 
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        }
      }
    }, 
    "io.k8s.api.storage.v1.VolumeAttachmentSpec": {
      "required": [
        "attacher", 
        "source", 
        "nodeName"
      ], 
      "type": "object", 
      "description": "VolumeAttachmentSpec is the specification of a VolumeAttachment request.", 
      "properties": {
        "source": {
          "description": "source represents the volume that should be attached.", 
          "$ref": "#/definitions/io.k8s.api.storage.v1.VolumeAttachmentSource"
        }, 
        "attacher": {
          "type": "string", 
          "description": "attacher indicates the name of the volume driver that MUST handle this request. This is the name returned by GetPluginName()."
        }, 
        "nodeName": {
          "type": "string", 
          "description": "nodeName represents the node that the volume should be attached to."
        }
      }
    }, 
    "io.k8s.api.autoscaling.v2.MetricStatus": {
      "required": [
        "type"
      ], 
      "type": "object", 
      "description": "MetricStatus describes the last-read state of a single metric.", 
      "properties": {
        "containerResource": {
          "description": "container resource refers to a resource metric (such as those specified in requests and limits) known to Kubernetes describing a single container in each pod in the current scale target (e.g. CPU or memory). Such metrics are built in to Kubernetes, and have special scaling options on top of those available to normal per-pod metrics using the \"pods\" source.", 
          "$ref": "#/definitions/io.k8s.api.autoscaling.v2.ContainerResourceMetricStatus"
        }, 
        "resource": {
          "description": "resource refers to a resource metric (such as those specified in requests and limits) known to Kubernetes describing each pod in the current scale target (e.g. CPU or memory). Such metrics are built in to Kubernetes, and have special scaling options on top of those available to normal per-pod metrics using the \"pods\" source.", 
          "$ref": "#/definitions/io.k8s.api.autoscaling.v2.ResourceMetricStatus"
        }, 
        "external": {
          "description": "external refers to a global metric that is not associated with any Kubernetes object. It allows autoscaling based on information coming from components running outside of cluster (for example length of queue in cloud messaging service, or QPS from loadbalancer running outside of cluster).", 
          "$ref": "#/definitions/io.k8s.api.autoscaling.v2.ExternalMetricStatus"
        }, 
        "pods": {
          "description": "pods refers to a metric describing each pod in the current scale target (for example, transactions-processed-per-second).  The values will be averaged together before being compared to the target value.", 
          "$ref": "#/definitions/io.k8s.api.autoscaling.v2.PodsMetricStatus"
        }, 
        "object": {
          "description": "object refers to a metric describing a single kubernetes object (for example, hits-per-second on an Ingress object).", 
          "$ref": "#/definitions/io.k8s.api.autoscaling.v2.ObjectMetricStatus"
        }, 
        "type": {
          "type": "string", 
          "description": "type is the type of metric source.  It will be one of \"ContainerResource\", \"External\", \"Object\", \"Pods\" or \"Resource\", each corresponds to a matching field in the object."
        }
      }
    }, 
    "io.k8s.api.autoscaling.v2.ContainerResourceMetricSource": {
      "required": [
        "name", 
        "target", 
        "container"
      ], 
      "type": "object", 
      "description": "ContainerResourceMetricSource indicates how to scale on a resource metric known to Kubernetes, as specified in requests and limits, describing each pod in the current scale target (e.g. CPU or memory).  The values will be averaged together before being compared to the target.  Such metrics are built in to Kubernetes, and have special scaling options on top of those available to normal per-pod metrics using the \"pods\" source.  Only one \"target\" type should be set.", 
      "properties": {
        "container": {
          "type": "string", 
          "description": "container is the name of the container in the pods of the scaling target"
        }, 
        "name": {
          "type": "string", 
          "description": "name is the name of the resource in question."
        }, 
        "target": {
          "description": "target specifies the target value for the given metric", 
          "$ref": "#/definitions/io.k8s.api.autoscaling.v2.MetricTarget"
        }
      }
    }, 
    "io.k8s.api.core.v1.PersistentVolumeClaimSpec": {
      "type": "object", 
      "description": "PersistentVolumeClaimSpec describes the common attributes of storage devices and allows a Source for provider-specific attributes", 
      "properties": {
        "storageClassName": {
          "type": "string", 
          "description": "storageClassName is the name of the StorageClass required by the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1"
        }, 
        "volumeMode": {
          "type": "string", 
          "description": "volumeMode defines what type of volume is required by the claim. Value of Filesystem is implied when not included in claim spec."
        }, 
        "selector": {
          "description": "selector is a label query over volumes to consider for binding.", 
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector"
        }, 
        "accessModes": {
          "items": {
            "type": "string"
          }, 
          "type": "array", 
          "description": "accessModes contains the desired access modes the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1", 
          "x-kubernetes-list-type": "atomic"
        }, 
        "dataSourceRef": {
          "description": "dataSourceRef specifies the object from which to populate the volume with data, if a non-empty volume is desired. This may be any object from a non-empty API group (non core object) or a PersistentVolumeClaim object. When this field is specified, volume binding will only succeed if the type of the specified object matches some installed volume populator or dynamic provisioner. This field will replace the functionality of the dataSource field and as such if both fields are non-empty, they must have the same value. For backwards compatibility, when namespace isn't specified in dataSourceRef, both fields (dataSource and dataSourceRef) will be set to the same value automatically if one of them is empty and the other is non-empty. When namespace is specified in dataSourceRef, dataSource isn't set to the same value and must be empty. There are three important differences between dataSource and dataSourceRef: * While dataSource only allows two specific types of objects, dataSourceRef\n  allows any non-core object, as well as PersistentVolumeClaim objects.\n* While dataSource ignores disallowed values (dropping them), dataSourceRef\n  preserves all values, and generates an error if a disallowed value is\n  specified.\n* While dataSource only allows local objects, dataSourceRef allows objects\n  in any namespaces.\n(Beta) Using this field requires the AnyVolumeDataSource feature gate to be enabled. (Alpha) Using the namespace field of dataSourceRef requires the CrossNamespaceVolumeDataSource feature gate to be enabled.", 
          "$ref": "#/definitions/io.k8s.api.core.v1.TypedObjectReference"
        }, 
        "dataSource": {
          "description": "dataSource field can be used to specify either: * An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot) * An existing PVC (PersistentVolumeClaim) If the provisioner or an external controller can support the specified data source, it will create a new volume based on the contents of the specified data source. When the AnyVolumeDataSource feature gate is enabled, dataSource contents will be copied to dataSourceRef, and dataSourceRef contents will be copied to dataSource when dataSourceRef.namespace is not specified. If the namespace is specified, then dataSourceRef will not be copied to dataSource.", 
          "$ref": "#/definitions/io.k8s.api.core.v1.TypedLocalObjectReference"
        }, 
        "volumeName": {
          "type": "string", 
          "description": "volumeName is the binding reference to the PersistentVolume backing this claim."
        }, 
        "resources": {
          "description": "resources represents the minimum resources the volume should have. If RecoverVolumeExpansionFailure feature is enabled users are allowed to specify resource requirements that are lower than previous value but must still be higher than capacity recorded in the status field of the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources", 
          "$ref": "#/definitions/io.k8s.api.core.v1.VolumeResourceRequirements"
        }, 
        "volumeAttributesClassName": {
          "type": "string", 
          "description": "volumeAttributesClassName may be used to set the VolumeAttributesClass used by this claim. If specified, the CSI driver will create or update the volume with the attributes defined in the corresponding VolumeAttributesClass. This has a different purpose than storageClassName, it can be changed after the claim is created. An empty string or nil value indicates that no VolumeAttributesClass will be applied to the claim. If the claim enters an Infeasible error state, this field can be reset to its previous value (including nil) to cancel the modification. If the resource referred to by volumeAttributesClass does not exist, this PersistentVolumeClaim will be set to a Pending state, as reflected by the modifyVolumeStatus field, until such as a resource exists. More info: https://kubernetes.io/docs/concepts/storage/volume-attributes-classes/"
        }
      }
    }, 
    "io.k8s.api.core.v1.LinuxContainerUser": {
      "required": [
        "uid", 
        "gid"
      ], 
      "type": "object", 
      "description": "LinuxContainerUser represents user identity information in Linux containers", 
      "properties": {
        "supplementalGroups": {
          "items": {
            "type": "integer", 
            "format": "int64"
          }, 
          "type": "array", 
          "description": "SupplementalGroups are the supplemental groups initially attached to the first process in the container", 
          "x-kubernetes-list-type": "atomic"
        }, 
        "gid": {
          "type": "integer", 
          "description": "GID is the primary gid initially attached to the first process in the container", 
          "format": "int64"
        }, 
        "uid": {
          "type": "integer", 
          "description": "UID is the primary uid initially attached to the first process in the container", 
          "format": "int64"
        }
      }
    }, 
    "io.k8s.api.resource.v1.DeviceClass": {
      "type": "object", 
      "required": [
        "spec"
      ], 
      "x-kubernetes-group-version-kind": [
        {
          "kind": "DeviceClass", 
          "version": "v1", 
          "group": "resource.k8s.io"
        }
      ], 
      "description": "DeviceClass is a vendor- or admin-provided resource that contains device configuration and selectors. It can be referenced in the device requests of a claim to apply these presets. Cluster scoped.\n\nThis is an alpha type and requires enabling the DynamicResourceAllocation feature gate.", 
      "properties": {
        "kind": {
          "enum": [
            "DeviceClass"
          ], 
          "type": "string", 
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
        }, 
        "spec": {
          "description": "Spec defines what can be allocated and how to configure it.\n\nThis is mutable. Consumers have to be prepared for classes changing at any time, either because they get updated or replaced. Claim allocations are done once based on whatever was set in classes at the time of allocation.\n\nChanging the spec automatically increments the metadata.generation number.", 
          "$ref": "#/definitions/io.k8s.api.resource.v1.DeviceClassSpec"
        }, 
        "apiVersion": {
          "type": "string", 
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources"
        }, 
        "metadata": {
          "description": "Standard object metadata", 
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        }
      }
    }, 
    "io.k8s.api.resource.v1.AllocatedDeviceStatus": {
      "required": [
        "driver", 
        "pool", 
        "device"
      ], 
      "type": "object", 
      "description": "AllocatedDeviceStatus contains the status of an allocated device, if the driver chooses to report it. This may include driver-specific information.\n\nThe combination of Driver, Pool, Device, and ShareID must match the corresponding key in Status.Allocation.Devices.", 
      "properties": {
        "shareID": {
          "type": "string", 
          "description": "ShareID uniquely identifies an individual allocation share of the device."
        }, 
        "networkData": {
          "description": "NetworkData contains network-related information specific to the device.", 
          "$ref": "#/definitions/io.k8s.api.resource.v1.NetworkDeviceData"
        }, 
        "device": {
          "type": "string", 
          "description": "Device references one device instance via its name in the driver's resource pool. It must be a DNS label."
        }, 
        "driver": {
          "type": "string", 
          "description": "Driver specifies the name of the DRA driver whose kubelet plugin should be invoked to process the allocation once the claim is needed on a node.\n\nMust be a DNS subdomain and should end with a DNS domain owned by the vendor of the driver."
        }, 
        "conditions": {
          "items": {
            "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Condition"
          }, 
          "type": "array", 
          "description": "Conditions contains the latest observation of the device's state. If the device has been configured according to the class and claim config references, the `Ready` condition should be True.\n\nMust not contain more than 8 entries.", 
          "x-kubernetes-list-map-keys": [
            "type"
          ], 
          "x-kubernetes-list-type": "map"
        }, 
        "pool": {
          "type": "string", 
          "description": "This name together with the driver name and the device name field identify which device was allocated (`<driver name>/<pool name>/<device name>`).\n\nMust not be longer than 253 characters and may contain one or more DNS sub-domains separated by slashes."
        }, 
        "data": {
          "description": "Data contains arbitrary driver-specific data.\n\nThe length of the raw data must be smaller or equal to 10 Ki.", 
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.runtime.RawExtension"
        }
      }
    }, 
    "io.k8s.api.apps.v1.StatefulSet": {
      "type": "object", 
      "x-kubernetes-group-version-kind": [
        {
          "kind": "StatefulSet", 
          "version": "v1", 
          "group": "apps"
        }
      ], 
      "description": "StatefulSet represents a set of pods with consistent identities. Identities are defined as:\n  - Network: A single stable DNS and hostname.\n  - Storage: As many VolumeClaims as requested.\n\nThe StatefulSet guarantees that a given network identity will always map to the same storage identity.", 
      "properties": {
        "status": {
          "description": "Status is the current status of Pods in this StatefulSet. This data may be out of date by some window of time.", 
          "$ref": "#/definitions/io.k8s.api.apps.v1.StatefulSetStatus"
        }, 
        "kind": {
          "enum": [
            "StatefulSet"
          ], 
          "type": "string", 
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
        }, 
        "spec": {
          "description": "Spec defines the desired identities of pods in this set.", 
          "$ref": "#/definitions/io.k8s.api.apps.v1.StatefulSetSpec"
        }, 
        "apiVersion": {
          "type": "string", 
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources"
        }, 
        "metadata": {
          "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata", 
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        }
      }
    }, 
    "io.k8s.api.core.v1.Pod": {
      "type": "object", 
      "x-kubernetes-group-version-kind": [
        {
          "kind": "Pod", 
          "version": "v1", 
          "group": ""
        }
      ], 
      "description": "Pod is a collection of containers that can run on a host. This resource is created by clients and scheduled onto hosts.", 
      "properties": {
        "status": {
          "description": "Most recently observed status of the pod. This data may not be up to date. Populated by the system. Read-only. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status", 
          "$ref": "#/definitions/io.k8s.api.core.v1.PodStatus"
        }, 
        "kind": {
          "enum": [
            "Pod"
          ], 
          "type": "string", 
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
        }, 
        "spec": {
          "description": "Specification of the desired behavior of the pod. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status", 
          "$ref": "#/definitions/io.k8s.api.core.v1.PodSpec"
        }, 
        "apiVersion": {
          "type": "string", 
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources"
        }, 
        "metadata": {
          "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata", 
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        }
      }
    }, 
    "io.k8s.api.admissionregistration.v1beta1.NamedRuleWithOperations": {
      "type": "object", 
      "x-kubernetes-map-type": "atomic", 
      "description": "NamedRuleWithOperations is a tuple of Operations and Resources with ResourceNames.", 
      "properties": {
        "operations": {
          "items": {
            "type": "string"
          }, 
          "type": "array", 
          "description": "Operations is the operations the admission hook cares about - CREATE, UPDATE, DELETE, CONNECT or * for all of those operations and any future admission operations that are added. If '*' is present, the length of the slice must be one. Required.", 
          "x-kubernetes-list-type": "atomic"
        }, 
        "resourceNames": {
          "items": {
            "type": "string"
          }, 
          "type": "array", 
          "description": "ResourceNames is an optional white list of names that the rule applies to.  An empty set means that everything is allowed.", 
          "x-kubernetes-list-type": "atomic"
        }, 
        "apiVersions": {
          "items": {
            "type": "string"
          }, 
          "type": "array", 
          "description": "APIVersions is the API versions the resources belong to. '*' is all versions. If '*' is present, the length of the slice must be one. Required.", 
          "x-kubernetes-list-type": "atomic"
        }, 
        "scope": {
          "type": "string", 
          "description": "scope specifies the scope of this rule. Valid values are \"Cluster\", \"Namespaced\", and \"*\" \"Cluster\" means that only cluster-scoped resources will match this rule. Namespace API objects are cluster-scoped. \"Namespaced\" means that only namespaced resources will match this rule. \"*\" means that there are no scope restrictions. Subresources match the scope of their parent resource. Default is \"*\"."
        }, 
        "apiGroups": {
          "items": {
            "type": "string"
          }, 
          "type": "array", 
          "description": "APIGroups is the API groups the resources belong to. '*' is all groups. If '*' is present, the length of the slice must be one. Required.", 
          "x-kubernetes-list-type": "atomic"
        }, 
        "resources": {
          "items": {
            "type": "string"
          }, 
          "type": "array", 
          "description": "Resources is a list of resources this rule applies to.\n\nFor example: 'pods' means pods. 'pods/log' means the log subresource of pods. '*' means all resources, but not subresources. 'pods/*' means all subresources of pods. '*/scale' means all scale subresources. '*/*' means all resources and their subresources.\n\nIf wildcard is present, the validation rule will ensure resources do not overlap with each other.\n\nDepending on the enclosing object, subresources might not be allowed. Required.", 
          "x-kubernetes-list-type": "atomic"
        }
      }
    }, 
    "io.k8s.api.core.v1.SecretKeySelector": {
      "type": "object", 
      "required": [
        "key"
      ], 
      "x-kubernetes-map-type": "atomic", 
      "description": "SecretKeySelector selects a key of a Secret.", 
      "properties": {
        "optional": {
          "type": "boolean", 
          "description": "Specify whether the Secret or its key must be defined"
        }, 
        "name": {
          "type": "string", 
          "description": "Name of the referent. This field is effectively required, but due to backwards compatibility is allowed to be empty. Instances of this type with an empty value here are almost certainly wrong. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"
        }, 
        "key": {
          "type": "string", 
          "description": "The key of the secret to select from.  Must be a valid secret key."
        }
      }
    }, 
    "io.k8s.api.policy.v1.PodDisruptionBudgetSpec": {
      "type": "object", 
      "description": "PodDisruptionBudgetSpec is a description of a PodDisruptionBudget.", 
      "properties": {
        "minAvailable": {
          "description": "An eviction is allowed if at least \"minAvailable\" pods selected by \"selector\" will still be available after the eviction, i.e. even in the absence of the evicted pod.  So for example you can prevent all voluntary evictions by specifying \"100%\".", 
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.util.intstr.IntOrString"
        }, 
        "maxUnavailable": {
          "description": "An eviction is allowed if at most \"maxUnavailable\" pods selected by \"selector\" are unavailable after the eviction, i.e. even in absence of the evicted pod. For example, one can prevent all voluntary evictions by specifying 0. This is a mutually exclusive setting with \"minAvailable\".", 
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.util.intstr.IntOrString"
        }, 
        "unhealthyPodEvictionPolicy": {
          "type": "string", 
          "description": "UnhealthyPodEvictionPolicy defines the criteria for when unhealthy pods should be considered for eviction. Current implementation considers healthy pods, as pods that have status.conditions item with type=\"Ready\",status=\"True\".\n\nValid policies are IfHealthyBudget and AlwaysAllow. If no policy is specified, the default behavior will be used, which corresponds to the IfHealthyBudget policy.\n\nIfHealthyBudget policy means that running pods (status.phase=\"Running\"), but not yet healthy can be evicted only if the guarded application is not disrupted (status.currentHealthy is at least equal to status.desiredHealthy). Healthy pods will be subject to the PDB for eviction.\n\nAlwaysAllow policy means that all running pods (status.phase=\"Running\"), but not yet healthy are considered disrupted and can be evicted regardless of whether the criteria in a PDB is met. This means perspective running pods of a disrupted application might not get a chance to become healthy. Healthy pods will be subject to the PDB for eviction.\n\nAdditional policies may be added in the future. Clients making eviction decisions should disallow eviction of unhealthy pods if they encounter an unrecognized policy in this field."
        }, 
        "selector": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector", 
          "x-kubernetes-patch-strategy": "replace", 
          "description": "Label query over pods whose evictions are managed by the disruption budget. A null selector will match no pods, while an empty ({}) selector will select all pods within the namespace."
        }
      }
    }, 
    "io.k8s.apimachinery.pkg.apis.meta.v1.OwnerReference": {
      "type": "object", 
      "required": [
        "apiVersion", 
        "kind", 
        "name", 
        "uid"
      ], 
      "x-kubernetes-map-type": "atomic", 
      "description": "OwnerReference contains enough information to let you identify an owning object. An owning object must be in the same namespace as the dependent, or be cluster-scoped, so there is no namespace field.", 
      "properties": {
        "kind": {
          "type": "string", 
          "description": "Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
        }, 
        "blockOwnerDeletion": {
          "type": "boolean", 
          "description": "If true, AND if the owner has the \"foregroundDeletion\" finalizer, then the owner cannot be deleted from the key-value store until this reference is removed. See https://kubernetes.io/docs/concepts/architecture/garbage-collection/#foreground-deletion for how the garbage collector interacts with this field and enforces the foreground deletion. Defaults to false. To set this field, a user needs \"delete\" permission of the owner, otherwise 422 (Unprocessable Entity) will be returned."
        }, 
        "uid": {
          "type": "string", 
          "description": "UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#uids"
        }, 
        "controller": {
          "type": "boolean", 
          "description": "If true, this reference points to the managing controller."
        }, 
        "apiVersion": {
          "type": "string", 
          "description": "API version of the referent."
        }, 
        "name": {
          "type": "string", 
          "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#names"
        }
      }
    }, 
    "io.k8s.api.admissionregistration.v1.ValidatingAdmissionPolicyBindingList": {
      "type": "object", 
      "required": [
        "items"
      ], 
      "x-kubernetes-group-version-kind": [
        {
          "kind": "ValidatingAdmissionPolicyBindingList", 
          "version": "v1", 
          "group": "admissionregistration.k8s.io"
        }
      ], 
      "description": "ValidatingAdmissionPolicyBindingList is a list of ValidatingAdmissionPolicyBinding.", 
      "properties": {
        "items": {
          "items": {
            "$ref": "#/definitions/io.k8s.api.admissionregistration.v1.ValidatingAdmissionPolicyBinding"
          }, 
          "type": "array", 
          "description": "List of PolicyBinding."
        }, 
        "kind": {
          "enum": [
            "ValidatingAdmissionPolicyBindingList"
          ], 
          "type": "string", 
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
        }, 
        "apiVersion": {
          "type": "string", 
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources"
        }, 
        "metadata": {
          "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds", 
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      }
    }, 
    "io.k8s.api.admissionregistration.v1.ValidatingAdmissionPolicyList": {
      "type": "object", 
      "required": [
        "items"
      ], 
      "x-kubernetes-group-version-kind": [
        {
          "kind": "ValidatingAdmissionPolicyList", 
          "version": "v1", 
          "group": "admissionregistration.k8s.io"
        }
      ], 
      "description": "ValidatingAdmissionPolicyList is a list of ValidatingAdmissionPolicy.", 
      "properties": {
        "items": {
          "items": {
            "$ref": "#/definitions/io.k8s.api.admissionregistration.v1.ValidatingAdmissionPolicy"
          }, 
          "type": "array", 
          "description": "List of ValidatingAdmissionPolicy."
        }, 
        "kind": {
          "enum": [
            "ValidatingAdmissionPolicyList"
          ], 
          "type": "string", 
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
        }, 
        "apiVersion": {
          "type": "string", 
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources"
        }, 
        "metadata": {
          "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds", 
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      }
    }, 
    "io.k8s.api.resource.v1.DeviceAttribute": {
      "type": "object", 
      "description": "DeviceAttribute must have exactly one field set.", 
      "properties": {
        "int": {
          "type": "integer", 
          "description": "IntValue is a number.", 
          "format": "int64"
        }, 
        "version": {
          "type": "string", 
          "description": "VersionValue is a semantic version according to semver.org spec 2.0.0. Must not be longer than 64 characters."
        }, 
        "bool": {
          "type": "boolean", 
          "description": "BoolValue is a true/false value."
        }, 
        "string": {
          "type": "string", 
          "description": "StringValue is a string. Must not be longer than 64 characters."
        }
      }
    }, 
    "io.k8s.api.flowcontrol.v1.FlowDistinguisherMethod": {
      "required": [
        "type"
      ], 
      "type": "object", 
      "description": "FlowDistinguisherMethod specifies the method of a flow distinguisher.", 
      "properties": {
        "type": {
          "type": "string", 
          "description": "`type` is the type of flow distinguisher method The supported types are \"ByUser\" and \"ByNamespace\". Required."
        }
      }
    }, 
    "io.k8s.api.core.v1.ServiceAccount": {
      "type": "object", 
      "x-kubernetes-group-version-kind": [
        {
          "kind": "ServiceAccount", 
          "version": "v1", 
          "group": ""
        }
      ], 
      "description": "ServiceAccount binds together: * a name, understood by users, and perhaps by peripheral systems, for an identity * a principal that can be authenticated and authorized * a set of secrets", 
      "properties": {
        "kind": {
          "enum": [
            "ServiceAccount"
          ], 
          "type": "string", 
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
        }, 
        "secrets": {
          "description": "Secrets is a list of the secrets in the same namespace that pods running using this ServiceAccount are allowed to use. Pods are only limited to this list if this service account has a \"kubernetes.io/enforce-mountable-secrets\" annotation set to \"true\". The \"kubernetes.io/enforce-mountable-secrets\" annotation is deprecated since v1.32. Prefer separate namespaces to isolate access to mounted secrets. This field should not be used to find auto-generated service account token secrets for use outside of pods. Instead, tokens can be requested directly using the TokenRequest API, or service account token secrets can be manually created. More info: https://kubernetes.io/docs/concepts/configuration/secret", 
          "x-kubernetes-list-map-keys": [
            "name"
          ], 
          "x-kubernetes-patch-merge-key": "name", 
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.ObjectReference"
          }, 
          "type": "array", 
          "x-kubernetes-list-type": "map", 
          "x-kubernetes-patch-strategy": "merge"
        }, 
        "metadata": {
          "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata", 
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        }, 
        "imagePullSecrets": {
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.LocalObjectReference"
          }, 
          "type": "array", 
          "description": "ImagePullSecrets is a list of references to secrets in the same namespace to use for pulling any images in pods that reference this ServiceAccount. ImagePullSecrets are distinct from Secrets because Secrets can be mounted in the pod, but ImagePullSecrets are only accessed by the kubelet. More info: https://kubernetes.io/docs/concepts/containers/images/#specifying-imagepullsecrets-on-a-pod", 
          "x-kubernetes-list-type": "atomic"
        }, 
        "apiVersion": {
          "type": "string", 
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources"
        }, 
        "automountServiceAccountToken": {
          "type": "boolean", 
          "description": "AutomountServiceAccountToken indicates whether pods running as this service account should have an API token automatically mounted. Can be overridden at the pod level."
        }
      }
    }, 
    "io.k8s.api.core.v1.LimitRangeSpec": {
      "required": [
        "limits"
      ], 
      "type": "object", 
      "description": "LimitRangeSpec defines a min/max usage limit for resources that match on kind.", 
      "properties": {
        "limits": {
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.LimitRangeItem"
          }, 
          "type": "array", 
          "description": "Limits is the list of LimitRangeItem objects that are enforced.", 
          "x-kubernetes-list-type": "atomic"
        }
      }
    }, 
    "io.k8s.api.resource.v1.DeviceSelector": {
      "type": "object", 
      "description": "DeviceSelector must have exactly one field set.", 
      "properties": {
        "cel": {
          "description": "CEL contains a CEL expression for selecting a device.", 
          "$ref": "#/definitions/io.k8s.api.resource.v1.CELDeviceSelector"
        }
      }
    }, 
    "io.k8s.api.flowcontrol.v1.FlowSchema": {
      "type": "object", 
      "x-kubernetes-group-version-kind": [
        {
          "kind": "FlowSchema", 
          "version": "v1", 
          "group": "flowcontrol.apiserver.k8s.io"
        }
      ], 
      "description": "FlowSchema defines the schema of a group of flows. Note that a flow is made up of a set of inbound API requests with similar attributes and is identified by a pair of strings: the name of the FlowSchema and a \"flow distinguisher\".", 
      "properties": {
        "status": {
          "description": "`status` is the current status of a FlowSchema. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status", 
          "$ref": "#/definitions/io.k8s.api.flowcontrol.v1.FlowSchemaStatus"
        }, 
        "kind": {
          "enum": [
            "FlowSchema"
          ], 
          "type": "string", 
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
        }, 
        "spec": {
          "description": "`spec` is the specification of the desired behavior of a FlowSchema. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status", 
          "$ref": "#/definitions/io.k8s.api.flowcontrol.v1.FlowSchemaSpec"
        }, 
        "apiVersion": {
          "type": "string", 
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources"
        }, 
        "metadata": {
          "description": "`metadata` is the standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata", 
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        }
      }
    }, 
    "io.k8s.api.core.v1.NodeCondition": {
      "required": [
        "type", 
        "status"
      ], 
      "type": "object", 
      "description": "NodeCondition contains condition information for a node.", 
      "properties": {
        "status": {
          "type": "string", 
          "description": "Status of the condition, one of True, False, Unknown."
        }, 
        "lastHeartbeatTime": {
          "description": "Last time we got an update on a given condition.", 
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
        }, 
        "type": {
          "type": "string", 
          "description": "Type of node condition."
        }, 
        "message": {
          "type": "string", 
          "description": "Human readable message indicating details about last transition."
        }, 
        "lastTransitionTime": {
          "description": "Last time the condition transit from one status to another.", 
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
        }, 
        "reason": {
          "type": "string", 
          "description": "(brief) reason for the condition's last transition."
        }
      }
    }, 
    "io.k8s.api.admissionregistration.v1alpha1.MatchCondition": {
      "required": [
        "name", 
        "expression"
      ], 
      "type": "object", 
      "properties": {
        "expression": {
          "type": "string", 
          "description": "Expression represents the expression which will be evaluated by CEL. Must evaluate to bool. CEL expressions have access to the contents of the AdmissionRequest and Authorizer, organized into CEL variables:\n\n'object' - The object from the incoming request. The value is null for DELETE requests. 'oldObject' - The existing object. The value is null for CREATE requests. 'request' - Attributes of the admission request(/pkg/apis/admission/types.go#AdmissionRequest). 'authorizer' - A CEL Authorizer. May be used to perform authorization checks for the principal (user or service account) of the request.\n  See https://pkg.go.dev/k8s.io/apiserver/pkg/cel/library#Authz\n'authorizer.requestResource' - A CEL ResourceCheck constructed from the 'authorizer' and configured with the\n  request resource.\nDocumentation on CEL: https://kubernetes.io/docs/reference/using-api/cel/\n\nRequired."
        }, 
        "name": {
          "type": "string", 
          "description": "Name is an identifier for this match condition, used for strategic merging of MatchConditions, as well as providing an identifier for logging purposes. A good name should be descriptive of the associated expression. Name must be a qualified name consisting of alphanumeric characters, '-', '_' or '.', and must start and end with an alphanumeric character (e.g. 'MyName',  or 'my.name',  or '123-abc', regex used for validation is '([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9]') with an optional DNS subdomain prefix and '/' (e.g. 'example.com/MyName')\n\nRequired."
        }
      }
    }, 
    "io.k8s.kube-aggregator.pkg.apis.apiregistration.v1.APIServiceList": {
      "type": "object", 
      "required": [
        "items"
      ], 
      "x-kubernetes-group-version-kind": [
        {
          "kind": "APIServiceList", 
          "version": "v1", 
          "group": "apiregistration.k8s.io"
        }
      ], 
      "description": "APIServiceList is a list of APIService objects.", 
      "properties": {
        "items": {
          "items": {
            "$ref": "#/definitions/io.k8s.kube-aggregator.pkg.apis.apiregistration.v1.APIService"
          }, 
          "type": "array", 
          "description": "Items is the list of APIService"
        }, 
        "kind": {
          "enum": [
            "APIServiceList"
          ], 
          "type": "string", 
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
        }, 
        "apiVersion": {
          "type": "string", 
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources"
        }, 
        "metadata": {
          "description": "Standard list metadata More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata", 
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      }
    }, 
    "io.k8s.api.core.v1.EndpointAddress": {
      "type": "object", 
      "required": [
        "ip"
      ], 
      "x-kubernetes-map-type": "atomic", 
      "description": "EndpointAddress is a tuple that describes single IP address. Deprecated: This API is deprecated in v1.33+.", 
      "properties": {
        "ip": {
          "type": "string", 
          "description": "The IP of this endpoint. May not be loopback (127.0.0.0/8 or ::1), link-local (169.254.0.0/16 or fe80::/10), or link-local multicast (224.0.0.0/24 or ff02::/16)."
        }, 
        "hostname": {
          "type": "string", 
          "description": "The Hostname of this endpoint"
        }, 
        "nodeName": {
          "type": "string", 
          "description": "Optional: Node hosting this endpoint. This can be used to determine endpoints local to a node."
        }, 
        "targetRef": {
          "description": "Reference to object providing the endpoint.", 
          "$ref": "#/definitions/io.k8s.api.core.v1.ObjectReference"
        }
      }
    }, 
    "io.k8s.api.resource.v1beta1.DeviceCapacity": {
      "required": [
        "value"
      ], 
      "type": "object", 
      "description": "DeviceCapacity describes a quantity associated with a device.", 
      "properties": {
        "requestPolicy": {
          "description": "RequestPolicy defines how this DeviceCapacity must be consumed when the device is allowed to be shared by multiple allocations.\n\nThe Device must have allowMultipleAllocations set to true in order to set a requestPolicy.\n\nIf unset, capacity requests are unconstrained: requests can consume any amount of capacity, as long as the total consumed across all allocations does not exceed the device's defined capacity. If request is also unset, default is the full capacity value.", 
          "$ref": "#/definitions/io.k8s.api.resource.v1beta1.CapacityRequestPolicy"
        }, 
        "value": {
          "description": "Value defines how much of a certain capacity that device has.\n\nThis field reflects the fixed total capacity and does not change. The consumed amount is tracked separately by scheduler and does not affect this value.", 
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.api.resource.Quantity"
        }
      }
    }, 
    "io.k8s.api.core.v1.ServiceList": {
      "type": "object", 
      "required": [
        "items"
      ], 
      "x-kubernetes-group-version-kind": [
        {
          "kind": "ServiceList", 
          "version": "v1", 
          "group": ""
        }
      ], 
      "description": "ServiceList holds a list of services.", 
      "properties": {
        "items": {
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.Service"
          }, 
          "type": "array", 
          "description": "List of services"
        }, 
        "kind": {
          "enum": [
            "ServiceList"
          ], 
          "type": "string", 
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
        }, 
        "apiVersion": {
          "type": "string", 
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources"
        }, 
        "metadata": {
          "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds", 
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      }
    }, 
    "io.k8s.api.admissionregistration.v1beta1.JSONPatch": {
      "type": "object", 
      "description": "JSONPatch defines a JSON Patch.", 
      "properties": {
        "expression": {
          "type": "string", 
          "description": "expression will be evaluated by CEL to create a [JSON patch](https://jsonpatch.com/). ref: https://github.com/google/cel-spec\n\nexpression must return an array of JSONPatch values.\n\nFor example, this CEL expression returns a JSON patch to conditionally modify a value:\n\n\t  [\n\t    JSONPatch{op: \"test\", path: \"/spec/example\", value: \"Red\"},\n\t    JSONPatch{op: \"replace\", path: \"/spec/example\", value: \"Green\"}\n\t  ]\n\nTo define an object for the patch value, use Object types. For example:\n\n\t  [\n\t    JSONPatch{\n\t      op: \"add\",\n\t      path: \"/spec/selector\",\n\t      value: Object.spec.selector{matchLabels: {\"environment\": \"test\"}}\n\t    }\n\t  ]\n\nTo use strings containing '/' and '~' as JSONPatch path keys, use \"jsonpatch.escapeKey\". For example:\n\n\t  [\n\t    JSONPatch{\n\t      op: \"add\",\n\t      path: \"/metadata/labels/\" + jsonpatch.escapeKey(\"example.com/environment\"),\n\t      value: \"test\"\n\t    },\n\t  ]\n\nCEL expressions have access to the types needed to create JSON patches and objects:\n\n- 'JSONPatch' - CEL type of JSON Patch operations. JSONPatch has the fields 'op', 'from', 'path' and 'value'.\n  See [JSON patch](https://jsonpatch.com/) for more details. The 'value' field may be set to any of: string,\n  integer, array, map or object.  If set, the 'path' and 'from' fields must be set to a\n  [JSON pointer](https://datatracker.ietf.org/doc/html/rfc6901/) string, where the 'jsonpatch.escapeKey()' CEL\n  function may be used to escape path keys containing '/' and '~'.\n- 'Object' - CEL type of the resource object. - 'Object.<fieldName>' - CEL type of object field (such as 'Object.spec') - 'Object.<fieldName1>.<fieldName2>...<fieldNameN>` - CEL type of nested field (such as 'Object.spec.containers')\n\nCEL expressions have access to the contents of the API request, organized into CEL variables as well as some other useful variables:\n\n- 'object' - The object from the incoming request. The value is null for DELETE requests. - 'oldObject' - The existing object. The value is null for CREATE requests. - 'request' - Attributes of the API request([ref](/pkg/apis/admission/types.go#AdmissionRequest)). - 'params' - Parameter resource referred to by the policy binding being evaluated. Only populated if the policy has a ParamKind. - 'namespaceObject' - The namespace object that the incoming object belongs to. The value is null for cluster-scoped resources. - 'variables' - Map of composited variables, from its name to its lazily evaluated value.\n  For example, a variable named 'foo' can be accessed as 'variables.foo'.\n- 'authorizer' - A CEL Authorizer. May be used to perform authorization checks for the principal (user or service account) of the request.\n  See https://pkg.go.dev/k8s.io/apiserver/pkg/cel/library#Authz\n- 'authorizer.requestResource' - A CEL ResourceCheck constructed from the 'authorizer' and configured with the\n  request resource.\n\nCEL expressions have access to [Kubernetes CEL function libraries](https://kubernetes.io/docs/reference/using-api/cel/#cel-options-language-features-and-libraries) as well as:\n\n- 'jsonpatch.escapeKey' - Performs JSONPatch key escaping. '~' and  '/' are escaped as '~0' and `~1' respectively).\n\nOnly property names of the form `[a-zA-Z_.-/][a-zA-Z0-9_.-/]*` are accessible. Required."
        }
      }
    }, 
    "io.k8s.api.core.v1.DownwardAPIProjection": {
      "type": "object", 
      "description": "Represents downward API info for projecting into a projected volume. Note that this is identical to a downwardAPI volume source without the default mode.", 
      "properties": {
        "items": {
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.DownwardAPIVolumeFile"
          }, 
          "type": "array", 
          "description": "Items is a list of DownwardAPIVolume file", 
          "x-kubernetes-list-type": "atomic"
        }
      }
    }, 
    "io.k8s.api.core.v1.PhotonPersistentDiskVolumeSource": {
      "required": [
        "pdID"
      ], 
      "type": "object", 
      "description": "Represents a Photon Controller persistent disk resource.", 
      "properties": {
        "fsType": {
          "type": "string", 
          "description": "fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified."
        }, 
        "pdID": {
          "type": "string", 
          "description": "pdID is the ID that identifies Photon Controller persistent disk"
        }
      }
    }, 
    "io.k8s.api.core.v1.Namespace": {
      "type": "object", 
      "x-kubernetes-group-version-kind": [
        {
          "kind": "Namespace", 
          "version": "v1", 
          "group": ""
        }
      ], 
      "description": "Namespace provides a scope for Names. Use of multiple namespaces is optional.", 
      "properties": {
        "status": {
          "description": "Status describes the current status of a Namespace. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status", 
          "$ref": "#/definitions/io.k8s.api.core.v1.NamespaceStatus"
        }, 
        "kind": {
          "enum": [
            "Namespace"
          ], 
          "type": "string", 
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
        }, 
        "spec": {
          "description": "Spec defines the behavior of the Namespace. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status", 
          "$ref": "#/definitions/io.k8s.api.core.v1.NamespaceSpec"
        }, 
        "apiVersion": {
          "type": "string", 
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources"
        }, 
        "metadata": {
          "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata", 
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        }
      }
    }, 
    "io.k8s.api.resource.v1beta1.ResourceClaimTemplateList": {
      "type": "object", 
      "required": [
        "items"
      ], 
      "x-kubernetes-group-version-kind": [
        {
          "kind": "ResourceClaimTemplateList", 
          "version": "v1beta1", 
          "group": "resource.k8s.io"
        }
      ], 
      "description": "ResourceClaimTemplateList is a collection of claim templates.", 
      "properties": {
        "items": {
          "items": {
            "$ref": "#/definitions/io.k8s.api.resource.v1beta1.ResourceClaimTemplate"
          }, 
          "type": "array", 
          "description": "Items is the list of resource claim templates."
        }, 
        "kind": {
          "enum": [
            "ResourceClaimTemplateList"
          ], 
          "type": "string", 
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
        }, 
        "apiVersion": {
          "type": "string", 
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources"
        }, 
        "metadata": {
          "description": "Standard list metadata", 
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      }
    }, 
    "io.k8s.api.core.v1.NodeSelectorTerm": {
      "type": "object", 
      "x-kubernetes-map-type": "atomic", 
      "description": "A null or empty node selector term matches no objects. The requirements of them are ANDed. The TopologySelectorTerm type implements a subset of the NodeSelectorTerm.", 
      "properties": {
        "matchFields": {
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.NodeSelectorRequirement"
          }, 
          "type": "array", 
          "description": "A list of node selector requirements by node's fields.", 
          "x-kubernetes-list-type": "atomic"
        }, 
        "matchExpressions": {
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.NodeSelectorRequirement"
          }, 
          "type": "array", 
          "description": "A list of node selector requirements by node's labels.", 
          "x-kubernetes-list-type": "atomic"
        }
      }
    }, 
    "io.k8s.api.resource.v1beta1.CapacityRequestPolicyRange": {
      "required": [
        "min"
      ], 
      "type": "object", 
      "description": "CapacityRequestPolicyRange defines a valid range for consumable capacity values.\n\n  - If the requested amount is less than Min, it is rounded up to the Min value.\n  - If Step is set and the requested amount is between Min and Max but not aligned with Step,\n    it will be rounded up to the next value equal to Min + (n * Step).\n  - If Step is not set, the requested amount is used as-is if it falls within the range Min to Max (if set).\n  - If the requested or rounded amount exceeds Max (if set), the request does not satisfy the policy,\n    and the device cannot be allocated.", 
      "properties": {
        "max": {
          "description": "Max defines the upper limit for capacity that can be requested.\n\nMax must be less than or equal to the capacity value. Min and requestPolicy.default must be less than or equal to the maximum.", 
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.api.resource.Quantity"
        }, 
        "step": {
          "description": "Step defines the step size between valid capacity amounts within the range.\n\nMax (if set) and requestPolicy.default must be a multiple of Step. Min + Step must be less than or equal to the capacity value.", 
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.api.resource.Quantity"
        }, 
        "min": {
          "description": "Min specifies the minimum capacity allowed for a consumption request.\n\nMin must be greater than or equal to zero, and less than or equal to the capacity value. requestPolicy.default must be more than or equal to the minimum.", 
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.api.resource.Quantity"
        }
      }
    }, 
    "io.k8s.api.authorization.v1.SelfSubjectAccessReview": {
      "type": "object", 
      "required": [
        "spec"
      ], 
      "x-kubernetes-group-version-kind": [
        {
          "kind": "SelfSubjectAccessReview", 
          "version": "v1", 
          "group": "authorization.k8s.io"
        }
      ], 
      "description": "SelfSubjectAccessReview checks whether or the current user can perform an action.  Not filling in a spec.namespace means \"in all namespaces\".  Self is a special case, because users should always be able to check whether they can perform an action", 
      "properties": {
        "status": {
          "description": "Status is filled in by the server and indicates whether the request is allowed or not", 
          "$ref": "#/definitions/io.k8s.api.authorization.v1.SubjectAccessReviewStatus"
        }, 
        "kind": {
          "enum": [
            "SelfSubjectAccessReview"
          ], 
          "type": "string", 
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
        }, 
        "spec": {
          "description": "Spec holds information about the request being evaluated.  user and groups must be empty", 
          "$ref": "#/definitions/io.k8s.api.authorization.v1.SelfSubjectAccessReviewSpec"
        }, 
        "apiVersion": {
          "type": "string", 
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources"
        }, 
        "metadata": {
          "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata", 
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        }
      }
    }, 
    "io.k8s.api.authentication.v1.TokenReviewSpec": {
      "type": "object", 
      "description": "TokenReviewSpec is a description of the token authentication request.", 
      "properties": {
        "token": {
          "type": "string", 
          "description": "Token is the opaque bearer token."
        }, 
        "audiences": {
          "items": {
            "type": "string"
          }, 
          "type": "array", 
          "description": "Audiences is a list of the identifiers that the resource server presented with the token identifies as. Audience-aware token authenticators will verify that the token was intended for at least one of the audiences in this list. If no audiences are provided, the audience will default to the audience of the Kubernetes apiserver.", 
          "x-kubernetes-list-type": "atomic"
        }
      }
    }, 
    "io.k8s.api.core.v1.CinderVolumeSource": {
      "required": [
        "volumeID"
      ], 
      "type": "object", 
      "description": "Represents a cinder volume resource in Openstack. A Cinder volume must exist before mounting to a container. The volume must also be in the same region as the kubelet. Cinder volumes support ownership management and SELinux relabeling.", 
      "properties": {
        "readOnly": {
          "type": "boolean", 
          "description": "readOnly defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. More info: https://examples.k8s.io/mysql-cinder-pd/README.md"
        }, 
        "fsType": {
          "type": "string", 
          "description": "fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Examples: \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified. More info: https://examples.k8s.io/mysql-cinder-pd/README.md"
        }, 
        "secretRef": {
          "description": "secretRef is optional: points to a secret object containing parameters used to connect to OpenStack.", 
          "$ref": "#/definitions/io.k8s.api.core.v1.LocalObjectReference"
        }, 
        "volumeID": {
          "type": "string", 
          "description": "volumeID used to identify the volume in cinder. More info: https://examples.k8s.io/mysql-cinder-pd/README.md"
        }
      }
    }, 
    "io.k8s.api.rbac.v1.PolicyRule": {
      "required": [
        "verbs"
      ], 
      "type": "object", 
      "description": "PolicyRule holds information that describes a policy rule, but does not contain information about who the rule applies to or which namespace the rule applies to.", 
      "properties": {
        "apiGroups": {
          "items": {
            "type": "string"
          }, 
          "type": "array", 
          "description": "APIGroups is the name of the APIGroup that contains the resources.  If multiple API groups are specified, any action requested against one of the enumerated resources in any API group will be allowed. \"\" represents the core API group and \"*\" represents all API groups.", 
          "x-kubernetes-list-type": "atomic"
        }, 
        "verbs": {
          "items": {
            "type": "string"
          }, 
          "type": "array", 
          "description": "Verbs is a list of Verbs that apply to ALL the ResourceKinds contained in this rule. '*' represents all verbs.", 
          "x-kubernetes-list-type": "atomic"
        }, 
        "nonResourceURLs": {
          "items": {
            "type": "string"
          }, 
          "type": "array", 
          "description": "NonResourceURLs is a set of partial urls that a user should have access to.  *s are allowed, but only as the full, final step in the path Since non-resource URLs are not namespaced, this field is only applicable for ClusterRoles referenced from a ClusterRoleBinding. Rules can either apply to API resources (such as \"pods\" or \"secrets\") or non-resource URL paths (such as \"/api\"),  but not both.", 
          "x-kubernetes-list-type": "atomic"
        }, 
        "resources": {
          "items": {
            "type": "string"
          }, 
          "type": "array", 
          "description": "Resources is a list of resources this rule applies to. '*' represents all resources.", 
          "x-kubernetes-list-type": "atomic"
        }, 
        "resourceNames": {
          "items": {
            "type": "string"
          }, 
          "type": "array", 
          "description": "ResourceNames is an optional white list of names that the rule applies to.  An empty set means that everything is allowed.", 
          "x-kubernetes-list-type": "atomic"
        }
      }
    }, 
    "io.k8s.api.core.v1.ContainerImage": {
      "type": "object", 
      "description": "Describe a container image", 
      "properties": {
        "sizeBytes": {
          "type": "integer", 
          "description": "The size of the image in bytes.", 
          "format": "int64"
        }, 
        "names": {
          "items": {
            "type": "string"
          }, 
          "type": "array", 
          "description": "Names by which this image is known. e.g. [\"kubernetes.example/hyperkube:v1.0.7\", \"cloud-vendor.registry.example/cloud-vendor/hyperkube:v1.0.7\"]", 
          "x-kubernetes-list-type": "atomic"
        }
      }
    }, 
    "io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.JSONSchemaPropsOrStringArray": {
      "description": "JSONSchemaPropsOrStringArray represents a JSONSchemaProps or a string array."
    }, 
    "io.k8s.api.core.v1.EmptyDirVolumeSource": {
      "type": "object", 
      "description": "Represents an empty directory for a pod. Empty directory volumes support ownership management and SELinux relabeling.", 
      "properties": {
        "sizeLimit": {
          "description": "sizeLimit is the total amount of local storage required for this EmptyDir volume. The size limit is also applicable for memory medium. The maximum usage on memory medium EmptyDir would be the minimum value between the SizeLimit specified here and the sum of memory limits of all containers in a pod. The default is nil which means that the limit is undefined. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir", 
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.api.resource.Quantity"
        }, 
        "medium": {
          "type": "string", 
          "description": "medium represents what type of storage medium should back this directory. The default is \"\" which means to use the node's default medium. Must be an empty string (default) or Memory. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir"
        }
      }
    }, 
    "io.k8s.api.autoscaling.v2.HorizontalPodAutoscalerCondition": {
      "required": [
        "type", 
        "status"
      ], 
      "type": "object", 
      "description": "HorizontalPodAutoscalerCondition describes the state of a HorizontalPodAutoscaler at a certain point.", 
      "properties": {
        "status": {
          "type": "string", 
          "description": "status is the status of the condition (True, False, Unknown)"
        }, 
        "lastTransitionTime": {
          "description": "lastTransitionTime is the last time the condition transitioned from one status to another", 
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
        }, 
        "message": {
          "type": "string", 
          "description": "message is a human-readable explanation containing details about the transition"
        }, 
        "type": {
          "type": "string", 
          "description": "type describes the current condition"
        }, 
        "reason": {
          "type": "string", 
          "description": "reason is the reason for the condition's last transition."
        }
      }
    }, 
    "io.k8s.api.resource.v1.ResourceSliceSpec": {
      "required": [
        "driver", 
        "pool"
      ], 
      "type": "object", 
      "description": "ResourceSliceSpec contains the information published by the driver in one ResourceSlice.", 
      "properties": {
        "nodeName": {
          "type": "string", 
          "description": "NodeName identifies the node which provides the resources in this pool. A field selector can be used to list only ResourceSlice objects belonging to a certain node.\n\nThis field can be used to limit access from nodes to ResourceSlices with the same node name. It also indicates to autoscalers that adding new nodes of the same type as some old node might also make new resources available.\n\nExactly one of NodeName, NodeSelector, AllNodes, and PerDeviceNodeSelection must be set. This field is immutable."
        }, 
        "sharedCounters": {
          "items": {
            "$ref": "#/definitions/io.k8s.api.resource.v1.CounterSet"
          }, 
          "type": "array", 
          "description": "SharedCounters defines a list of counter sets, each of which has a name and a list of counters available.\n\nThe names of the SharedCounters must be unique in the ResourceSlice.\n\nThe maximum number of counters in all sets is 32.", 
          "x-kubernetes-list-type": "atomic"
        }, 
        "allNodes": {
          "type": "boolean", 
          "description": "AllNodes indicates that all nodes have access to the resources in the pool.\n\nExactly one of NodeName, NodeSelector, AllNodes, and PerDeviceNodeSelection must be set."
        }, 
        "driver": {
          "type": "string", 
          "description": "Driver identifies the DRA driver providing the capacity information. A field selector can be used to list only ResourceSlice objects with a certain driver name.\n\nMust be a DNS subdomain and should end with a DNS domain owned by the vendor of the driver. This field is immutable."
        }, 
        "devices": {
          "items": {
            "$ref": "#/definitions/io.k8s.api.resource.v1.Device"
          }, 
          "type": "array", 
          "description": "Devices lists some or all of the devices in this pool.\n\nMust not have more than 128 entries.", 
          "x-kubernetes-list-type": "atomic"
        }, 
        "nodeSelector": {
          "description": "NodeSelector defines which nodes have access to the resources in the pool, when that pool is not limited to a single node.\n\nMust use exactly one term.\n\nExactly one of NodeName, NodeSelector, AllNodes, and PerDeviceNodeSelection must be set.", 
          "$ref": "#/definitions/io.k8s.api.core.v1.NodeSelector"
        }, 
        "perDeviceNodeSelection": {
          "type": "boolean", 
          "description": "PerDeviceNodeSelection defines whether the access from nodes to resources in the pool is set on the ResourceSlice level or on each device. If it is set to true, every device defined the ResourceSlice must specify this individually.\n\nExactly one of NodeName, NodeSelector, AllNodes, and PerDeviceNodeSelection must be set."
        }, 
        "pool": {
          "description": "Pool describes the pool that this ResourceSlice belongs to.", 
          "$ref": "#/definitions/io.k8s.api.resource.v1.ResourcePool"
        }
      }
    }, 
    "io.k8s.api.core.v1.PodResourceClaim": {
      "required": [
        "name"
      ], 
      "type": "object", 
      "description": "PodResourceClaim references exactly one ResourceClaim, either directly or by naming a ResourceClaimTemplate which is then turned into a ResourceClaim for the pod.\n\nIt adds a name to it that uniquely identifies the ResourceClaim inside the Pod. Containers that need access to the ResourceClaim reference it with this name.", 
      "properties": {
        "resourceClaimName": {
          "type": "string", 
          "description": "ResourceClaimName is the name of a ResourceClaim object in the same namespace as this pod.\n\nExactly one of ResourceClaimName and ResourceClaimTemplateName must be set."
        }, 
        "resourceClaimTemplateName": {
          "type": "string", 
          "description": "ResourceClaimTemplateName is the name of a ResourceClaimTemplate object in the same namespace as this pod.\n\nThe template will be used to create a new ResourceClaim, which will be bound to this pod. When this pod is deleted, the ResourceClaim will also be deleted. The pod name and resource name, along with a generated component, will be used to form a unique name for the ResourceClaim, which will be recorded in pod.status.resourceClaimStatuses.\n\nThis field is immutable and no changes will be made to the corresponding ResourceClaim by the control plane after creating the ResourceClaim.\n\nExactly one of ResourceClaimName and ResourceClaimTemplateName must be set."
        }, 
        "name": {
          "type": "string", 
          "description": "Name uniquely identifies this resource claim inside the pod. This must be a DNS_LABEL."
        }
      }
    }, 
    "io.k8s.api.admissionregistration.v1.ValidatingAdmissionPolicyBindingSpec": {
      "type": "object", 
      "description": "ValidatingAdmissionPolicyBindingSpec is the specification of the ValidatingAdmissionPolicyBinding.", 
      "properties": {
        "policyName": {
          "type": "string", 
          "description": "PolicyName references a ValidatingAdmissionPolicy name which the ValidatingAdmissionPolicyBinding binds to. If the referenced resource does not exist, this binding is considered invalid and will be ignored Required."
        }, 
        "paramRef": {
          "description": "paramRef specifies the parameter resource used to configure the admission control policy. It should point to a resource of the type specified in ParamKind of the bound ValidatingAdmissionPolicy. If the policy specifies a ParamKind and the resource referred to by ParamRef does not exist, this binding is considered mis-configured and the FailurePolicy of the ValidatingAdmissionPolicy applied. If the policy does not specify a ParamKind then this field is ignored, and the rules are evaluated without a param.", 
          "$ref": "#/definitions/io.k8s.api.admissionregistration.v1.ParamRef"
        }, 
        "validationActions": {
          "items": {
            "type": "string"
          }, 
          "type": "array", 
          "description": "validationActions declares how Validations of the referenced ValidatingAdmissionPolicy are enforced. If a validation evaluates to false it is always enforced according to these actions.\n\nFailures defined by the ValidatingAdmissionPolicy's FailurePolicy are enforced according to these actions only if the FailurePolicy is set to Fail, otherwise the failures are ignored. This includes compilation errors, runtime errors and misconfigurations of the policy.\n\nvalidationActions is declared as a set of action values. Order does not matter. validationActions may not contain duplicates of the same action.\n\nThe supported actions values are:\n\n\"Deny\" specifies that a validation failure results in a denied request.\n\n\"Warn\" specifies that a validation failure is reported to the request client in HTTP Warning headers, with a warning code of 299. Warnings can be sent both for allowed or denied admission responses.\n\n\"Audit\" specifies that a validation failure is included in the published audit event for the request. The audit event will contain a `validation.policy.admission.k8s.io/validation_failure` audit annotation with a value containing the details of the validation failures, formatted as a JSON list of objects, each with the following fields: - message: The validation failure message string - policy: The resource name of the ValidatingAdmissionPolicy - binding: The resource name of the ValidatingAdmissionPolicyBinding - expressionIndex: The index of the failed validations in the ValidatingAdmissionPolicy - validationActions: The enforcement actions enacted for the validation failure Example audit annotation: `\"validation.policy.admission.k8s.io/validation_failure\": \"[{\\\"message\\\": \\\"Invalid value\\\", {\\\"policy\\\": \\\"policy.example.com\\\", {\\\"binding\\\": \\\"policybinding.example.com\\\", {\\\"expressionIndex\\\": \\\"1\\\", {\\\"validationActions\\\": [\\\"Audit\\\"]}]\"`\n\nClients should expect to handle additional values by ignoring any values not recognized.\n\n\"Deny\" and \"Warn\" may not be used together since this combination needlessly duplicates the validation failure both in the API response body and the HTTP warning headers.\n\nRequired.", 
          "x-kubernetes-list-type": "set"
        }, 
        "matchResources": {
          "description": "MatchResources declares what resources match this binding and will be validated by it. Note that this is intersected with the policy's matchConstraints, so only requests that are matched by the policy can be selected by this. If this is unset, all resources matched by the policy are validated by this binding When resourceRules is unset, it does not constrain resource matching. If a resource is matched by the other fields of this object, it will be validated. Note that this is differs from ValidatingAdmissionPolicy matchConstraints, where resourceRules are required.", 
          "$ref": "#/definitions/io.k8s.api.admissionregistration.v1.MatchResources"
        }
      }
    }, 
    "io.k8s.api.autoscaling.v2.ObjectMetricStatus": {
      "required": [
        "metric", 
        "current", 
        "describedObject"
      ], 
      "type": "object", 
      "description": "ObjectMetricStatus indicates the current value of a metric describing a kubernetes object (for example, hits-per-second on an Ingress object).", 
      "properties": {
        "current": {
          "description": "current contains the current value for the given metric", 
          "$ref": "#/definitions/io.k8s.api.autoscaling.v2.MetricValueStatus"
        }, 
        "metric": {
          "description": "metric identifies the target metric by name and selector", 
          "$ref": "#/definitions/io.k8s.api.autoscaling.v2.MetricIdentifier"
        }, 
        "describedObject": {
          "description": "DescribedObject specifies the descriptions of a object,such as kind,name apiVersion", 
          "$ref": "#/definitions/io.k8s.api.autoscaling.v2.CrossVersionObjectReference"
        }
      }
    }, 
    "io.k8s.api.resource.v1beta2.DeviceRequest": {
      "required": [
        "name"
      ], 
      "type": "object", 
      "description": "DeviceRequest is a request for devices required for a claim. This is typically a request for a single resource like a device, but can also ask for several identical devices. With FirstAvailable it is also possible to provide a prioritized list of requests.", 
      "properties": {
        "firstAvailable": {
          "items": {
            "$ref": "#/definitions/io.k8s.api.resource.v1beta2.DeviceSubRequest"
          }, 
          "type": "array", 
          "description": "FirstAvailable contains subrequests, of which exactly one will be selected by the scheduler. It tries to satisfy them in the order in which they are listed here. So if there are two entries in the list, the scheduler will only check the second one if it determines that the first one can not be used.\n\nDRA does not yet implement scoring, so the scheduler will select the first set of devices that satisfies all the requests in the claim. And if the requirements can be satisfied on more than one node, other scheduling features will determine which node is chosen. This means that the set of devices allocated to a claim might not be the optimal set available to the cluster. Scoring will be implemented later.", 
          "x-kubernetes-list-type": "atomic"
        }, 
        "exactly": {
          "description": "Exactly specifies the details for a single request that must be met exactly for the request to be satisfied.\n\nOne of Exactly or FirstAvailable must be set.", 
          "$ref": "#/definitions/io.k8s.api.resource.v1beta2.ExactDeviceRequest"
        }, 
        "name": {
          "type": "string", 
          "description": "Name can be used to reference this request in a pod.spec.containers[].resources.claims entry and in a constraint of the claim.\n\nReferences using the name in the DeviceRequest will uniquely identify a request when the Exactly field is set. When the FirstAvailable field is set, a reference to the name of the DeviceRequest will match whatever subrequest is chosen by the scheduler.\n\nMust be a DNS label."
        }
      }
    }, 
    "io.k8s.api.networking.v1beta1.IPAddress": {
      "type": "object", 
      "x-kubernetes-group-version-kind": [
        {
          "kind": "IPAddress", 
          "version": "v1beta1", 
          "group": "networking.k8s.io"
        }
      ], 
      "description": "IPAddress represents a single IP of a single IP Family. The object is designed to be used by APIs that operate on IP addresses. The object is used by the Service core API for allocation of IP addresses. An IP address can be represented in different formats, to guarantee the uniqueness of the IP, the name of the object is the IP address in canonical format, four decimal digits separated by dots suppressing leading zeros for IPv4 and the representation defined by RFC 5952 for IPv6. Valid: 192.168.1.5 or 2001:db8::1 or 2001:db8:aaaa:bbbb:cccc:dddd:eeee:1 Invalid: 10.01.2.3 or 2001:db8:0:0:0::1", 
      "properties": {
        "kind": {
          "enum": [
            "IPAddress"
          ], 
          "type": "string", 
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
        }, 
        "spec": {
          "description": "spec is the desired state of the IPAddress. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status", 
          "$ref": "#/definitions/io.k8s.api.networking.v1beta1.IPAddressSpec"
        }, 
        "apiVersion": {
          "type": "string", 
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources"
        }, 
        "metadata": {
          "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata", 
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        }
      }
    }, 
    "io.k8s.api.core.v1.AWSElasticBlockStoreVolumeSource": {
      "required": [
        "volumeID"
      ], 
      "type": "object", 
      "description": "Represents a Persistent Disk resource in AWS.\n\nAn AWS EBS disk must exist before mounting to a container. The disk must also be in the same AWS zone as the kubelet. An AWS EBS disk can only be mounted as read/write once. AWS EBS volumes support ownership management and SELinux relabeling.", 
      "properties": {
        "readOnly": {
          "type": "boolean", 
          "description": "readOnly value true will force the readOnly setting in VolumeMounts. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore"
        }, 
        "partition": {
          "type": "integer", 
          "description": "partition is the partition in the volume that you want to mount. If omitted, the default is to mount by volume name. Examples: For volume /dev/sda1, you specify the partition as \"1\". Similarly, the volume partition for /dev/sda is \"0\" (or you can leave the property empty).", 
          "format": "int32"
        }, 
        "volumeID": {
          "type": "string", 
          "description": "volumeID is unique ID of the persistent disk resource in AWS (Amazon EBS volume). More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore"
        }, 
        "fsType": {
          "type": "string", 
          "description": "fsType is the filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore"
        }
      }
    }, 
    "io.k8s.api.admissionregistration.v1.ValidatingAdmissionPolicyBinding": {
      "type": "object", 
      "x-kubernetes-group-version-kind": [
        {
          "kind": "ValidatingAdmissionPolicyBinding", 
          "version": "v1", 
          "group": "admissionregistration.k8s.io"
        }
      ], 
      "description": "ValidatingAdmissionPolicyBinding binds the ValidatingAdmissionPolicy with paramerized resources. ValidatingAdmissionPolicyBinding and parameter CRDs together define how cluster administrators configure policies for clusters.\n\nFor a given admission request, each binding will cause its policy to be evaluated N times, where N is 1 for policies/bindings that don't use params, otherwise N is the number of parameters selected by the binding.\n\nThe CEL expressions of a policy must have a computed CEL cost below the maximum CEL budget. Each evaluation of the policy is given an independent CEL cost budget. Adding/removing policies, bindings, or params can not affect whether a given (policy, binding, param) combination is within its own CEL budget.", 
      "properties": {
        "kind": {
          "enum": [
            "ValidatingAdmissionPolicyBinding"
          ], 
          "type": "string", 
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
        }, 
        "spec": {
          "description": "Specification of the desired behavior of the ValidatingAdmissionPolicyBinding.", 
          "$ref": "#/definitions/io.k8s.api.admissionregistration.v1.ValidatingAdmissionPolicyBindingSpec"
        }, 
        "apiVersion": {
          "type": "string", 
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources"
        }, 
        "metadata": {
          "description": "Standard object metadata; More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata.", 
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        }
      }
    }, 
    "io.k8s.api.batch.v1.SuccessPolicyRule": {
      "type": "object", 
      "description": "SuccessPolicyRule describes rule for declaring a Job as succeeded. Each rule must have at least one of the \"succeededIndexes\" or \"succeededCount\" specified.", 
      "properties": {
        "succeededIndexes": {
          "type": "string", 
          "description": "succeededIndexes specifies the set of indexes which need to be contained in the actual set of the succeeded indexes for the Job. The list of indexes must be within 0 to \".spec.completions-1\" and must not contain duplicates. At least one element is required. The indexes are represented as intervals separated by commas. The intervals can be a decimal integer or a pair of decimal integers separated by a hyphen. The number are listed in represented by the first and last element of the series, separated by a hyphen. For example, if the completed indexes are 1, 3, 4, 5 and 7, they are represented as \"1,3-5,7\". When this field is null, this field doesn't default to any value and is never evaluated at any time."
        }, 
        "succeededCount": {
          "type": "integer", 
          "description": "succeededCount specifies the minimal required size of the actual set of the succeeded indexes for the Job. When succeededCount is used along with succeededIndexes, the check is constrained only to the set of indexes specified by succeededIndexes. For example, given that succeededIndexes is \"1-4\", succeededCount is \"3\", and completed indexes are \"1\", \"3\", and \"5\", the Job isn't declared as succeeded because only \"1\" and \"3\" indexes are considered in that rules. When this field is null, this doesn't default to any value and is never evaluated at any time. When specified it needs to be a positive integer.", 
          "format": "int32"
        }
      }
    }, 
    "io.k8s.api.autoscaling.v2.HorizontalPodAutoscalerStatus": {
      "required": [
        "desiredReplicas"
      ], 
      "type": "object", 
      "description": "HorizontalPodAutoscalerStatus describes the current status of a horizontal pod autoscaler.", 
      "properties": {
        "desiredReplicas": {
          "type": "integer", 
          "description": "desiredReplicas is the desired number of replicas of pods managed by this autoscaler, as last calculated by the autoscaler.", 
          "format": "int32"
        }, 
        "observedGeneration": {
          "type": "integer", 
          "description": "observedGeneration is the most recent generation observed by this autoscaler.", 
          "format": "int64"
        }, 
        "conditions": {
          "description": "conditions is the set of conditions required for this autoscaler to scale its target, and indicates whether or not those conditions are met.", 
          "x-kubernetes-list-map-keys": [
            "type"
          ], 
          "x-kubernetes-patch-merge-key": "type", 
          "items": {
            "$ref": "#/definitions/io.k8s.api.autoscaling.v2.HorizontalPodAutoscalerCondition"
          }, 
          "type": "array", 
          "x-kubernetes-list-type": "map", 
          "x-kubernetes-patch-strategy": "merge"
        }, 
        "currentReplicas": {
          "type": "integer", 
          "description": "currentReplicas is current number of replicas of pods managed by this autoscaler, as last seen by the autoscaler.", 
          "format": "int32"
        }, 
        "lastScaleTime": {
          "description": "lastScaleTime is the last time the HorizontalPodAutoscaler scaled the number of pods, used by the autoscaler to control how often the number of pods is changed.", 
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
        }, 
        "currentMetrics": {
          "items": {
            "$ref": "#/definitions/io.k8s.api.autoscaling.v2.MetricStatus"
          }, 
          "type": "array", 
          "description": "currentMetrics is the last read state of the metrics used by this autoscaler.", 
          "x-kubernetes-list-type": "atomic"
        }
      }
    }, 
    "io.k8s.api.networking.v1.IngressRule": {
      "type": "object", 
      "description": "IngressRule represents the rules mapping the paths under a specified host to the related backend services. Incoming requests are first evaluated for a host match, then routed to the backend associated with the matching IngressRuleValue.", 
      "properties": {
        "host": {
          "type": "string", 
          "description": "host is the fully qualified domain name of a network host, as defined by RFC 3986. Note the following deviations from the \"host\" part of the URI as defined in RFC 3986: 1. IPs are not allowed. Currently an IngressRuleValue can only apply to\n   the IP in the Spec of the parent Ingress.\n2. The `:` delimiter is not respected because ports are not allowed.\n\t  Currently the port of an Ingress is implicitly :80 for http and\n\t  :443 for https.\nBoth these may change in the future. Incoming requests are matched against the host before the IngressRuleValue. If the host is unspecified, the Ingress routes all traffic based on the specified IngressRuleValue.\n\nhost can be \"precise\" which is a domain name without the terminating dot of a network host (e.g. \"foo.bar.com\") or \"wildcard\", which is a domain name prefixed with a single wildcard label (e.g. \"*.foo.com\"). The wildcard character '*' must appear by itself as the first DNS label and matches only a single label. You cannot have a wildcard label by itself (e.g. Host == \"*\"). Requests will be matched against the Host field in the following way: 1. If host is precise, the request matches this rule if the http host header is equal to Host. 2. If host is a wildcard, then the request matches this rule if the http host header is to equal to the suffix (removing the first label) of the wildcard rule."
        }, 
        "http": {
          "$ref": "#/definitions/io.k8s.api.networking.v1.HTTPIngressRuleValue"
        }
      }
    }, 
    "io.k8s.api.flowcontrol.v1.UserSubject": {
      "required": [
        "name"
      ], 
      "type": "object", 
      "description": "UserSubject holds detailed information for user-kind subject.", 
      "properties": {
        "name": {
          "type": "string", 
          "description": "`name` is the username that matches, or \"*\" to match all usernames. Required."
        }
      }
    }, 
    "io.k8s.api.node.v1.RuntimeClassList": {
      "type": "object", 
      "required": [
        "items"
      ], 
      "x-kubernetes-group-version-kind": [
        {
          "kind": "RuntimeClassList", 
          "version": "v1", 
          "group": "node.k8s.io"
        }
      ], 
      "description": "RuntimeClassList is a list of RuntimeClass objects.", 
      "properties": {
        "items": {
          "items": {
            "$ref": "#/definitions/io.k8s.api.node.v1.RuntimeClass"
          }, 
          "type": "array", 
          "description": "items is a list of schema objects."
        }, 
        "kind": {
          "enum": [
            "RuntimeClassList"
          ], 
          "type": "string", 
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
        }, 
        "apiVersion": {
          "type": "string", 
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources"
        }, 
        "metadata": {
          "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata", 
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      }
    }, 
    "io.k8s.api.admissionregistration.v1alpha1.NamedRuleWithOperations": {
      "type": "object", 
      "x-kubernetes-map-type": "atomic", 
      "description": "NamedRuleWithOperations is a tuple of Operations and Resources with ResourceNames.", 
      "properties": {
        "operations": {
          "items": {
            "type": "string"
          }, 
          "type": "array", 
          "description": "Operations is the operations the admission hook cares about - CREATE, UPDATE, DELETE, CONNECT or * for all of those operations and any future admission operations that are added. If '*' is present, the length of the slice must be one. Required.", 
          "x-kubernetes-list-type": "atomic"
        }, 
        "resourceNames": {
          "items": {
            "type": "string"
          }, 
          "type": "array", 
          "description": "ResourceNames is an optional white list of names that the rule applies to.  An empty set means that everything is allowed.", 
          "x-kubernetes-list-type": "atomic"
        }, 
        "apiVersions": {
          "items": {
            "type": "string"
          }, 
          "type": "array", 
          "description": "APIVersions is the API versions the resources belong to. '*' is all versions. If '*' is present, the length of the slice must be one. Required.", 
          "x-kubernetes-list-type": "atomic"
        }, 
        "scope": {
          "type": "string", 
          "description": "scope specifies the scope of this rule. Valid values are \"Cluster\", \"Namespaced\", and \"*\" \"Cluster\" means that only cluster-scoped resources will match this rule. Namespace API objects are cluster-scoped. \"Namespaced\" means that only namespaced resources will match this rule. \"*\" means that there are no scope restrictions. Subresources match the scope of their parent resource. Default is \"*\"."
        }, 
        "apiGroups": {
          "items": {
            "type": "string"
          }, 
          "type": "array", 
          "description": "APIGroups is the API groups the resources belong to. '*' is all groups. If '*' is present, the length of the slice must be one. Required.", 
          "x-kubernetes-list-type": "atomic"
        }, 
        "resources": {
          "items": {
            "type": "string"
          }, 
          "type": "array", 
          "description": "Resources is a list of resources this rule applies to.\n\nFor example: 'pods' means pods. 'pods/log' means the log subresource of pods. '*' means all resources, but not subresources. 'pods/*' means all subresources of pods. '*/scale' means all scale subresources. '*/*' means all resources and their subresources.\n\nIf wildcard is present, the validation rule will ensure resources do not overlap with each other.\n\nDepending on the enclosing object, subresources might not be allowed. Required.", 
          "x-kubernetes-list-type": "atomic"
        }
      }
    }, 
    "io.k8s.api.core.v1.Container": {
      "required": [
        "name"
      ], 
      "type": "object", 
      "description": "A single application container that you want to run within a pod.", 
      "properties": {
        "tty": {
          "type": "boolean", 
          "description": "Whether this container should allocate a TTY for itself, also requires 'stdin' to be true. Default is false."
        }, 
        "terminationMessagePath": {
          "type": "string", 
          "description": "Optional: Path at which the file to which the container's termination message will be written is mounted into the container's filesystem. Message written is intended to be brief final status, such as an assertion failure message. Will be truncated by the node if greater than 4096 bytes. The total message length across all containers will be limited to 12kb. Defaults to /dev/termination-log. Cannot be updated."
        }, 
        "stdinOnce": {
          "type": "boolean", 
          "description": "Whether the container runtime should close the stdin channel after it has been opened by a single attach. When stdin is true the stdin stream will remain open across multiple attach sessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the first client attaches to stdin, and then remains open and accepts data until the client disconnects, at which time stdin is closed and remains closed until the container is restarted. If this flag is false, a container processes that reads from stdin will never receive an EOF. Default is false"
        }, 
        "image": {
          "type": "string", 
          "description": "Container image name. More info: https://kubernetes.io/docs/concepts/containers/images This field is optional to allow higher level config management to default or override container images in workload controllers like Deployments and StatefulSets."
        }, 
        "args": {
          "items": {
            "type": "string"
          }, 
          "type": "array", 
          "description": "Arguments to the entrypoint. The container image's CMD is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. \"$$(VAR_NAME)\" will produce the string literal \"$(VAR_NAME)\". Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell", 
          "x-kubernetes-list-type": "atomic"
        }, 
        "volumeMounts": {
          "description": "Pod volumes to mount into the container's filesystem. Cannot be updated.", 
          "x-kubernetes-list-map-keys": [
            "mountPath"
          ], 
          "x-kubernetes-patch-merge-key": "mountPath", 
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.VolumeMount"
          }, 
          "type": "array", 
          "x-kubernetes-list-type": "map", 
          "x-kubernetes-patch-strategy": "merge"
        }, 
        "livenessProbe": {
          "description": "Periodic probe of container liveness. Container will be restarted if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes", 
          "$ref": "#/definitions/io.k8s.api.core.v1.Probe"
        }, 
        "restartPolicy": {
          "type": "string", 
          "description": "RestartPolicy defines the restart behavior of individual containers in a pod. This overrides the pod-level restart policy. When this field is not specified, the restart behavior is defined by the Pod's restart policy and the container type. Additionally, setting the RestartPolicy as \"Always\" for the init container will have the following effect: this init container will be continually restarted on exit until all regular containers have terminated. Once all regular containers have completed, all init containers with restartPolicy \"Always\" will be shut down. This lifecycle differs from normal init containers and is often referred to as a \"sidecar\" container. Although this init container still starts in the init container sequence, it does not wait for the container to complete before proceeding to the next init container. Instead, the next init container starts immediately after this init container is started, or after any startupProbe has successfully completed."
        }, 
        "lifecycle": {
          "description": "Actions that the management system should take in response to container lifecycle events. Cannot be updated.", 
          "$ref": "#/definitions/io.k8s.api.core.v1.Lifecycle"
        }, 
        "securityContext": {
          "description": "SecurityContext defines the security options the container should be run with. If set, the fields of SecurityContext override the equivalent fields of PodSecurityContext. More info: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/", 
          "$ref": "#/definitions/io.k8s.api.core.v1.SecurityContext"
        }, 
        "name": {
          "type": "string", 
          "description": "Name of the container specified as a DNS_LABEL. Each container in a pod must have a unique name (DNS_LABEL). Cannot be updated."
        }, 
        "envFrom": {
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.EnvFromSource"
          }, 
          "type": "array", 
          "description": "List of sources to populate environment variables in the container. The keys defined within a source may consist of any printable ASCII characters except '='. When a key exists in multiple sources, the value associated with the last source will take precedence. Values defined by an Env with a duplicate key will take precedence. Cannot be updated.", 
          "x-kubernetes-list-type": "atomic"
        }, 
        "volumeDevices": {
          "description": "volumeDevices is the list of block devices to be used by the container.", 
          "x-kubernetes-list-map-keys": [
            "devicePath"
          ], 
          "x-kubernetes-patch-merge-key": "devicePath", 
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.VolumeDevice"
          }, 
          "type": "array", 
          "x-kubernetes-list-type": "map", 
          "x-kubernetes-patch-strategy": "merge"
        }, 
        "stdin": {
          "type": "boolean", 
          "description": "Whether this container should allocate a buffer for stdin in the container runtime. If this is not set, reads from stdin in the container will always result in EOF. Default is false."
        }, 
        "workingDir": {
          "type": "string", 
          "description": "Container's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image. Cannot be updated."
        }, 
        "terminationMessagePolicy": {
          "type": "string", 
          "description": "Indicate how the termination message should be populated. File will use the contents of terminationMessagePath to populate the container status message on both success and failure. FallbackToLogsOnError will use the last chunk of container log output if the termination message file is empty and the container exited with an error. The log output is limited to 2048 bytes or 80 lines, whichever is smaller. Defaults to File. Cannot be updated."
        }, 
        "command": {
          "items": {
            "type": "string"
          }, 
          "type": "array", 
          "description": "Entrypoint array. Not executed within a shell. The container image's ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. \"$$(VAR_NAME)\" will produce the string literal \"$(VAR_NAME)\". Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell", 
          "x-kubernetes-list-type": "atomic"
        }, 
        "env": {
          "description": "List of environment variables to set in the container. Cannot be updated.", 
          "x-kubernetes-list-map-keys": [
            "name"
          ], 
          "x-kubernetes-patch-merge-key": "name", 
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.EnvVar"
          }, 
          "type": "array", 
          "x-kubernetes-list-type": "map", 
          "x-kubernetes-patch-strategy": "merge"
        }, 
        "imagePullPolicy": {
          "type": "string", 
          "description": "Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More info: https://kubernetes.io/docs/concepts/containers/images#updating-images"
        }, 
        "readinessProbe": {
          "description": "Periodic probe of container service readiness. Container will be removed from service endpoints if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes", 
          "$ref": "#/definitions/io.k8s.api.core.v1.Probe"
        }, 
        "resizePolicy": {
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.ContainerResizePolicy"
          }, 
          "type": "array", 
          "description": "Resources resize policy for the container.", 
          "x-kubernetes-list-type": "atomic"
        }, 
        "startupProbe": {
          "description": "StartupProbe indicates that the Pod has successfully initialized. If specified, no other probes are executed until this completes successfully. If this probe fails, the Pod will be restarted, just as if the livenessProbe failed. This can be used to provide different probe parameters at the beginning of a Pod's lifecycle, when it might take a long time to load data or warm a cache, than during steady-state operation. This cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes", 
          "$ref": "#/definitions/io.k8s.api.core.v1.Probe"
        }, 
        "restartPolicyRules": {
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.ContainerRestartRule"
          }, 
          "type": "array", 
          "description": "Represents a list of rules to be checked to determine if the container should be restarted on exit. The rules are evaluated in order. Once a rule matches a container exit condition, the remaining rules are ignored. If no rule matches the container exit condition, the Container-level restart policy determines the whether the container is restarted or not. Constraints on the rules: - At most 20 rules are allowed. - Rules can have the same action. - Identical rules are not forbidden in validations. When rules are specified, container MUST set RestartPolicy explicitly even it if matches the Pod's RestartPolicy.", 
          "x-kubernetes-list-type": "atomic"
        }, 
        "ports": {
          "description": "List of ports to expose from the container. Not specifying a port here DOES NOT prevent that port from being exposed. Any port which is listening on the default \"0.0.0.0\" address inside a container will be accessible from the network. Modifying this array with strategic merge patch may corrupt the data. For more information See https://github.com/kubernetes/kubernetes/issues/108255. Cannot be updated.", 
          "x-kubernetes-list-map-keys": [
            "containerPort", 
            "protocol"
          ], 
          "x-kubernetes-patch-merge-key": "containerPort", 
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.ContainerPort"
          }, 
          "type": "array", 
          "x-kubernetes-list-type": "map", 
          "x-kubernetes-patch-strategy": "merge"
        }, 
        "resources": {
          "description": "Compute Resources required by this container. Cannot be updated. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/", 
          "$ref": "#/definitions/io.k8s.api.core.v1.ResourceRequirements"
        }
      }
    }, 
    "io.k8s.api.core.v1.ContainerUser": {
      "type": "object", 
      "description": "ContainerUser represents user identity information", 
      "properties": {
        "linux": {
          "description": "Linux holds user identity information initially attached to the first process of the containers in Linux. Note that the actual running identity can be changed if the process has enough privilege to do so.", 
          "$ref": "#/definitions/io.k8s.api.core.v1.LinuxContainerUser"
        }
      }
    }, 
    "io.k8s.api.resource.v1.DeviceClassConfiguration": {
      "type": "object", 
      "description": "DeviceClassConfiguration is used in DeviceClass.", 
      "properties": {
        "opaque": {
          "description": "Opaque provides driver-specific configuration parameters.", 
          "$ref": "#/definitions/io.k8s.api.resource.v1.OpaqueDeviceConfiguration"
        }
      }
    }, 
    "io.k8s.api.resource.v1beta2.DeviceCounterConsumption": {
      "required": [
        "counterSet", 
        "counters"
      ], 
      "type": "object", 
      "description": "DeviceCounterConsumption defines a set of counters that a device will consume from a CounterSet.", 
      "properties": {
        "counterSet": {
          "type": "string", 
          "description": "CounterSet is the name of the set from which the counters defined will be consumed."
        }, 
        "counters": {
          "additionalProperties": {
            "$ref": "#/definitions/io.k8s.api.resource.v1beta2.Counter"
          }, 
          "type": "object", 
          "description": "Counters defines the counters that will be consumed by the device.\n\nThe maximum number counters in a device is 32. In addition, the maximum number of all counters in all devices is 1024 (for example, 64 devices with 16 counters each)."
        }
      }
    }, 
    "io.k8s.api.resource.v1beta2.DeviceClassConfiguration": {
      "type": "object", 
      "description": "DeviceClassConfiguration is used in DeviceClass.", 
      "properties": {
        "opaque": {
          "description": "Opaque provides driver-specific configuration parameters.", 
          "$ref": "#/definitions/io.k8s.api.resource.v1beta2.OpaqueDeviceConfiguration"
        }
      }
    }, 
    "io.k8s.api.core.v1.EventSeries": {
      "type": "object", 
      "description": "EventSeries contain information on series of events, i.e. thing that was/is happening continuously for some time.", 
      "properties": {
        "count": {
          "type": "integer", 
          "description": "Number of occurrences in this series up to the last heartbeat time", 
          "format": "int32"
        }, 
        "lastObservedTime": {
          "description": "Time of the last occurrence observed", 
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.MicroTime"
        }
      }
    }, 
    "io.k8s.api.rbac.v1.RoleBindingList": {
      "type": "object", 
      "required": [
        "items"
      ], 
      "x-kubernetes-group-version-kind": [
        {
          "kind": "RoleBindingList", 
          "version": "v1", 
          "group": "rbac.authorization.k8s.io"
        }
      ], 
      "description": "RoleBindingList is a collection of RoleBindings", 
      "properties": {
        "items": {
          "items": {
            "$ref": "#/definitions/io.k8s.api.rbac.v1.RoleBinding"
          }, 
          "type": "array", 
          "description": "Items is a list of RoleBindings"
        }, 
        "kind": {
          "enum": [
            "RoleBindingList"
          ], 
          "type": "string", 
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
        }, 
        "apiVersion": {
          "type": "string", 
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources"
        }, 
        "metadata": {
          "description": "Standard object's metadata.", 
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      }
    }, 
    "io.k8s.api.apps.v1.DaemonSetSpec": {
      "required": [
        "selector", 
        "template"
      ], 
      "type": "object", 
      "description": "DaemonSetSpec is the specification of a daemon set.", 
      "properties": {
        "revisionHistoryLimit": {
          "type": "integer", 
          "description": "The number of old history to retain to allow rollback. This is a pointer to distinguish between explicit zero and not specified. Defaults to 10.", 
          "format": "int32"
        }, 
        "minReadySeconds": {
          "type": "integer", 
          "description": "The minimum number of seconds for which a newly created DaemonSet pod should be ready without any of its container crashing, for it to be considered available. Defaults to 0 (pod will be considered available as soon as it is ready).", 
          "format": "int32"
        }, 
        "template": {
          "description": "An object that describes the pod that will be created. The DaemonSet will create exactly one copy of this pod on every node that matches the template's node selector (or on every node if no node selector is specified). The only allowed template.spec.restartPolicy value is \"Always\". More info: https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller#pod-template", 
          "$ref": "#/definitions/io.k8s.api.core.v1.PodTemplateSpec"
        }, 
        "updateStrategy": {
          "description": "An update strategy to replace existing DaemonSet pods with new pods.", 
          "$ref": "#/definitions/io.k8s.api.apps.v1.DaemonSetUpdateStrategy"
        }, 
        "selector": {
          "description": "A label query over pods that are managed by the daemon set. Must match in order to be controlled. It must match the pod template's labels. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors", 
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector"
        }
      }
    }, 
    "io.k8s.api.rbac.v1.Role": {
      "type": "object", 
      "x-kubernetes-group-version-kind": [
        {
          "kind": "Role", 
          "version": "v1", 
          "group": "rbac.authorization.k8s.io"
        }
      ], 
      "description": "Role is a namespaced, logical grouping of PolicyRules that can be referenced as a unit by a RoleBinding.", 
      "properties": {
        "rules": {
          "items": {
            "$ref": "#/definitions/io.k8s.api.rbac.v1.PolicyRule"
          }, 
          "type": "array", 
          "description": "Rules holds all the PolicyRules for this Role", 
          "x-kubernetes-list-type": "atomic"
        }, 
        "kind": {
          "enum": [
            "Role"
          ], 
          "type": "string", 
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
        }, 
        "apiVersion": {
          "type": "string", 
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources"
        }, 
        "metadata": {
          "description": "Standard object's metadata.", 
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        }
      }
    }, 
    "io.k8s.api.storage.v1.CSIStorageCapacity": {
      "type": "object", 
      "required": [
        "storageClassName"
      ], 
      "x-kubernetes-group-version-kind": [
        {
          "kind": "CSIStorageCapacity", 
          "version": "v1", 
          "group": "storage.k8s.io"
        }
      ], 
      "description": "CSIStorageCapacity stores the result of one CSI GetCapacity call. For a given StorageClass, this describes the available capacity in a particular topology segment.  This can be used when considering where to instantiate new PersistentVolumes.\n\nFor example this can express things like: - StorageClass \"standard\" has \"1234 GiB\" available in \"topology.kubernetes.io/zone=us-east1\" - StorageClass \"localssd\" has \"10 GiB\" available in \"kubernetes.io/hostname=knode-abc123\"\n\nThe following three cases all imply that no capacity is available for a certain combination: - no object exists with suitable topology and storage class name - such an object exists, but the capacity is unset - such an object exists, but the capacity is zero\n\nThe producer of these objects can decide which approach is more suitable.\n\nThey are consumed by the kube-scheduler when a CSI driver opts into capacity-aware scheduling with CSIDriverSpec.StorageCapacity. The scheduler compares the MaximumVolumeSize against the requested size of pending volumes to filter out unsuitable nodes. If MaximumVolumeSize is unset, it falls back to a comparison against the less precise Capacity. If that is also unset, the scheduler assumes that capacity is insufficient and tries some other node.", 
      "properties": {
        "storageClassName": {
          "type": "string", 
          "description": "storageClassName represents the name of the StorageClass that the reported capacity applies to. It must meet the same requirements as the name of a StorageClass object (non-empty, DNS subdomain). If that object no longer exists, the CSIStorageCapacity object is obsolete and should be removed by its creator. This field is immutable."
        }, 
        "kind": {
          "enum": [
            "CSIStorageCapacity"
          ], 
          "type": "string", 
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
        }, 
        "capacity": {
          "description": "capacity is the value reported by the CSI driver in its GetCapacityResponse for a GetCapacityRequest with topology and parameters that match the previous fields.\n\nThe semantic is currently (CSI spec 1.2) defined as: The available capacity, in bytes, of the storage that can be used to provision volumes. If not set, that information is currently unavailable.", 
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.api.resource.Quantity"
        }, 
        "nodeTopology": {
          "description": "nodeTopology defines which nodes have access to the storage for which capacity was reported. If not set, the storage is not accessible from any node in the cluster. If empty, the storage is accessible from all nodes. This field is immutable.", 
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector"
        }, 
        "maximumVolumeSize": {
          "description": "maximumVolumeSize is the value reported by the CSI driver in its GetCapacityResponse for a GetCapacityRequest with topology and parameters that match the previous fields.\n\nThis is defined since CSI spec 1.4.0 as the largest size that may be used in a CreateVolumeRequest.capacity_range.required_bytes field to create a volume with the same parameters as those in GetCapacityRequest. The corresponding value in the Kubernetes API is ResourceRequirements.Requests in a volume claim.", 
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.api.resource.Quantity"
        }, 
        "apiVersion": {
          "type": "string", 
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources"
        }, 
        "metadata": {
          "description": "Standard object's metadata. The name has no particular meaning. It must be a DNS subdomain (dots allowed, 253 characters). To ensure that there are no conflicts with other CSI drivers on the cluster, the recommendation is to use csisc-<uuid>, a generated name, or a reverse-domain name which ends with the unique CSI driver name.\n\nObjects are namespaced.\n\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata", 
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        }
      }
    }, 
    "io.k8s.api.core.v1.PodTemplate": {
      "type": "object", 
      "x-kubernetes-group-version-kind": [
        {
          "kind": "PodTemplate", 
          "version": "v1", 
          "group": ""
        }
      ], 
      "description": "PodTemplate describes a template for creating copies of a predefined pod.", 
      "properties": {
        "kind": {
          "enum": [
            "PodTemplate"
          ], 
          "type": "string", 
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
        }, 
        "apiVersion": {
          "type": "string", 
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources"
        }, 
        "template": {
          "description": "Template defines the pods that will be created from this pod template. https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status", 
          "$ref": "#/definitions/io.k8s.api.core.v1.PodTemplateSpec"
        }, 
        "metadata": {
          "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata", 
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        }
      }
    }, 
    "io.k8s.api.resource.v1beta1.CELDeviceSelector": {
      "required": [
        "expression"
      ], 
      "type": "object", 
      "description": "CELDeviceSelector contains a CEL expression for selecting a device.", 
      "properties": {
        "expression": {
          "type": "string", 
          "description": "Expression is a CEL expression which evaluates a single device. It must evaluate to true when the device under consideration satisfies the desired criteria, and false when it does not. Any other result is an error and causes allocation of devices to abort.\n\nThe expression's input is an object named \"device\", which carries the following properties:\n - driver (string): the name of the driver which defines this device.\n - attributes (map[string]object): the device's attributes, grouped by prefix\n   (e.g. device.attributes[\"dra.example.com\"] evaluates to an object with all\n   of the attributes which were prefixed by \"dra.example.com\".\n - capacity (map[string]object): the device's capacities, grouped by prefix.\n - allowMultipleAllocations (bool): the allowMultipleAllocations property of the device\n   (v1.34+ with the DRAConsumableCapacity feature enabled).\n\nExample: Consider a device with driver=\"dra.example.com\", which exposes two attributes named \"model\" and \"ext.example.com/family\" and which exposes one capacity named \"modules\". This input to this expression would have the following fields:\n\n    device.driver\n    device.attributes[\"dra.example.com\"].model\n    device.attributes[\"ext.example.com\"].family\n    device.capacity[\"dra.example.com\"].modules\n\nThe device.driver field can be used to check for a specific driver, either as a high-level precondition (i.e. you only want to consider devices from this driver) or as part of a multi-clause expression that is meant to consider devices from different drivers.\n\nThe value type of each attribute is defined by the device definition, and users who write these expressions must consult the documentation for their specific drivers. The value type of each capacity is Quantity.\n\nIf an unknown prefix is used as a lookup in either device.attributes or device.capacity, an empty map will be returned. Any reference to an unknown field will cause an evaluation error and allocation to abort.\n\nA robust expression should check for the existence of attributes before referencing them.\n\nFor ease of use, the cel.bind() function is enabled, and can be used to simplify expressions that access multiple attributes with the same domain. For example:\n\n    cel.bind(dra, device.attributes[\"dra.example.com\"], dra.someBool && dra.anotherBool)\n\nThe length of the expression must be smaller or equal to 10 Ki. The cost of evaluating it is also limited based on the estimated number of logical steps."
        }
      }
    }, 
    "io.k8s.api.core.v1.AzureDiskVolumeSource": {
      "required": [
        "diskName", 
        "diskURI"
      ], 
      "type": "object", 
      "description": "AzureDisk represents an Azure Data Disk mount on the host and bind mount to the pod.", 
      "properties": {
        "diskURI": {
          "type": "string", 
          "description": "diskURI is the URI of data disk in the blob storage"
        }, 
        "diskName": {
          "type": "string", 
          "description": "diskName is the Name of the data disk in the blob storage"
        }, 
        "readOnly": {
          "type": "boolean", 
          "description": "readOnly Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts."
        }, 
        "cachingMode": {
          "type": "string", 
          "description": "cachingMode is the Host Caching mode: None, Read Only, Read Write."
        }, 
        "kind": {
          "type": "string", 
          "description": "kind expected values are Shared: multiple blob disks per storage account  Dedicated: single blob disk per storage account  Managed: azure managed data disk (only in managed availability set). defaults to shared"
        }, 
        "fsType": {
          "type": "string", 
          "description": "fsType is Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified."
        }
      }
    }, 
    "io.k8s.api.admissionregistration.v1.ValidatingWebhook": {
      "required": [
        "name", 
        "clientConfig", 
        "sideEffects", 
        "admissionReviewVersions"
      ], 
      "type": "object", 
      "description": "ValidatingWebhook describes an admission webhook and the resources and operations it applies to.", 
      "properties": {
        "matchPolicy": {
          "type": "string", 
          "description": "matchPolicy defines how the \"rules\" list is used to match incoming requests. Allowed values are \"Exact\" or \"Equivalent\".\n\n- Exact: match a request only if it exactly matches a specified rule. For example, if deployments can be modified via apps/v1, apps/v1beta1, and extensions/v1beta1, but \"rules\" only included `apiGroups:[\"apps\"], apiVersions:[\"v1\"], resources: [\"deployments\"]`, a request to apps/v1beta1 or extensions/v1beta1 would not be sent to the webhook.\n\n- Equivalent: match a request if modifies a resource listed in rules, even via another API group or version. For example, if deployments can be modified via apps/v1, apps/v1beta1, and extensions/v1beta1, and \"rules\" only included `apiGroups:[\"apps\"], apiVersions:[\"v1\"], resources: [\"deployments\"]`, a request to apps/v1beta1 or extensions/v1beta1 would be converted to apps/v1 and sent to the webhook.\n\nDefaults to \"Equivalent\""
        }, 
        "clientConfig": {
          "description": "ClientConfig defines how to communicate with the hook. Required", 
          "$ref": "#/definitions/io.k8s.api.admissionregistration.v1.WebhookClientConfig"
        }, 
        "objectSelector": {
          "description": "ObjectSelector decides whether to run the webhook based on if the object has matching labels. objectSelector is evaluated against both the oldObject and newObject that would be sent to the webhook, and is considered to match if either object matches the selector. A null object (oldObject in the case of create, or newObject in the case of delete) or an object that cannot have labels (like a DeploymentRollback or a PodProxyOptions object) is not considered to match. Use the object selector only if the webhook is opt-in, because end users may skip the admission webhook by setting the labels. Default to the empty LabelSelector, which matches everything.", 
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector"
        }, 
        "name": {
          "type": "string", 
          "description": "The name of the admission webhook. Name should be fully qualified, e.g., imagepolicy.kubernetes.io, where \"imagepolicy\" is the name of the webhook, and kubernetes.io is the name of the organization. Required."
        }, 
        "sideEffects": {
          "type": "string", 
          "description": "SideEffects states whether this webhook has side effects. Acceptable values are: None, NoneOnDryRun (webhooks created via v1beta1 may also specify Some or Unknown). Webhooks with side effects MUST implement a reconciliation system, since a request may be rejected by a future step in the admission chain and the side effects therefore need to be undone. Requests with the dryRun attribute will be auto-rejected if they match a webhook with sideEffects == Unknown or Some."
        }, 
        "rules": {
          "items": {
            "$ref": "#/definitions/io.k8s.api.admissionregistration.v1.RuleWithOperations"
          }, 
          "type": "array", 
          "description": "Rules describes what operations on what resources/subresources the webhook cares about. The webhook cares about an operation if it matches _any_ Rule. However, in order to prevent ValidatingAdmissionWebhooks and MutatingAdmissionWebhooks from putting the cluster in a state which cannot be recovered from without completely disabling the plugin, ValidatingAdmissionWebhooks and MutatingAdmissionWebhooks are never called on admission requests for ValidatingWebhookConfiguration and MutatingWebhookConfiguration objects.", 
          "x-kubernetes-list-type": "atomic"
        }, 
        "timeoutSeconds": {
          "type": "integer", 
          "description": "TimeoutSeconds specifies the timeout for this webhook. After the timeout passes, the webhook call will be ignored or the API call will fail based on the failure policy. The timeout value must be between 1 and 30 seconds. Default to 10 seconds.", 
          "format": "int32"
        }, 
        "failurePolicy": {
          "type": "string", 
          "description": "FailurePolicy defines how unrecognized errors from the admission endpoint are handled - allowed values are Ignore or Fail. Defaults to Fail."
        }, 
        "admissionReviewVersions": {
          "items": {
            "type": "string"
          }, 
          "type": "array", 
          "description": "AdmissionReviewVersions is an ordered list of preferred `AdmissionReview` versions the Webhook expects. API server will try to use first version in the list which it supports. If none of the versions specified in this list supported by API server, validation will fail for this object. If a persisted webhook configuration specifies allowed versions and does not include any versions known to the API Server, calls to the webhook will fail and be subject to the failure policy.", 
          "x-kubernetes-list-type": "atomic"
        }, 
        "namespaceSelector": {
          "description": "NamespaceSelector decides whether to run the webhook on an object based on whether the namespace for that object matches the selector. If the object itself is a namespace, the matching is performed on object.metadata.labels. If the object is another cluster scoped resource, it never skips the webhook.\n\nFor example, to run the webhook on any objects whose namespace is not associated with \"runlevel\" of \"0\" or \"1\";  you will set the selector as follows: \"namespaceSelector\": {\n  \"matchExpressions\": [\n    {\n      \"key\": \"runlevel\",\n      \"operator\": \"NotIn\",\n      \"values\": [\n        \"0\",\n        \"1\"\n      ]\n    }\n  ]\n}\n\nIf instead you want to only run the webhook on any objects whose namespace is associated with the \"environment\" of \"prod\" or \"staging\"; you will set the selector as follows: \"namespaceSelector\": {\n  \"matchExpressions\": [\n    {\n      \"key\": \"environment\",\n      \"operator\": \"In\",\n      \"values\": [\n        \"prod\",\n        \"staging\"\n      ]\n    }\n  ]\n}\n\nSee https://kubernetes.io/docs/concepts/overview/working-with-objects/labels for more examples of label selectors.\n\nDefault to the empty LabelSelector, which matches everything.", 
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector"
        }, 
        "matchConditions": {
          "description": "MatchConditions is a list of conditions that must be met for a request to be sent to this webhook. Match conditions filter requests that have already been matched by the rules, namespaceSelector, and objectSelector. An empty list of matchConditions matches all requests. There are a maximum of 64 match conditions allowed.\n\nThe exact matching logic is (in order):\n  1. If ANY matchCondition evaluates to FALSE, the webhook is skipped.\n  2. If ALL matchConditions evaluate to TRUE, the webhook is called.\n  3. If any matchCondition evaluates to an error (but none are FALSE):\n     - If failurePolicy=Fail, reject the request\n     - If failurePolicy=Ignore, the error is ignored and the webhook is skipped", 
          "x-kubernetes-list-map-keys": [
            "name"
          ], 
          "x-kubernetes-patch-merge-key": "name", 
          "items": {
            "$ref": "#/definitions/io.k8s.api.admissionregistration.v1.MatchCondition"
          }, 
          "type": "array", 
          "x-kubernetes-list-type": "map", 
          "x-kubernetes-patch-strategy": "merge"
        }
      }
    }, 
    "io.k8s.api.storage.v1.CSIDriverList": {
      "type": "object", 
      "required": [
        "items"
      ], 
      "x-kubernetes-group-version-kind": [
        {
          "kind": "CSIDriverList", 
          "version": "v1", 
          "group": "storage.k8s.io"
        }
      ], 
      "description": "CSIDriverList is a collection of CSIDriver objects.", 
      "properties": {
        "items": {
          "items": {
            "$ref": "#/definitions/io.k8s.api.storage.v1.CSIDriver"
          }, 
          "type": "array", 
          "description": "items is the list of CSIDriver"
        }, 
        "kind": {
          "enum": [
            "CSIDriverList"
          ], 
          "type": "string", 
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
        }, 
        "apiVersion": {
          "type": "string", 
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources"
        }, 
        "metadata": {
          "description": "Standard list metadata More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata", 
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      }
    }, 
    "io.k8s.apimachinery.pkg.apis.meta.v1.APIGroup": {
      "type": "object", 
      "required": [
        "name", 
        "versions"
      ], 
      "x-kubernetes-group-version-kind": [
        {
          "kind": "APIGroup", 
          "version": "v1", 
          "group": ""
        }
      ], 
      "description": "APIGroup contains the name, the supported versions, and the preferred version of a group.", 
      "properties": {
        "serverAddressByClientCIDRs": {
          "items": {
            "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ServerAddressByClientCIDR"
          }, 
          "type": "array", 
          "description": "a map of client CIDR to server address that is serving this group. This is to help clients reach servers in the most network-efficient way possible. Clients can use the appropriate server address as per the CIDR that they match. In case of multiple matches, clients should use the longest matching CIDR. The server returns only those CIDRs that it thinks that the client can match. For example: the master will return an internal IP CIDR only, if the client reaches the server using an internal IP. Server looks at X-Forwarded-For header or X-Real-Ip header or request.RemoteAddr (in that order) to get the client IP.", 
          "x-kubernetes-list-type": "atomic"
        }, 
        "kind": {
          "enum": [
            "APIGroup"
          ], 
          "type": "string", 
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
        }, 
        "name": {
          "type": "string", 
          "description": "name is the name of the group."
        }, 
        "versions": {
          "items": {
            "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.GroupVersionForDiscovery"
          }, 
          "type": "array", 
          "description": "versions are the versions supported in this group.", 
          "x-kubernetes-list-type": "atomic"
        }, 
        "preferredVersion": {
          "description": "preferredVersion is the version preferred by the API server, which probably is the storage version.", 
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.GroupVersionForDiscovery"
        }, 
        "apiVersion": {
          "type": "string", 
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources"
        }
      }
    }, 
    "io.k8s.api.networking.v1.HTTPIngressPath": {
      "required": [
        "pathType", 
        "backend"
      ], 
      "type": "object", 
      "description": "HTTPIngressPath associates a path with a backend. Incoming urls matching the path are forwarded to the backend.", 
      "properties": {
        "path": {
          "type": "string", 
          "description": "path is matched against the path of an incoming request. Currently it can contain characters disallowed from the conventional \"path\" part of a URL as defined by RFC 3986. Paths must begin with a '/' and must be present when using PathType with value \"Exact\" or \"Prefix\"."
        }, 
        "pathType": {
          "type": "string", 
          "description": "pathType determines the interpretation of the path matching. PathType can be one of the following values: * Exact: Matches the URL path exactly. * Prefix: Matches based on a URL path prefix split by '/'. Matching is\n  done on a path element by element basis. A path element refers is the\n  list of labels in the path split by the '/' separator. A request is a\n  match for path p if every p is an element-wise prefix of p of the\n  request path. Note that if the last element of the path is a substring\n  of the last element in request path, it is not a match (e.g. /foo/bar\n  matches /foo/bar/baz, but does not match /foo/barbaz).\n* ImplementationSpecific: Interpretation of the Path matching is up to\n  the IngressClass. Implementations can treat this as a separate PathType\n  or treat it identically to Prefix or Exact path types.\nImplementations are required to support all path types."
        }, 
        "backend": {
          "description": "backend defines the referenced service endpoint to which the traffic will be forwarded to.", 
          "$ref": "#/definitions/io.k8s.api.networking.v1.IngressBackend"
        }
      }
    }, 
    "io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.CustomResourceDefinitionVersion": {
      "required": [
        "name", 
        "served", 
        "storage"
      ], 
      "type": "object", 
      "description": "CustomResourceDefinitionVersion describes a version for CRD.", 
      "properties": {
        "deprecationWarning": {
          "type": "string", 
          "description": "deprecationWarning overrides the default warning returned to API clients. May only be set when `deprecated` is true. The default warning indicates this version is deprecated and recommends use of the newest served version of equal or greater stability, if one exists."
        }, 
        "name": {
          "type": "string", 
          "description": "name is the version name, e.g. \u201cv1\u201d, \u201cv2beta1\u201d, etc. The custom resources are served under this version at `/apis/<group>/<version>/...` if `served` is true."
        }, 
        "deprecated": {
          "type": "boolean", 
          "description": "deprecated indicates this version of the custom resource API is deprecated. When set to true, API requests to this version receive a warning header in the server response. Defaults to false."
        }, 
        "storage": {
          "type": "boolean", 
          "description": "storage indicates this version should be used when persisting custom resources to storage. There must be exactly one version with storage=true."
        }, 
        "additionalPrinterColumns": {
          "items": {
            "$ref": "#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.CustomResourceColumnDefinition"
          }, 
          "type": "array", 
          "description": "additionalPrinterColumns specifies additional columns returned in Table output. See https://kubernetes.io/docs/reference/using-api/api-concepts/#receiving-resources-as-tables for details. If no columns are specified, a single column displaying the age of the custom resource is used.", 
          "x-kubernetes-list-type": "atomic"
        }, 
        "selectableFields": {
          "items": {
            "$ref": "#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.SelectableField"
          }, 
          "type": "array", 
          "description": "selectableFields specifies paths to fields that may be used as field selectors. A maximum of 8 selectable fields are allowed. See https://kubernetes.io/docs/concepts/overview/working-with-objects/field-selectors", 
          "x-kubernetes-list-type": "atomic"
        }, 
        "subresources": {
          "description": "subresources specify what subresources this version of the defined custom resource have.", 
          "$ref": "#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.CustomResourceSubresources"
        }, 
        "served": {
          "type": "boolean", 
          "description": "served is a flag enabling/disabling this version from being served via REST APIs"
        }, 
        "schema": {
          "description": "schema describes the schema used for validation, pruning, and defaulting of this version of the custom resource.", 
          "$ref": "#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.CustomResourceValidation"
        }
      }
    }, 
    "io.k8s.apimachinery.pkg.apis.meta.v1.StatusDetails": {
      "type": "object", 
      "description": "StatusDetails is a set of additional properties that MAY be set by the server to provide additional information about a response. The Reason field of a Status object defines what attributes will be set. Clients must ignore fields that do not match the defined type of each attribute, and should assume that any attribute may be empty, invalid, or under defined.", 
      "properties": {
        "kind": {
          "type": "string", 
          "description": "The kind attribute of the resource associated with the status StatusReason. On some operations may differ from the requested resource Kind. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
        }, 
        "group": {
          "type": "string", 
          "description": "The group attribute of the resource associated with the status StatusReason."
        }, 
        "name": {
          "type": "string", 
          "description": "The name attribute of the resource associated with the status StatusReason (when there is a single name which can be described)."
        }, 
        "retryAfterSeconds": {
          "type": "integer", 
          "description": "If specified, the time in seconds before the operation should be retried. Some errors may indicate the client must take an alternate action - for those errors this field may indicate how long to wait before taking the alternate action.", 
          "format": "int32"
        }, 
        "causes": {
          "items": {
            "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.StatusCause"
          }, 
          "type": "array", 
          "description": "The Causes array includes more details associated with the StatusReason failure. Not all StatusReasons may provide detailed causes.", 
          "x-kubernetes-list-type": "atomic"
        }, 
        "uid": {
          "type": "string", 
          "description": "UID of the resource. (when there is a single resource which can be described). More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#uids"
        }
      }
    }, 
    "io.k8s.api.core.v1.ServiceSpec": {
      "type": "object", 
      "description": "ServiceSpec describes the attributes that a user creates on a service.", 
      "properties": {
        "ipFamilyPolicy": {
          "type": "string", 
          "description": "IPFamilyPolicy represents the dual-stack-ness requested or required by this Service. If there is no value provided, then this field will be set to SingleStack. Services can be \"SingleStack\" (a single IP family), \"PreferDualStack\" (two IP families on dual-stack configured clusters or a single IP family on single-stack clusters), or \"RequireDualStack\" (two IP families on dual-stack configured clusters, otherwise fail). The ipFamilies and clusterIPs fields depend on the value of this field. This field will be wiped when updating a service to type ExternalName."
        }, 
        "loadBalancerSourceRanges": {
          "items": {
            "type": "string"
          }, 
          "type": "array", 
          "description": "If specified and supported by the platform, this will restrict traffic through the cloud-provider load-balancer will be restricted to the specified client IPs. This field will be ignored if the cloud-provider does not support the feature.\" More info: https://kubernetes.io/docs/tasks/access-application-cluster/create-external-load-balancer/", 
          "x-kubernetes-list-type": "atomic"
        }, 
        "selector": {
          "additionalProperties": {
            "type": "string"
          }, 
          "type": "object", 
          "x-kubernetes-map-type": "atomic", 
          "description": "Route service traffic to pods with label keys and values matching this selector. If empty or not present, the service is assumed to have an external process managing its endpoints, which Kubernetes will not modify. Only applies to types ClusterIP, NodePort, and LoadBalancer. Ignored if type is ExternalName. More info: https://kubernetes.io/docs/concepts/services-networking/service/"
        }, 
        "externalName": {
          "type": "string", 
          "description": "externalName is the external reference that discovery mechanisms will return as an alias for this service (e.g. a DNS CNAME record). No proxying will be involved.  Must be a lowercase RFC-1123 hostname (https://tools.ietf.org/html/rfc1123) and requires `type` to be \"ExternalName\"."
        }, 
        "sessionAffinity": {
          "type": "string", 
          "description": "Supports \"ClientIP\" and \"None\". Used to maintain session affinity. Enable client IP based session affinity. Must be ClientIP or None. Defaults to None. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies"
        }, 
        "allocateLoadBalancerNodePorts": {
          "type": "boolean", 
          "description": "allocateLoadBalancerNodePorts defines if NodePorts will be automatically allocated for services with type LoadBalancer.  Default is \"true\". It may be set to \"false\" if the cluster load-balancer does not rely on NodePorts.  If the caller requests specific NodePorts (by specifying a value), those requests will be respected, regardless of this field. This field may only be set for services with type LoadBalancer and will be cleared if the type is changed to any other type."
        }, 
        "externalTrafficPolicy": {
          "type": "string", 
          "description": "externalTrafficPolicy describes how nodes distribute service traffic they receive on one of the Service's \"externally-facing\" addresses (NodePorts, ExternalIPs, and LoadBalancer IPs). If set to \"Local\", the proxy will configure the service in a way that assumes that external load balancers will take care of balancing the service traffic between nodes, and so each node will deliver traffic only to the node-local endpoints of the service, without masquerading the client source IP. (Traffic mistakenly sent to a node with no endpoints will be dropped.) The default value, \"Cluster\", uses the standard behavior of routing to all endpoints evenly (possibly modified by topology and other features). Note that traffic sent to an External IP or LoadBalancer IP from within the cluster will always get \"Cluster\" semantics, but clients sending to a NodePort from within the cluster may need to take traffic policy into account when picking a node."
        }, 
        "publishNotReadyAddresses": {
          "type": "boolean", 
          "description": "publishNotReadyAddresses indicates that any agent which deals with endpoints for this Service should disregard any indications of ready/not-ready. The primary use case for setting this field is for a StatefulSet's Headless Service to propagate SRV DNS records for its Pods for the purpose of peer discovery. The Kubernetes controllers that generate Endpoints and EndpointSlice resources for Services interpret this to mean that all endpoints are considered \"ready\" even if the Pods themselves are not. Agents which consume only Kubernetes generated endpoints through the Endpoints or EndpointSlice resources can safely assume this behavior."
        }, 
        "ipFamilies": {
          "items": {
            "type": "string"
          }, 
          "type": "array", 
          "description": "IPFamilies is a list of IP families (e.g. IPv4, IPv6) assigned to this service. This field is usually assigned automatically based on cluster configuration and the ipFamilyPolicy field. If this field is specified manually, the requested family is available in the cluster, and ipFamilyPolicy allows it, it will be used; otherwise creation of the service will fail. This field is conditionally mutable: it allows for adding or removing a secondary IP family, but it does not allow changing the primary IP family of the Service. Valid values are \"IPv4\" and \"IPv6\".  This field only applies to Services of types ClusterIP, NodePort, and LoadBalancer, and does apply to \"headless\" services. This field will be wiped when updating a Service to type ExternalName.\n\nThis field may hold a maximum of two entries (dual-stack families, in either order).  These families must correspond to the values of the clusterIPs field, if specified. Both clusterIPs and ipFamilies are governed by the ipFamilyPolicy field.", 
          "x-kubernetes-list-type": "atomic"
        }, 
        "loadBalancerIP": {
          "type": "string", 
          "description": "Only applies to Service Type: LoadBalancer. This feature depends on whether the underlying cloud-provider supports specifying the loadBalancerIP when a load balancer is created. This field will be ignored if the cloud-provider does not support the feature. Deprecated: This field was under-specified and its meaning varies across implementations. Using it is non-portable and it may not support dual-stack. Users are encouraged to use implementation-specific annotations when available."
        }, 
        "externalIPs": {
          "items": {
            "type": "string"
          }, 
          "type": "array", 
          "description": "externalIPs is a list of IP addresses for which nodes in the cluster will also accept traffic for this service.  These IPs are not managed by Kubernetes.  The user is responsible for ensuring that traffic arrives at a node with this IP.  A common example is external load-balancers that are not part of the Kubernetes system.", 
          "x-kubernetes-list-type": "atomic"
        }, 
        "trafficDistribution": {
          "type": "string", 
          "description": "TrafficDistribution offers a way to express preferences for how traffic is distributed to Service endpoints. Implementations can use this field as a hint, but are not required to guarantee strict adherence. If the field is not set, the implementation will apply its default routing strategy. If set to \"PreferClose\", implementations should prioritize endpoints that are in the same zone."
        }, 
        "healthCheckNodePort": {
          "type": "integer", 
          "description": "healthCheckNodePort specifies the healthcheck nodePort for the service. This only applies when type is set to LoadBalancer and externalTrafficPolicy is set to Local. If a value is specified, is in-range, and is not in use, it will be used.  If not specified, a value will be automatically allocated.  External systems (e.g. load-balancers) can use this port to determine if a given node holds endpoints for this service or not.  If this field is specified when creating a Service which does not need it, creation will fail. This field will be wiped when updating a Service to no longer need it (e.g. changing type). This field cannot be updated once set.", 
          "format": "int32"
        }, 
        "clusterIPs": {
          "items": {
            "type": "string"
          }, 
          "type": "array", 
          "description": "ClusterIPs is a list of IP addresses assigned to this service, and are usually assigned randomly.  If an address is specified manually, is in-range (as per system configuration), and is not in use, it will be allocated to the service; otherwise creation of the service will fail. This field may not be changed through updates unless the type field is also being changed to ExternalName (which requires this field to be empty) or the type field is being changed from ExternalName (in which case this field may optionally be specified, as describe above).  Valid values are \"None\", empty string (\"\"), or a valid IP address.  Setting this to \"None\" makes a \"headless service\" (no virtual IP), which is useful when direct endpoint connections are preferred and proxying is not required.  Only applies to types ClusterIP, NodePort, and LoadBalancer. If this field is specified when creating a Service of type ExternalName, creation will fail. This field will be wiped when updating a Service to type ExternalName.  If this field is not specified, it will be initialized from the clusterIP field.  If this field is specified, clients must ensure that clusterIPs[0] and clusterIP have the same value.\n\nThis field may hold a maximum of two entries (dual-stack IPs, in either order). These IPs must correspond to the values of the ipFamilies field. Both clusterIPs and ipFamilies are governed by the ipFamilyPolicy field. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies", 
          "x-kubernetes-list-type": "atomic"
        }, 
        "sessionAffinityConfig": {
          "description": "sessionAffinityConfig contains the configurations of session affinity.", 
          "$ref": "#/definitions/io.k8s.api.core.v1.SessionAffinityConfig"
        }, 
        "loadBalancerClass": {
          "type": "string", 
          "description": "loadBalancerClass is the class of the load balancer implementation this Service belongs to. If specified, the value of this field must be a label-style identifier, with an optional prefix, e.g. \"internal-vip\" or \"example.com/internal-vip\". Unprefixed names are reserved for end-users. This field can only be set when the Service type is 'LoadBalancer'. If not set, the default load balancer implementation is used, today this is typically done through the cloud provider integration, but should apply for any default implementation. If set, it is assumed that a load balancer implementation is watching for Services with a matching class. Any default load balancer implementation (e.g. cloud providers) should ignore Services that set this field. This field can only be set when creating or updating a Service to type 'LoadBalancer'. Once set, it can not be changed. This field will be wiped when a service is updated to a non 'LoadBalancer' type."
        }, 
        "clusterIP": {
          "type": "string", 
          "description": "clusterIP is the IP address of the service and is usually assigned randomly. If an address is specified manually, is in-range (as per system configuration), and is not in use, it will be allocated to the service; otherwise creation of the service will fail. This field may not be changed through updates unless the type field is also being changed to ExternalName (which requires this field to be blank) or the type field is being changed from ExternalName (in which case this field may optionally be specified, as describe above).  Valid values are \"None\", empty string (\"\"), or a valid IP address. Setting this to \"None\" makes a \"headless service\" (no virtual IP), which is useful when direct endpoint connections are preferred and proxying is not required.  Only applies to types ClusterIP, NodePort, and LoadBalancer. If this field is specified when creating a Service of type ExternalName, creation will fail. This field will be wiped when updating a Service to type ExternalName. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies"
        }, 
        "internalTrafficPolicy": {
          "type": "string", 
          "description": "InternalTrafficPolicy describes how nodes distribute service traffic they receive on the ClusterIP. If set to \"Local\", the proxy will assume that pods only want to talk to endpoints of the service on the same node as the pod, dropping the traffic if there are no local endpoints. The default value, \"Cluster\", uses the standard behavior of routing to all endpoints evenly (possibly modified by topology and other features)."
        }, 
        "type": {
          "type": "string", 
          "description": "type determines how the Service is exposed. Defaults to ClusterIP. Valid options are ExternalName, ClusterIP, NodePort, and LoadBalancer. \"ClusterIP\" allocates a cluster-internal IP address for load-balancing to endpoints. Endpoints are determined by the selector or if that is not specified, by manual construction of an Endpoints object or EndpointSlice objects. If clusterIP is \"None\", no virtual IP is allocated and the endpoints are published as a set of endpoints rather than a virtual IP. \"NodePort\" builds on ClusterIP and allocates a port on every node which routes to the same endpoints as the clusterIP. \"LoadBalancer\" builds on NodePort and creates an external load-balancer (if supported in the current cloud) which routes to the same endpoints as the clusterIP. \"ExternalName\" aliases this service to the specified externalName. Several other fields do not apply to ExternalName services. More info: https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types"
        }, 
        "ports": {
          "description": "The list of ports that are exposed by this service. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies", 
          "x-kubernetes-list-map-keys": [
            "port", 
            "protocol"
          ], 
          "x-kubernetes-patch-merge-key": "port", 
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.ServicePort"
          }, 
          "type": "array", 
          "x-kubernetes-list-type": "map", 
          "x-kubernetes-patch-strategy": "merge"
        }
      }
    }, 
    "io.k8s.api.batch.v1.JobStatus": {
      "type": "object", 
      "description": "JobStatus represents the current state of a Job.", 
      "properties": {
        "succeeded": {
          "type": "integer", 
          "description": "The number of pods which reached phase Succeeded. The value increases monotonically for a given spec. However, it may decrease in reaction to scale down of elastic indexed jobs.", 
          "format": "int32"
        }, 
        "conditions": {
          "description": "The latest available observations of an object's current state. When a Job fails, one of the conditions will have type \"Failed\" and status true. When a Job is suspended, one of the conditions will have type \"Suspended\" and status true; when the Job is resumed, the status of this condition will become false. When a Job is completed, one of the conditions will have type \"Complete\" and status true.\n\nA job is considered finished when it is in a terminal condition, either \"Complete\" or \"Failed\". A Job cannot have both the \"Complete\" and \"Failed\" conditions. Additionally, it cannot be in the \"Complete\" and \"FailureTarget\" conditions. The \"Complete\", \"Failed\" and \"FailureTarget\" conditions cannot be disabled.\n\nMore info: https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/", 
          "x-kubernetes-patch-merge-key": "type", 
          "items": {
            "$ref": "#/definitions/io.k8s.api.batch.v1.JobCondition"
          }, 
          "type": "array", 
          "x-kubernetes-patch-strategy": "merge", 
          "x-kubernetes-list-type": "atomic"
        }, 
        "completedIndexes": {
          "type": "string", 
          "description": "completedIndexes holds the completed indexes when .spec.completionMode = \"Indexed\" in a text format. The indexes are represented as decimal integers separated by commas. The numbers are listed in increasing order. Three or more consecutive numbers are compressed and represented by the first and last element of the series, separated by a hyphen. For example, if the completed indexes are 1, 3, 4, 5 and 7, they are represented as \"1,3-5,7\"."
        }, 
        "terminating": {
          "type": "integer", 
          "description": "The number of pods which are terminating (in phase Pending or Running and have a deletionTimestamp).\n\nThis field is beta-level. The job controller populates the field when the feature gate JobPodReplacementPolicy is enabled (enabled by default).", 
          "format": "int32"
        }, 
        "failed": {
          "type": "integer", 
          "description": "The number of pods which reached phase Failed. The value increases monotonically.", 
          "format": "int32"
        }, 
        "completionTime": {
          "description": "Represents time when the job was completed. It is not guaranteed to be set in happens-before order across separate operations. It is represented in RFC3339 form and is in UTC. The completion time is set when the job finishes successfully, and only then. The value cannot be updated or removed. The value indicates the same or later point in time as the startTime field.", 
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
        }, 
        "failedIndexes": {
          "type": "string", 
          "description": "FailedIndexes holds the failed indexes when spec.backoffLimitPerIndex is set. The indexes are represented in the text format analogous as for the `completedIndexes` field, ie. they are kept as decimal integers separated by commas. The numbers are listed in increasing order. Three or more consecutive numbers are compressed and represented by the first and last element of the series, separated by a hyphen. For example, if the failed indexes are 1, 3, 4, 5 and 7, they are represented as \"1,3-5,7\". The set of failed indexes cannot overlap with the set of completed indexes."
        }, 
        "startTime": {
          "description": "Represents time when the job controller started processing a job. When a Job is created in the suspended state, this field is not set until the first time it is resumed. This field is reset every time a Job is resumed from suspension. It is represented in RFC3339 form and is in UTC.\n\nOnce set, the field can only be removed when the job is suspended. The field cannot be modified while the job is unsuspended or finished.", 
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
        }, 
        "ready": {
          "type": "integer", 
          "description": "The number of active pods which have a Ready condition and are not terminating (without a deletionTimestamp).", 
          "format": "int32"
        }, 
        "active": {
          "type": "integer", 
          "description": "The number of pending and running pods which are not terminating (without a deletionTimestamp). The value is zero for finished jobs.", 
          "format": "int32"
        }, 
        "uncountedTerminatedPods": {
          "description": "uncountedTerminatedPods holds the UIDs of Pods that have terminated but the job controller hasn't yet accounted for in the status counters.\n\nThe job controller creates pods with a finalizer. When a pod terminates (succeeded or failed), the controller does three steps to account for it in the job status:\n\n1. Add the pod UID to the arrays in this field. 2. Remove the pod finalizer. 3. Remove the pod UID from the arrays while increasing the corresponding\n    counter.\n\nOld jobs might not be tracked using this field, in which case the field remains null. The structure is empty for finished jobs.", 
          "$ref": "#/definitions/io.k8s.api.batch.v1.UncountedTerminatedPods"
        }
      }
    }, 
    "io.k8s.api.batch.v1.UncountedTerminatedPods": {
      "type": "object", 
      "description": "UncountedTerminatedPods holds UIDs of Pods that have terminated but haven't been accounted in Job status counters.", 
      "properties": {
        "failed": {
          "items": {
            "type": "string"
          }, 
          "type": "array", 
          "description": "failed holds UIDs of failed Pods.", 
          "x-kubernetes-list-type": "set"
        }, 
        "succeeded": {
          "items": {
            "type": "string"
          }, 
          "type": "array", 
          "description": "succeeded holds UIDs of succeeded Pods.", 
          "x-kubernetes-list-type": "set"
        }
      }
    }, 
    "io.k8s.api.core.v1.SeccompProfile": {
      "x-kubernetes-unions": [
        {
          "discriminator": "type", 
          "fields-to-discriminateBy": {
            "localhostProfile": "LocalhostProfile"
          }
        }
      ], 
      "required": [
        "type"
      ], 
      "type": "object", 
      "description": "SeccompProfile defines a pod/container's seccomp profile settings. Only one profile source may be set.", 
      "properties": {
        "localhostProfile": {
          "type": "string", 
          "description": "localhostProfile indicates a profile defined in a file on the node should be used. The profile must be preconfigured on the node to work. Must be a descending path, relative to the kubelet's configured seccomp profile location. Must be set if type is \"Localhost\". Must NOT be set for any other type."
        }, 
        "type": {
          "type": "string", 
          "description": "type indicates which kind of seccomp profile will be applied. Valid options are:\n\nLocalhost - a profile defined in a file on the node should be used. RuntimeDefault - the container runtime default profile should be used. Unconfined - no profile should be applied."
        }
      }
    }, 
    "io.k8s.apimachinery.pkg.apis.meta.v1.MicroTime": {
      "type": "string", 
      "description": "MicroTime is version of Time with microsecond level precision.", 
      "format": "date-time"
    }, 
    "io.k8s.api.core.v1.PodTemplateList": {
      "type": "object", 
      "required": [
        "items"
      ], 
      "x-kubernetes-group-version-kind": [
        {
          "kind": "PodTemplateList", 
          "version": "v1", 
          "group": ""
        }
      ], 
      "description": "PodTemplateList is a list of PodTemplates.", 
      "properties": {
        "items": {
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.PodTemplate"
          }, 
          "type": "array", 
          "description": "List of pod templates"
        }, 
        "kind": {
          "enum": [
            "PodTemplateList"
          ], 
          "type": "string", 
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
        }, 
        "apiVersion": {
          "type": "string", 
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources"
        }, 
        "metadata": {
          "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds", 
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      }
    }, 
    "io.k8s.api.admissionregistration.v1.ValidatingAdmissionPolicySpec": {
      "type": "object", 
      "description": "ValidatingAdmissionPolicySpec is the specification of the desired behavior of the AdmissionPolicy.", 
      "properties": {
        "failurePolicy": {
          "type": "string", 
          "description": "failurePolicy defines how to handle failures for the admission policy. Failures can occur from CEL expression parse errors, type check errors, runtime errors and invalid or mis-configured policy definitions or bindings.\n\nA policy is invalid if spec.paramKind refers to a non-existent Kind. A binding is invalid if spec.paramRef.name refers to a non-existent resource.\n\nfailurePolicy does not define how validations that evaluate to false are handled.\n\nWhen failurePolicy is set to Fail, ValidatingAdmissionPolicyBinding validationActions define how failures are enforced.\n\nAllowed values are Ignore or Fail. Defaults to Fail."
        }, 
        "auditAnnotations": {
          "items": {
            "$ref": "#/definitions/io.k8s.api.admissionregistration.v1.AuditAnnotation"
          }, 
          "type": "array", 
          "description": "auditAnnotations contains CEL expressions which are used to produce audit annotations for the audit event of the API request. validations and auditAnnotations may not both be empty; a least one of validations or auditAnnotations is required.", 
          "x-kubernetes-list-type": "atomic"
        }, 
        "variables": {
          "description": "Variables contain definitions of variables that can be used in composition of other expressions. Each variable is defined as a named CEL expression. The variables defined here will be available under `variables` in other expressions of the policy except MatchConditions because MatchConditions are evaluated before the rest of the policy.\n\nThe expression of a variable can refer to other variables defined earlier in the list but not those after. Thus, Variables must be sorted by the order of first appearance and acyclic.", 
          "x-kubernetes-list-map-keys": [
            "name"
          ], 
          "x-kubernetes-patch-merge-key": "name", 
          "items": {
            "$ref": "#/definitions/io.k8s.api.admissionregistration.v1.Variable"
          }, 
          "type": "array", 
          "x-kubernetes-list-type": "map", 
          "x-kubernetes-patch-strategy": "merge"
        }, 
        "validations": {
          "items": {
            "$ref": "#/definitions/io.k8s.api.admissionregistration.v1.Validation"
          }, 
          "type": "array", 
          "description": "Validations contain CEL expressions which is used to apply the validation. Validations and AuditAnnotations may not both be empty; a minimum of one Validations or AuditAnnotations is required.", 
          "x-kubernetes-list-type": "atomic"
        }, 
        "paramKind": {
          "description": "ParamKind specifies the kind of resources used to parameterize this policy. If absent, there are no parameters for this policy and the param CEL variable will not be provided to validation expressions. If ParamKind refers to a non-existent kind, this policy definition is mis-configured and the FailurePolicy is applied. If paramKind is specified but paramRef is unset in ValidatingAdmissionPolicyBinding, the params variable will be null.", 
          "$ref": "#/definitions/io.k8s.api.admissionregistration.v1.ParamKind"
        }, 
        "matchConstraints": {
          "description": "MatchConstraints specifies what resources this policy is designed to validate. The AdmissionPolicy cares about a request if it matches _all_ Constraints. However, in order to prevent clusters from being put into an unstable state that cannot be recovered from via the API ValidatingAdmissionPolicy cannot match ValidatingAdmissionPolicy and ValidatingAdmissionPolicyBinding. Required.", 
          "$ref": "#/definitions/io.k8s.api.admissionregistration.v1.MatchResources"
        }, 
        "matchConditions": {
          "description": "MatchConditions is a list of conditions that must be met for a request to be validated. Match conditions filter requests that have already been matched by the rules, namespaceSelector, and objectSelector. An empty list of matchConditions matches all requests. There are a maximum of 64 match conditions allowed.\n\nIf a parameter object is provided, it can be accessed via the `params` handle in the same manner as validation expressions.\n\nThe exact matching logic is (in order):\n  1. If ANY matchCondition evaluates to FALSE, the policy is skipped.\n  2. If ALL matchConditions evaluate to TRUE, the policy is evaluated.\n  3. If any matchCondition evaluates to an error (but none are FALSE):\n     - If failurePolicy=Fail, reject the request\n     - If failurePolicy=Ignore, the policy is skipped", 
          "x-kubernetes-list-map-keys": [
            "name"
          ], 
          "x-kubernetes-patch-merge-key": "name", 
          "items": {
            "$ref": "#/definitions/io.k8s.api.admissionregistration.v1.MatchCondition"
          }, 
          "type": "array", 
          "x-kubernetes-list-type": "map", 
          "x-kubernetes-patch-strategy": "merge"
        }
      }
    }, 
    "io.k8s.api.resource.v1beta1.ResourceSlice": {
      "type": "object", 
      "required": [
        "spec"
      ], 
      "x-kubernetes-group-version-kind": [
        {
          "kind": "ResourceSlice", 
          "version": "v1beta1", 
          "group": "resource.k8s.io"
        }
      ], 
      "description": "ResourceSlice represents one or more resources in a pool of similar resources, managed by a common driver. A pool may span more than one ResourceSlice, and exactly how many ResourceSlices comprise a pool is determined by the driver.\n\nAt the moment, the only supported resources are devices with attributes and capacities. Each device in a given pool, regardless of how many ResourceSlices, must have a unique name. The ResourceSlice in which a device gets published may change over time. The unique identifier for a device is the tuple <driver name>, <pool name>, <device name>.\n\nWhenever a driver needs to update a pool, it increments the pool.Spec.Pool.Generation number and updates all ResourceSlices with that new number and new resource definitions. A consumer must only use ResourceSlices with the highest generation number and ignore all others.\n\nWhen allocating all resources in a pool matching certain criteria or when looking for the best solution among several different alternatives, a consumer should check the number of ResourceSlices in a pool (included in each ResourceSlice) to determine whether its view of a pool is complete and if not, should wait until the driver has completed updating the pool.\n\nFor resources that are not local to a node, the node name is not set. Instead, the driver may use a node selector to specify where the devices are available.\n\nThis is an alpha type and requires enabling the DynamicResourceAllocation feature gate.", 
      "properties": {
        "kind": {
          "enum": [
            "ResourceSlice"
          ], 
          "type": "string", 
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
        }, 
        "spec": {
          "description": "Contains the information published by the driver.\n\nChanging the spec automatically increments the metadata.generation number.", 
          "$ref": "#/definitions/io.k8s.api.resource.v1beta1.ResourceSliceSpec"
        }, 
        "apiVersion": {
          "type": "string", 
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources"
        }, 
        "metadata": {
          "description": "Standard object metadata", 
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        }
      }
    }, 
    "io.k8s.api.core.v1.VolumeNodeAffinity": {
      "type": "object", 
      "description": "VolumeNodeAffinity defines constraints that limit what nodes this volume can be accessed from.", 
      "properties": {
        "required": {
          "description": "required specifies hard node constraints that must be met.", 
          "$ref": "#/definitions/io.k8s.api.core.v1.NodeSelector"
        }
      }
    }, 
    "io.k8s.api.admissionregistration.v1.Variable": {
      "type": "object", 
      "required": [
        "name", 
        "expression"
      ], 
      "x-kubernetes-map-type": "atomic", 
      "description": "Variable is the definition of a variable that is used for composition. A variable is defined as a named expression.", 
      "properties": {
        "expression": {
          "type": "string", 
          "description": "Expression is the expression that will be evaluated as the value of the variable. The CEL expression has access to the same identifiers as the CEL expressions in Validation."
        }, 
        "name": {
          "type": "string", 
          "description": "Name is the name of the variable. The name must be a valid CEL identifier and unique among all variables. The variable can be accessed in other expressions through `variables` For example, if name is \"foo\", the variable will be available as `variables.foo`"
        }
      }
    }, 
    "io.k8s.api.core.v1.SecretVolumeSource": {
      "type": "object", 
      "description": "Adapts a Secret into a volume.\n\nThe contents of the target Secret's Data field will be presented in a volume as files using the keys in the Data field as the file names. Secret volumes support ownership management and SELinux relabeling.", 
      "properties": {
        "items": {
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.KeyToPath"
          }, 
          "type": "array", 
          "description": "items If unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the Secret, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.", 
          "x-kubernetes-list-type": "atomic"
        }, 
        "optional": {
          "type": "boolean", 
          "description": "optional field specify whether the Secret or its keys must be defined"
        }, 
        "defaultMode": {
          "type": "integer", 
          "description": "defaultMode is Optional: mode bits used to set permissions on created files by default. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.", 
          "format": "int32"
        }, 
        "secretName": {
          "type": "string", 
          "description": "secretName is the name of the secret in the pod's namespace to use. More info: https://kubernetes.io/docs/concepts/storage/volumes#secret"
        }
      }
    }, 
    "io.k8s.api.apps.v1.DaemonSetUpdateStrategy": {
      "type": "object", 
      "description": "DaemonSetUpdateStrategy is a struct used to control the update strategy for a DaemonSet.", 
      "properties": {
        "rollingUpdate": {
          "description": "Rolling update config params. Present only if type = \"RollingUpdate\".", 
          "$ref": "#/definitions/io.k8s.api.apps.v1.RollingUpdateDaemonSet"
        }, 
        "type": {
          "type": "string", 
          "description": "Type of daemon set update. Can be \"RollingUpdate\" or \"OnDelete\". Default is RollingUpdate."
        }
      }
    }, 
    "io.k8s.api.resource.v1.ResourceClaimTemplateSpec": {
      "required": [
        "spec"
      ], 
      "type": "object", 
      "description": "ResourceClaimTemplateSpec contains the metadata and fields for a ResourceClaim.", 
      "properties": {
        "spec": {
          "description": "Spec for the ResourceClaim. The entire content is copied unchanged into the ResourceClaim that gets created from this template. The same fields as in a ResourceClaim are also valid here.", 
          "$ref": "#/definitions/io.k8s.api.resource.v1.ResourceClaimSpec"
        }, 
        "metadata": {
          "description": "ObjectMeta may contain labels and annotations that will be copied into the ResourceClaim when creating it. No other fields are allowed and will be rejected during validation.", 
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        }
      }
    }, 
    "io.k8s.api.core.v1.CSIVolumeSource": {
      "required": [
        "driver"
      ], 
      "type": "object", 
      "description": "Represents a source location of a volume to mount, managed by an external CSI driver", 
      "properties": {
        "driver": {
          "type": "string", 
          "description": "driver is the name of the CSI driver that handles this volume. Consult with your admin for the correct name as registered in the cluster."
        }, 
        "readOnly": {
          "type": "boolean", 
          "description": "readOnly specifies a read-only configuration for the volume. Defaults to false (read/write)."
        }, 
        "nodePublishSecretRef": {
          "description": "nodePublishSecretRef is a reference to the secret object containing sensitive information to pass to the CSI driver to complete the CSI NodePublishVolume and NodeUnpublishVolume calls. This field is optional, and  may be empty if no secret is required. If the secret object contains more than one secret, all secret references are passed.", 
          "$ref": "#/definitions/io.k8s.api.core.v1.LocalObjectReference"
        }, 
        "volumeAttributes": {
          "additionalProperties": {
            "type": "string"
          }, 
          "type": "object", 
          "description": "volumeAttributes stores driver-specific properties that are passed to the CSI driver. Consult your driver's documentation for supported values."
        }, 
        "fsType": {
          "type": "string", 
          "description": "fsType to mount. Ex. \"ext4\", \"xfs\", \"ntfs\". If not provided, the empty value is passed to the associated CSI driver which will determine the default filesystem to apply."
        }
      }
    }, 
    "io.k8s.api.apps.v1.Deployment": {
      "type": "object", 
      "x-kubernetes-group-version-kind": [
        {
          "kind": "Deployment", 
          "version": "v1", 
          "group": "apps"
        }
      ], 
      "description": "Deployment enables declarative updates for Pods and ReplicaSets.", 
      "properties": {
        "status": {
          "description": "Most recently observed status of the Deployment.", 
          "$ref": "#/definitions/io.k8s.api.apps.v1.DeploymentStatus"
        }, 
        "kind": {
          "enum": [
            "Deployment"
          ], 
          "type": "string", 
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
        }, 
        "spec": {
          "description": "Specification of the desired behavior of the Deployment.", 
          "$ref": "#/definitions/io.k8s.api.apps.v1.DeploymentSpec"
        }, 
        "apiVersion": {
          "type": "string", 
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources"
        }, 
        "metadata": {
          "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata", 
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        }
      }
    }, 
    "io.k8s.api.core.v1.PortworxVolumeSource": {
      "required": [
        "volumeID"
      ], 
      "type": "object", 
      "description": "PortworxVolumeSource represents a Portworx volume resource.", 
      "properties": {
        "readOnly": {
          "type": "boolean", 
          "description": "readOnly defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts."
        }, 
        "volumeID": {
          "type": "string", 
          "description": "volumeID uniquely identifies a Portworx volume"
        }, 
        "fsType": {
          "type": "string", 
          "description": "fSType represents the filesystem type to mount Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\". Implicitly inferred to be \"ext4\" if unspecified."
        }
      }
    }, 
    "io.k8s.api.core.v1.VolumeProjection": {
      "type": "object", 
      "description": "Projection that may be projected along with other supported volume types. Exactly one of these fields must be set.", 
      "properties": {
        "podCertificate": {
          "description": "Projects an auto-rotating credential bundle (private key and certificate chain) that the pod can use either as a TLS client or server.\n\nKubelet generates a private key and uses it to send a PodCertificateRequest to the named signer.  Once the signer approves the request and issues a certificate chain, Kubelet writes the key and certificate chain to the pod filesystem.  The pod does not start until certificates have been issued for each podCertificate projected volume source in its spec.\n\nKubelet will begin trying to rotate the certificate at the time indicated by the signer using the PodCertificateRequest.Status.BeginRefreshAt timestamp.\n\nKubelet can write a single file, indicated by the credentialBundlePath field, or separate files, indicated by the keyPath and certificateChainPath fields.\n\nThe credential bundle is a single file in PEM format.  The first PEM entry is the private key (in PKCS#8 format), and the remaining PEM entries are the certificate chain issued by the signer (typically, signers will return their certificate chain in leaf-to-root order).\n\nPrefer using the credential bundle format, since your application code can read it atomically.  If you use keyPath and certificateChainPath, your application must make two separate file reads. If these coincide with a certificate rotation, it is possible that the private key and leaf certificate you read may not correspond to each other.  Your application will need to check for this condition, and re-read until they are consistent.\n\nThe named signer controls chooses the format of the certificate it issues; consult the signer implementation's documentation to learn how to use the certificates it issues.", 
          "$ref": "#/definitions/io.k8s.api.core.v1.PodCertificateProjection"
        }, 
        "configMap": {
          "description": "configMap information about the configMap data to project", 
          "$ref": "#/definitions/io.k8s.api.core.v1.ConfigMapProjection"
        }, 
        "serviceAccountToken": {
          "description": "serviceAccountToken is information about the serviceAccountToken data to project", 
          "$ref": "#/definitions/io.k8s.api.core.v1.ServiceAccountTokenProjection"
        }, 
        "clusterTrustBundle": {
          "description": "ClusterTrustBundle allows a pod to access the `.spec.trustBundle` field of ClusterTrustBundle objects in an auto-updating file.\n\nAlpha, gated by the ClusterTrustBundleProjection feature gate.\n\nClusterTrustBundle objects can either be selected by name, or by the combination of signer name and a label selector.\n\nKubelet performs aggressive normalization of the PEM contents written into the pod filesystem.  Esoteric PEM features such as inter-block comments and block headers are stripped.  Certificates are deduplicated. The ordering of certificates within the file is arbitrary, and Kubelet may change the order over time.", 
          "$ref": "#/definitions/io.k8s.api.core.v1.ClusterTrustBundleProjection"
        }, 
        "secret": {
          "description": "secret information about the secret data to project", 
          "$ref": "#/definitions/io.k8s.api.core.v1.SecretProjection"
        }, 
        "downwardAPI": {
          "description": "downwardAPI information about the downwardAPI data to project", 
          "$ref": "#/definitions/io.k8s.api.core.v1.DownwardAPIProjection"
        }
      }
    }, 
    "io.k8s.api.resource.v1.CELDeviceSelector": {
      "required": [
        "expression"
      ], 
      "type": "object", 
      "description": "CELDeviceSelector contains a CEL expression for selecting a device.", 
      "properties": {
        "expression": {
          "type": "string", 
          "description": "Expression is a CEL expression which evaluates a single device. It must evaluate to true when the device under consideration satisfies the desired criteria, and false when it does not. Any other result is an error and causes allocation of devices to abort.\n\nThe expression's input is an object named \"device\", which carries the following properties:\n - driver (string): the name of the driver which defines this device.\n - attributes (map[string]object): the device's attributes, grouped by prefix\n   (e.g. device.attributes[\"dra.example.com\"] evaluates to an object with all\n   of the attributes which were prefixed by \"dra.example.com\".\n - capacity (map[string]object): the device's capacities, grouped by prefix.\n - allowMultipleAllocations (bool): the allowMultipleAllocations property of the device\n   (v1.34+ with the DRAConsumableCapacity feature enabled).\n\nExample: Consider a device with driver=\"dra.example.com\", which exposes two attributes named \"model\" and \"ext.example.com/family\" and which exposes one capacity named \"modules\". This input to this expression would have the following fields:\n\n    device.driver\n    device.attributes[\"dra.example.com\"].model\n    device.attributes[\"ext.example.com\"].family\n    device.capacity[\"dra.example.com\"].modules\n\nThe device.driver field can be used to check for a specific driver, either as a high-level precondition (i.e. you only want to consider devices from this driver) or as part of a multi-clause expression that is meant to consider devices from different drivers.\n\nThe value type of each attribute is defined by the device definition, and users who write these expressions must consult the documentation for their specific drivers. The value type of each capacity is Quantity.\n\nIf an unknown prefix is used as a lookup in either device.attributes or device.capacity, an empty map will be returned. Any reference to an unknown field will cause an evaluation error and allocation to abort.\n\nA robust expression should check for the existence of attributes before referencing them.\n\nFor ease of use, the cel.bind() function is enabled, and can be used to simplify expressions that access multiple attributes with the same domain. For example:\n\n    cel.bind(dra, device.attributes[\"dra.example.com\"], dra.someBool && dra.anotherBool)\n\nThe length of the expression must be smaller or equal to 10 Ki. The cost of evaluating it is also limited based on the estimated number of logical steps."
        }
      }
    }, 
    "io.k8s.api.coordination.v1.LeaseSpec": {
      "type": "object", 
      "description": "LeaseSpec is a specification of a Lease.", 
      "properties": {
        "renewTime": {
          "description": "renewTime is a time when the current holder of a lease has last updated the lease.", 
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.MicroTime"
        }, 
        "leaseTransitions": {
          "type": "integer", 
          "description": "leaseTransitions is the number of transitions of a lease between holders.", 
          "format": "int32"
        }, 
        "leaseDurationSeconds": {
          "type": "integer", 
          "description": "leaseDurationSeconds is a duration that candidates for a lease need to wait to force acquire it. This is measured against the time of last observed renewTime.", 
          "format": "int32"
        }, 
        "holderIdentity": {
          "type": "string", 
          "description": "holderIdentity contains the identity of the holder of a current lease. If Coordinated Leader Election is used, the holder identity must be equal to the elected LeaseCandidate.metadata.name field."
        }, 
        "acquireTime": {
          "description": "acquireTime is a time when the current lease was acquired.", 
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.MicroTime"
        }, 
        "preferredHolder": {
          "type": "string", 
          "description": "PreferredHolder signals to a lease holder that the lease has a more optimal holder and should be given up. This field can only be set if Strategy is also set."
        }, 
        "strategy": {
          "type": "string", 
          "description": "Strategy indicates the strategy for picking the leader for coordinated leader election. If the field is not specified, there is no active coordination for this lease. (Alpha) Using this field requires the CoordinatedLeaderElection feature gate to be enabled."
        }
      }
    }, 
    "io.k8s.api.apps.v1.DeploymentStrategy": {
      "type": "object", 
      "description": "DeploymentStrategy describes how to replace existing pods with new ones.", 
      "properties": {
        "rollingUpdate": {
          "description": "Rolling update config params. Present only if DeploymentStrategyType = RollingUpdate.", 
          "$ref": "#/definitions/io.k8s.api.apps.v1.RollingUpdateDeployment"
        }, 
        "type": {
          "type": "string", 
          "description": "Type of deployment. Can be \"Recreate\" or \"RollingUpdate\". Default is RollingUpdate."
        }
      }
    }, 
    "io.k8s.api.core.v1.TypedLocalObjectReference": {
      "type": "object", 
      "required": [
        "kind", 
        "name"
      ], 
      "x-kubernetes-map-type": "atomic", 
      "description": "TypedLocalObjectReference contains enough information to let you locate the typed referenced object inside the same namespace.", 
      "properties": {
        "apiGroup": {
          "type": "string", 
          "description": "APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required."
        }, 
        "kind": {
          "type": "string", 
          "description": "Kind is the type of resource being referenced"
        }, 
        "name": {
          "type": "string", 
          "description": "Name is the name of resource being referenced"
        }
      }
    }, 
    "io.k8s.api.core.v1.ServiceStatus": {
      "type": "object", 
      "description": "ServiceStatus represents the current status of a service.", 
      "properties": {
        "conditions": {
          "description": "Current service state", 
          "x-kubernetes-list-map-keys": [
            "type"
          ], 
          "x-kubernetes-patch-merge-key": "type", 
          "items": {
            "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Condition"
          }, 
          "type": "array", 
          "x-kubernetes-list-type": "map", 
          "x-kubernetes-patch-strategy": "merge"
        }, 
        "loadBalancer": {
          "description": "LoadBalancer contains the current status of the load-balancer, if one is present.", 
          "$ref": "#/definitions/io.k8s.api.core.v1.LoadBalancerStatus"
        }
      }
    }, 
    "io.k8s.api.storage.v1.VolumeAttachment": {
      "type": "object", 
      "required": [
        "spec"
      ], 
      "x-kubernetes-group-version-kind": [
        {
          "kind": "VolumeAttachment", 
          "version": "v1", 
          "group": "storage.k8s.io"
        }
      ], 
      "description": "VolumeAttachment captures the intent to attach or detach the specified volume to/from the specified node.\n\nVolumeAttachment objects are non-namespaced.", 
      "properties": {
        "status": {
          "description": "status represents status of the VolumeAttachment request. Populated by the entity completing the attach or detach operation, i.e. the external-attacher.", 
          "$ref": "#/definitions/io.k8s.api.storage.v1.VolumeAttachmentStatus"
        }, 
        "kind": {
          "enum": [
            "VolumeAttachment"
          ], 
          "type": "string", 
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
        }, 
        "spec": {
          "description": "spec represents specification of the desired attach/detach volume behavior. Populated by the Kubernetes system.", 
          "$ref": "#/definitions/io.k8s.api.storage.v1.VolumeAttachmentSpec"
        }, 
        "apiVersion": {
          "type": "string", 
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources"
        }, 
        "metadata": {
          "description": "Standard object metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata", 
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        }
      }
    }, 
    "io.k8s.api.networking.v1.Ingress": {
      "type": "object", 
      "x-kubernetes-group-version-kind": [
        {
          "kind": "Ingress", 
          "version": "v1", 
          "group": "networking.k8s.io"
        }
      ], 
      "description": "Ingress is a collection of rules that allow inbound connections to reach the endpoints defined by a backend. An Ingress can be configured to give services externally-reachable urls, load balance traffic, terminate SSL, offer name based virtual hosting etc.", 
      "properties": {
        "status": {
          "description": "status is the current state of the Ingress. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status", 
          "$ref": "#/definitions/io.k8s.api.networking.v1.IngressStatus"
        }, 
        "kind": {
          "enum": [
            "Ingress"
          ], 
          "type": "string", 
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
        }, 
        "spec": {
          "description": "spec is the desired state of the Ingress. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status", 
          "$ref": "#/definitions/io.k8s.api.networking.v1.IngressSpec"
        }, 
        "apiVersion": {
          "type": "string", 
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources"
        }, 
        "metadata": {
          "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata", 
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        }
      }
    }, 
    "io.k8s.api.apps.v1.StatefulSetCondition": {
      "required": [
        "type", 
        "status"
      ], 
      "type": "object", 
      "description": "StatefulSetCondition describes the state of a statefulset at a certain point.", 
      "properties": {
        "status": {
          "type": "string", 
          "description": "Status of the condition, one of True, False, Unknown."
        }, 
        "lastTransitionTime": {
          "description": "Last time the condition transitioned from one status to another.", 
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
        }, 
        "message": {
          "type": "string", 
          "description": "A human readable message indicating details about the transition."
        }, 
        "type": {
          "type": "string", 
          "description": "Type of statefulset condition."
        }, 
        "reason": {
          "type": "string", 
          "description": "The reason for the condition's last transition."
        }
      }
    }, 
    "io.k8s.api.admissionregistration.v1beta1.MutatingAdmissionPolicyBinding": {
      "type": "object", 
      "x-kubernetes-group-version-kind": [
        {
          "kind": "MutatingAdmissionPolicyBinding", 
          "version": "v1beta1", 
          "group": "admissionregistration.k8s.io"
        }
      ], 
      "description": "MutatingAdmissionPolicyBinding binds the MutatingAdmissionPolicy with parametrized resources. MutatingAdmissionPolicyBinding and the optional parameter resource together define how cluster administrators configure policies for clusters.\n\nFor a given admission request, each binding will cause its policy to be evaluated N times, where N is 1 for policies/bindings that don't use params, otherwise N is the number of parameters selected by the binding. Each evaluation is constrained by a [runtime cost budget](https://kubernetes.io/docs/reference/using-api/cel/#runtime-cost-budget).\n\nAdding/removing policies, bindings, or params can not affect whether a given (policy, binding, param) combination is within its own CEL budget.", 
      "properties": {
        "kind": {
          "enum": [
            "MutatingAdmissionPolicyBinding"
          ], 
          "type": "string", 
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
        }, 
        "spec": {
          "description": "Specification of the desired behavior of the MutatingAdmissionPolicyBinding.", 
          "$ref": "#/definitions/io.k8s.api.admissionregistration.v1beta1.MutatingAdmissionPolicyBindingSpec"
        }, 
        "apiVersion": {
          "type": "string", 
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources"
        }, 
        "metadata": {
          "description": "Standard object metadata; More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata.", 
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        }
      }
    }, 
    "io.k8s.kube-aggregator.pkg.apis.apiregistration.v1.APIServiceCondition": {
      "required": [
        "type", 
        "status"
      ], 
      "type": "object", 
      "description": "APIServiceCondition describes the state of an APIService at a particular point", 
      "properties": {
        "status": {
          "type": "string", 
          "description": "Status is the status of the condition. Can be True, False, Unknown."
        }, 
        "lastTransitionTime": {
          "description": "Last time the condition transitioned from one status to another.", 
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
        }, 
        "message": {
          "type": "string", 
          "description": "Human-readable message indicating details about last transition."
        }, 
        "type": {
          "type": "string", 
          "description": "Type is the type of the condition."
        }, 
        "reason": {
          "type": "string", 
          "description": "Unique, one-word, CamelCase reason for the condition's last transition."
        }
      }
    }, 
    "io.k8s.api.apps.v1.DaemonSetList": {
      "type": "object", 
      "required": [
        "items"
      ], 
      "x-kubernetes-group-version-kind": [
        {
          "kind": "DaemonSetList", 
          "version": "v1", 
          "group": "apps"
        }
      ], 
      "description": "DaemonSetList is a collection of daemon sets.", 
      "properties": {
        "items": {
          "items": {
            "$ref": "#/definitions/io.k8s.api.apps.v1.DaemonSet"
          }, 
          "type": "array", 
          "description": "A list of daemon sets."
        }, 
        "kind": {
          "enum": [
            "DaemonSetList"
          ], 
          "type": "string", 
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
        }, 
        "apiVersion": {
          "type": "string", 
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources"
        }, 
        "metadata": {
          "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata", 
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      }
    }, 
    "io.k8s.api.admissionregistration.v1.NamedRuleWithOperations": {
      "type": "object", 
      "x-kubernetes-map-type": "atomic", 
      "description": "NamedRuleWithOperations is a tuple of Operations and Resources with ResourceNames.", 
      "properties": {
        "operations": {
          "items": {
            "type": "string"
          }, 
          "type": "array", 
          "description": "Operations is the operations the admission hook cares about - CREATE, UPDATE, DELETE, CONNECT or * for all of those operations and any future admission operations that are added. If '*' is present, the length of the slice must be one. Required.", 
          "x-kubernetes-list-type": "atomic"
        }, 
        "resourceNames": {
          "items": {
            "type": "string"
          }, 
          "type": "array", 
          "description": "ResourceNames is an optional white list of names that the rule applies to.  An empty set means that everything is allowed.", 
          "x-kubernetes-list-type": "atomic"
        }, 
        "apiVersions": {
          "items": {
            "type": "string"
          }, 
          "type": "array", 
          "description": "APIVersions is the API versions the resources belong to. '*' is all versions. If '*' is present, the length of the slice must be one. Required.", 
          "x-kubernetes-list-type": "atomic"
        }, 
        "scope": {
          "type": "string", 
          "description": "scope specifies the scope of this rule. Valid values are \"Cluster\", \"Namespaced\", and \"*\" \"Cluster\" means that only cluster-scoped resources will match this rule. Namespace API objects are cluster-scoped. \"Namespaced\" means that only namespaced resources will match this rule. \"*\" means that there are no scope restrictions. Subresources match the scope of their parent resource. Default is \"*\"."
        }, 
        "apiGroups": {
          "items": {
            "type": "string"
          }, 
          "type": "array", 
          "description": "APIGroups is the API groups the resources belong to. '*' is all groups. If '*' is present, the length of the slice must be one. Required.", 
          "x-kubernetes-list-type": "atomic"
        }, 
        "resources": {
          "items": {
            "type": "string"
          }, 
          "type": "array", 
          "description": "Resources is a list of resources this rule applies to.\n\nFor example: 'pods' means pods. 'pods/log' means the log subresource of pods. '*' means all resources, but not subresources. 'pods/*' means all subresources of pods. '*/scale' means all scale subresources. '*/*' means all resources and their subresources.\n\nIf wildcard is present, the validation rule will ensure resources do not overlap with each other.\n\nDepending on the enclosing object, subresources might not be allowed. Required.", 
          "x-kubernetes-list-type": "atomic"
        }
      }
    }, 
    "io.k8s.api.resource.v1beta1.DeviceClassSpec": {
      "type": "object", 
      "description": "DeviceClassSpec is used in a [DeviceClass] to define what can be allocated and how to configure it.", 
      "properties": {
        "extendedResourceName": {
          "type": "string", 
          "description": "ExtendedResourceName is the extended resource name for the devices of this class. The devices of this class can be used to satisfy a pod's extended resource requests. It has the same format as the name of a pod's extended resource. It should be unique among all the device classes in a cluster. If two device classes have the same name, then the class created later is picked to satisfy a pod's extended resource requests. If two classes are created at the same time, then the name of the class lexicographically sorted first is picked.\n\nThis is an alpha field."
        }, 
        "config": {
          "items": {
            "$ref": "#/definitions/io.k8s.api.resource.v1beta1.DeviceClassConfiguration"
          }, 
          "type": "array", 
          "description": "Config defines configuration parameters that apply to each device that is claimed via this class. Some classses may potentially be satisfied by multiple drivers, so each instance of a vendor configuration applies to exactly one driver.\n\nThey are passed to the driver, but are not considered while allocating the claim.", 
          "x-kubernetes-list-type": "atomic"
        }, 
        "selectors": {
          "items": {
            "$ref": "#/definitions/io.k8s.api.resource.v1beta1.DeviceSelector"
          }, 
          "type": "array", 
          "description": "Each selector must be satisfied by a device which is claimed via this class.", 
          "x-kubernetes-list-type": "atomic"
        }
      }
    }, 
    "io.k8s.api.core.v1.NamespaceList": {
      "type": "object", 
      "required": [
        "items"
      ], 
      "x-kubernetes-group-version-kind": [
        {
          "kind": "NamespaceList", 
          "version": "v1", 
          "group": ""
        }
      ], 
      "description": "NamespaceList is a list of Namespaces.", 
      "properties": {
        "items": {
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.Namespace"
          }, 
          "type": "array", 
          "description": "Items is the list of Namespace objects in the list. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/"
        }, 
        "kind": {
          "enum": [
            "NamespaceList"
          ], 
          "type": "string", 
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
        }, 
        "apiVersion": {
          "type": "string", 
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources"
        }, 
        "metadata": {
          "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds", 
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      }
    }, 
    "io.k8s.api.resource.v1.ExactDeviceRequest": {
      "required": [
        "deviceClassName"
      ], 
      "type": "object", 
      "description": "ExactDeviceRequest is a request for one or more identical devices.", 
      "properties": {
        "count": {
          "type": "integer", 
          "description": "Count is used only when the count mode is \"ExactCount\". Must be greater than zero. If AllocationMode is ExactCount and this field is not specified, the default is one.", 
          "format": "int64"
        }, 
        "capacity": {
          "description": "Capacity define resource requirements against each capacity.\n\nIf this field is unset and the device supports multiple allocations, the default value will be applied to each capacity according to requestPolicy. For the capacity that has no requestPolicy, default is the full capacity value.\n\nApplies to each device allocation. If Count > 1, the request fails if there aren't enough devices that meet the requirements. If AllocationMode is set to All, the request fails if there are devices that otherwise match the request, and have this capacity, with a value >= the requested amount, but which cannot be allocated to this request.", 
          "$ref": "#/definitions/io.k8s.api.resource.v1.CapacityRequirements"
        }, 
        "tolerations": {
          "items": {
            "$ref": "#/definitions/io.k8s.api.resource.v1.DeviceToleration"
          }, 
          "type": "array", 
          "description": "If specified, the request's tolerations.\n\nTolerations for NoSchedule are required to allocate a device which has a taint with that effect. The same applies to NoExecute.\n\nIn addition, should any of the allocated devices get tainted with NoExecute after allocation and that effect is not tolerated, then all pods consuming the ResourceClaim get deleted to evict them. The scheduler will not let new pods reserve the claim while it has these tainted devices. Once all pods are evicted, the claim will get deallocated.\n\nThe maximum number of tolerations is 16.\n\nThis is an alpha field and requires enabling the DRADeviceTaints feature gate.", 
          "x-kubernetes-list-type": "atomic"
        }, 
        "deviceClassName": {
          "type": "string", 
          "description": "DeviceClassName references a specific DeviceClass, which can define additional configuration and selectors to be inherited by this request.\n\nA DeviceClassName is required.\n\nAdministrators may use this to restrict which devices may get requested by only installing classes with selectors for permitted devices. If users are free to request anything without restrictions, then administrators can create an empty DeviceClass for users to reference."
        }, 
        "allocationMode": {
          "type": "string", 
          "description": "AllocationMode and its related fields define how devices are allocated to satisfy this request. Supported values are:\n\n- ExactCount: This request is for a specific number of devices.\n  This is the default. The exact number is provided in the\n  count field.\n\n- All: This request is for all of the matching devices in a pool.\n  At least one device must exist on the node for the allocation to succeed.\n  Allocation will fail if some devices are already allocated,\n  unless adminAccess is requested.\n\nIf AllocationMode is not specified, the default mode is ExactCount. If the mode is ExactCount and count is not specified, the default count is one. Any other requests must specify this field.\n\nMore modes may get added in the future. Clients must refuse to handle requests with unknown modes."
        }, 
        "adminAccess": {
          "type": "boolean", 
          "description": "AdminAccess indicates that this is a claim for administrative access to the device(s). Claims with AdminAccess are expected to be used for monitoring or other management services for a device.  They ignore all ordinary claims to the device with respect to access modes and any resource allocations.\n\nThis is an alpha field and requires enabling the DRAAdminAccess feature gate. Admin access is disabled if this field is unset or set to false, otherwise it is enabled."
        }, 
        "selectors": {
          "items": {
            "$ref": "#/definitions/io.k8s.api.resource.v1.DeviceSelector"
          }, 
          "type": "array", 
          "description": "Selectors define criteria which must be satisfied by a specific device in order for that device to be considered for this request. All selectors must be satisfied for a device to be considered.", 
          "x-kubernetes-list-type": "atomic"
        }
      }
    }, 
    "io.k8s.api.core.v1.GitRepoVolumeSource": {
      "required": [
        "repository"
      ], 
      "type": "object", 
      "description": "Represents a volume that is populated with the contents of a git repository. Git repo volumes do not support ownership management. Git repo volumes support SELinux relabeling.\n\nDEPRECATED: GitRepo is deprecated. To provision a container with a git repo, mount an EmptyDir into an InitContainer that clones the repo using git, then mount the EmptyDir into the Pod's container.", 
      "properties": {
        "directory": {
          "type": "string", 
          "description": "directory is the target directory name. Must not contain or start with '..'.  If '.' is supplied, the volume directory will be the git repository.  Otherwise, if specified, the volume will contain the git repository in the subdirectory with the given name."
        }, 
        "repository": {
          "type": "string", 
          "description": "repository is the URL"
        }, 
        "revision": {
          "type": "string", 
          "description": "revision is the commit hash for the specified revision."
        }
      }
    }, 
    "io.k8s.api.core.v1.CephFSPersistentVolumeSource": {
      "required": [
        "monitors"
      ], 
      "type": "object", 
      "description": "Represents a Ceph Filesystem mount that lasts the lifetime of a pod Cephfs volumes do not support ownership management or SELinux relabeling.", 
      "properties": {
        "secretRef": {
          "description": "secretRef is Optional: SecretRef is reference to the authentication secret for User, default is empty. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it", 
          "$ref": "#/definitions/io.k8s.api.core.v1.SecretReference"
        }, 
        "secretFile": {
          "type": "string", 
          "description": "secretFile is Optional: SecretFile is the path to key ring for User, default is /etc/ceph/user.secret More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it"
        }, 
        "user": {
          "type": "string", 
          "description": "user is Optional: User is the rados user name, default is admin More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it"
        }, 
        "path": {
          "type": "string", 
          "description": "path is Optional: Used as the mounted root, rather than the full Ceph tree, default is /"
        }, 
        "readOnly": {
          "type": "boolean", 
          "description": "readOnly is Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it"
        }, 
        "monitors": {
          "items": {
            "type": "string"
          }, 
          "type": "array", 
          "description": "monitors is Required: Monitors is a collection of Ceph monitors More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it", 
          "x-kubernetes-list-type": "atomic"
        }
      }
    }, 
    "io.k8s.api.networking.v1.IngressClass": {
      "type": "object", 
      "x-kubernetes-group-version-kind": [
        {
          "kind": "IngressClass", 
          "version": "v1", 
          "group": "networking.k8s.io"
        }
      ], 
      "description": "IngressClass represents the class of the Ingress, referenced by the Ingress Spec. The `ingressclass.kubernetes.io/is-default-class` annotation can be used to indicate that an IngressClass should be considered default. When a single IngressClass resource has this annotation set to true, new Ingress resources without a class specified will be assigned this default class.", 
      "properties": {
        "kind": {
          "enum": [
            "IngressClass"
          ], 
          "type": "string", 
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
        }, 
        "spec": {
          "description": "spec is the desired state of the IngressClass. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status", 
          "$ref": "#/definitions/io.k8s.api.networking.v1.IngressClassSpec"
        }, 
        "apiVersion": {
          "type": "string", 
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources"
        }, 
        "metadata": {
          "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata", 
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        }
      }
    }, 
    "io.k8s.api.resource.v1beta1.CapacityRequirements": {
      "type": "object", 
      "description": "CapacityRequirements defines the capacity requirements for a specific device request.", 
      "properties": {
        "requests": {
          "additionalProperties": {
            "$ref": "#/definitions/io.k8s.apimachinery.pkg.api.resource.Quantity"
          }, 
          "type": "object", 
          "description": "Requests represent individual device resource requests for distinct resources, all of which must be provided by the device.\n\nThis value is used as an additional filtering condition against the available capacity on the device. This is semantically equivalent to a CEL selector with `device.capacity[<domain>].<name>.compareTo(quantity(<request quantity>)) >= 0`. For example, device.capacity['test-driver.cdi.k8s.io'].counters.compareTo(quantity('2')) >= 0.\n\nWhen a requestPolicy is defined, the requested amount is adjusted upward to the nearest valid value based on the policy. If the requested amount cannot be adjusted to a valid value\u2014because it exceeds what the requestPolicy allows\u2014 the device is considered ineligible for allocation.\n\nFor any capacity that is not explicitly requested: - If no requestPolicy is set, the default consumed capacity is equal to the full device capacity\n  (i.e., the whole device is claimed).\n- If a requestPolicy is set, the default consumed capacity is determined according to that policy.\n\nIf the device allows multiple allocation, the aggregated amount across all requests must not exceed the capacity value. The consumed capacity, which may be adjusted based on the requestPolicy if defined, is recorded in the resource claim\u2019s status.devices[*].consumedCapacity field."
        }
      }
    }, 
    "io.k8s.api.resource.v1beta2.ResourceClaim": {
      "type": "object", 
      "required": [
        "spec"
      ], 
      "x-kubernetes-group-version-kind": [
        {
          "kind": "ResourceClaim", 
          "version": "v1beta2", 
          "group": "resource.k8s.io"
        }
      ], 
      "description": "ResourceClaim describes a request for access to resources in the cluster, for use by workloads. For example, if a workload needs an accelerator device with specific properties, this is how that request is expressed. The status stanza tracks whether this claim has been satisfied and what specific resources have been allocated.\n\nThis is an alpha type and requires enabling the DynamicResourceAllocation feature gate.", 
      "properties": {
        "status": {
          "description": "Status describes whether the claim is ready to use and what has been allocated.", 
          "$ref": "#/definitions/io.k8s.api.resource.v1beta2.ResourceClaimStatus"
        }, 
        "kind": {
          "enum": [
            "ResourceClaim"
          ], 
          "type": "string", 
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
        }, 
        "spec": {
          "description": "Spec describes what is being requested and how to configure it. The spec is immutable.", 
          "$ref": "#/definitions/io.k8s.api.resource.v1beta2.ResourceClaimSpec"
        }, 
        "apiVersion": {
          "type": "string", 
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources"
        }, 
        "metadata": {
          "description": "Standard object metadata", 
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        }
      }
    }, 
    "io.k8s.api.core.v1.EndpointPort": {
      "type": "object", 
      "required": [
        "port"
      ], 
      "x-kubernetes-map-type": "atomic", 
      "description": "EndpointPort is a tuple that describes a single port. Deprecated: This API is deprecated in v1.33+.", 
      "properties": {
        "protocol": {
          "type": "string", 
          "description": "The IP protocol for this port. Must be UDP, TCP, or SCTP. Default is TCP."
        }, 
        "name": {
          "type": "string", 
          "description": "The name of this port.  This must match the 'name' field in the corresponding ServicePort. Must be a DNS_LABEL. Optional only if one port is defined."
        }, 
        "appProtocol": {
          "type": "string", 
          "description": "The application protocol for this port. This is used as a hint for implementations to offer richer behavior for protocols that they understand. This field follows standard Kubernetes label syntax. Valid values are either:\n\n* Un-prefixed protocol names - reserved for IANA standard service names (as per RFC-6335 and https://www.iana.org/assignments/service-names).\n\n* Kubernetes-defined prefixed names:\n  * 'kubernetes.io/h2c' - HTTP/2 prior knowledge over cleartext as described in https://www.rfc-editor.org/rfc/rfc9113.html#name-starting-http-2-with-prior-\n  * 'kubernetes.io/ws'  - WebSocket over cleartext as described in https://www.rfc-editor.org/rfc/rfc6455\n  * 'kubernetes.io/wss' - WebSocket over TLS as described in https://www.rfc-editor.org/rfc/rfc6455\n\n* Other protocols should use implementation-defined prefixed names such as mycompany.com/my-custom-protocol."
        }, 
        "port": {
          "type": "integer", 
          "description": "The port number of the endpoint.", 
          "format": "int32"
        }
      }
    }, 
    "io.k8s.api.discovery.v1.Endpoint": {
      "required": [
        "addresses"
      ], 
      "type": "object", 
      "description": "Endpoint represents a single logical \"backend\" implementing a service.", 
      "properties": {
        "addresses": {
          "items": {
            "type": "string"
          }, 
          "type": "array", 
          "description": "addresses of this endpoint. For EndpointSlices of addressType \"IPv4\" or \"IPv6\", the values are IP addresses in canonical form. The syntax and semantics of other addressType values are not defined. This must contain at least one address but no more than 100. EndpointSlices generated by the EndpointSlice controller will always have exactly 1 address. No semantics are defined for additional addresses beyond the first, and kube-proxy does not look at them.", 
          "x-kubernetes-list-type": "set"
        }, 
        "nodeName": {
          "type": "string", 
          "description": "nodeName represents the name of the Node hosting this endpoint. This can be used to determine endpoints local to a Node."
        }, 
        "zone": {
          "type": "string", 
          "description": "zone is the name of the Zone this endpoint exists in."
        }, 
        "deprecatedTopology": {
          "additionalProperties": {
            "type": "string"
          }, 
          "type": "object", 
          "description": "deprecatedTopology contains topology information part of the v1beta1 API. This field is deprecated, and will be removed when the v1beta1 API is removed (no sooner than kubernetes v1.24).  While this field can hold values, it is not writable through the v1 API, and any attempts to write to it will be silently ignored. Topology information can be found in the zone and nodeName fields instead."
        }, 
        "hostname": {
          "type": "string", 
          "description": "hostname of this endpoint. This field may be used by consumers of endpoints to distinguish endpoints from each other (e.g. in DNS names). Multiple endpoints which use the same hostname should be considered fungible (e.g. multiple A values in DNS). Must be lowercase and pass DNS Label (RFC 1123) validation."
        }, 
        "targetRef": {
          "description": "targetRef is a reference to a Kubernetes object that represents this endpoint.", 
          "$ref": "#/definitions/io.k8s.api.core.v1.ObjectReference"
        }, 
        "conditions": {
          "description": "conditions contains information about the current status of the endpoint.", 
          "$ref": "#/definitions/io.k8s.api.discovery.v1.EndpointConditions"
        }, 
        "hints": {
          "description": "hints contains information associated with how an endpoint should be consumed.", 
          "$ref": "#/definitions/io.k8s.api.discovery.v1.EndpointHints"
        }
      }
    }, 
    "io.k8s.api.authorization.v1.ResourceAttributes": {
      "type": "object", 
      "description": "ResourceAttributes includes the authorization attributes available for resource requests to the Authorizer interface", 
      "properties": {
        "resource": {
          "type": "string", 
          "description": "Resource is one of the existing resource types.  \"*\" means all."
        }, 
        "name": {
          "type": "string", 
          "description": "Name is the name of the resource being requested for a \"get\" or deleted for a \"delete\". \"\" (empty) means all."
        }, 
        "labelSelector": {
          "description": "labelSelector describes the limitation on access based on labels.  It can only limit access, not broaden it.", 
          "$ref": "#/definitions/io.k8s.api.authorization.v1.LabelSelectorAttributes"
        }, 
        "namespace": {
          "type": "string", 
          "description": "Namespace is the namespace of the action being requested.  Currently, there is no distinction between no namespace and all namespaces \"\" (empty) is defaulted for LocalSubjectAccessReviews \"\" (empty) is empty for cluster-scoped resources \"\" (empty) means \"all\" for namespace scoped resources from a SubjectAccessReview or SelfSubjectAccessReview"
        }, 
        "verb": {
          "type": "string", 
          "description": "Verb is a kubernetes resource API verb, like: get, list, watch, create, update, delete, proxy.  \"*\" means all."
        }, 
        "version": {
          "type": "string", 
          "description": "Version is the API Version of the Resource.  \"*\" means all."
        }, 
        "group": {
          "type": "string", 
          "description": "Group is the API Group of the Resource.  \"*\" means all."
        }, 
        "fieldSelector": {
          "description": "fieldSelector describes the limitation on access based on field.  It can only limit access, not broaden it.", 
          "$ref": "#/definitions/io.k8s.api.authorization.v1.FieldSelectorAttributes"
        }, 
        "subresource": {
          "type": "string", 
          "description": "Subresource is one of the existing resource types.  \"\" means none."
        }
      }
    }, 
    "io.k8s.api.admissionregistration.v1.WebhookClientConfig": {
      "type": "object", 
      "description": "WebhookClientConfig contains the information to make a TLS connection with the webhook", 
      "properties": {
        "caBundle": {
          "type": "string", 
          "description": "`caBundle` is a PEM encoded CA bundle which will be used to validate the webhook's server certificate. If unspecified, system trust roots on the apiserver are used.", 
          "format": "byte"
        }, 
        "url": {
          "type": "string", 
          "description": "`url` gives the location of the webhook, in standard URL form (`scheme://host:port/path`). Exactly one of `url` or `service` must be specified.\n\nThe `host` should not refer to a service running in the cluster; use the `service` field instead. The host might be resolved via external DNS in some apiservers (e.g., `kube-apiserver` cannot resolve in-cluster DNS as that would be a layering violation). `host` may also be an IP address.\n\nPlease note that using `localhost` or `127.0.0.1` as a `host` is risky unless you take great care to run this webhook on all hosts which run an apiserver which might need to make calls to this webhook. Such installs are likely to be non-portable, i.e., not easy to turn up in a new cluster.\n\nThe scheme must be \"https\"; the URL must begin with \"https://\".\n\nA path is optional, and if present may be any string permissible in a URL. You may use the path to pass an arbitrary string to the webhook, for example, a cluster identifier.\n\nAttempting to use a user or basic auth e.g. \"user:password@\" is not allowed. Fragments (\"#...\") and query parameters (\"?...\") are not allowed, either."
        }, 
        "service": {
          "description": "`service` is a reference to the service for this webhook. Either `service` or `url` must be specified.\n\nIf the webhook is running within the cluster, then you should use `service`.", 
          "$ref": "#/definitions/io.k8s.api.admissionregistration.v1.ServiceReference"
        }
      }
    }, 
    "io.k8s.api.resource.v1beta1.DeviceClassConfiguration": {
      "type": "object", 
      "description": "DeviceClassConfiguration is used in DeviceClass.", 
      "properties": {
        "opaque": {
          "description": "Opaque provides driver-specific configuration parameters.", 
          "$ref": "#/definitions/io.k8s.api.resource.v1beta1.OpaqueDeviceConfiguration"
        }
      }
    }, 
    "io.k8s.api.resource.v1.DeviceTaint": {
      "required": [
        "key", 
        "effect"
      ], 
      "type": "object", 
      "description": "The device this taint is attached to has the \"effect\" on any claim which does not tolerate the taint and, through the claim, to pods using the claim.", 
      "properties": {
        "key": {
          "type": "string", 
          "description": "The taint key to be applied to a device. Must be a label name."
        }, 
        "timeAdded": {
          "description": "TimeAdded represents the time at which the taint was added. Added automatically during create or update if not set.", 
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
        }, 
        "effect": {
          "type": "string", 
          "description": "The effect of the taint on claims that do not tolerate the taint and through such claims on the pods using them. Valid effects are NoSchedule and NoExecute. PreferNoSchedule as used for nodes is not valid here."
        }, 
        "value": {
          "type": "string", 
          "description": "The taint value corresponding to the taint key. Must be a label value."
        }
      }
    }, 
    "io.k8s.api.node.v1.Overhead": {
      "type": "object", 
      "description": "Overhead structure represents the resource overhead associated with running a pod.", 
      "properties": {
        "podFixed": {
          "additionalProperties": {
            "$ref": "#/definitions/io.k8s.apimachinery.pkg.api.resource.Quantity"
          }, 
          "type": "object", 
          "description": "podFixed represents the fixed resource overhead associated with running a pod."
        }
      }
    }, 
    "io.k8s.api.core.v1.Node": {
      "type": "object", 
      "x-kubernetes-group-version-kind": [
        {
          "kind": "Node", 
          "version": "v1", 
          "group": ""
        }
      ], 
      "description": "Node is a worker node in Kubernetes. Each node will have a unique identifier in the cache (i.e. in etcd).", 
      "properties": {
        "status": {
          "description": "Most recently observed status of the node. Populated by the system. Read-only. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status", 
          "$ref": "#/definitions/io.k8s.api.core.v1.NodeStatus"
        }, 
        "kind": {
          "enum": [
            "Node"
          ], 
          "type": "string", 
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
        }, 
        "spec": {
          "description": "Spec defines the behavior of a node. https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status", 
          "$ref": "#/definitions/io.k8s.api.core.v1.NodeSpec"
        }, 
        "apiVersion": {
          "type": "string", 
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources"
        }, 
        "metadata": {
          "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata", 
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        }
      }
    }, 
    "io.k8s.api.admissionregistration.v1alpha1.MutatingAdmissionPolicySpec": {
      "type": "object", 
      "description": "MutatingAdmissionPolicySpec is the specification of the desired behavior of the admission policy.", 
      "properties": {
        "reinvocationPolicy": {
          "type": "string", 
          "description": "reinvocationPolicy indicates whether mutations may be called multiple times per MutatingAdmissionPolicyBinding as part of a single admission evaluation. Allowed values are \"Never\" and \"IfNeeded\".\n\nNever: These mutations will not be called more than once per binding in a single admission evaluation.\n\nIfNeeded: These mutations may be invoked more than once per binding for a single admission request and there is no guarantee of order with respect to other admission plugins, admission webhooks, bindings of this policy and admission policies.  Mutations are only reinvoked when mutations change the object after this mutation is invoked. Required."
        }, 
        "failurePolicy": {
          "type": "string", 
          "description": "failurePolicy defines how to handle failures for the admission policy. Failures can occur from CEL expression parse errors, type check errors, runtime errors and invalid or mis-configured policy definitions or bindings.\n\nA policy is invalid if paramKind refers to a non-existent Kind. A binding is invalid if paramRef.name refers to a non-existent resource.\n\nfailurePolicy does not define how validations that evaluate to false are handled.\n\nAllowed values are Ignore or Fail. Defaults to Fail."
        }, 
        "variables": {
          "items": {
            "$ref": "#/definitions/io.k8s.api.admissionregistration.v1alpha1.Variable"
          }, 
          "type": "array", 
          "description": "variables contain definitions of variables that can be used in composition of other expressions. Each variable is defined as a named CEL expression. The variables defined here will be available under `variables` in other expressions of the policy except matchConditions because matchConditions are evaluated before the rest of the policy.\n\nThe expression of a variable can refer to other variables defined earlier in the list but not those after. Thus, variables must be sorted by the order of first appearance and acyclic.", 
          "x-kubernetes-list-type": "atomic"
        }, 
        "paramKind": {
          "description": "paramKind specifies the kind of resources used to parameterize this policy. If absent, there are no parameters for this policy and the param CEL variable will not be provided to validation expressions. If paramKind refers to a non-existent kind, this policy definition is mis-configured and the FailurePolicy is applied. If paramKind is specified but paramRef is unset in MutatingAdmissionPolicyBinding, the params variable will be null.", 
          "$ref": "#/definitions/io.k8s.api.admissionregistration.v1alpha1.ParamKind"
        }, 
        "mutations": {
          "items": {
            "$ref": "#/definitions/io.k8s.api.admissionregistration.v1alpha1.Mutation"
          }, 
          "type": "array", 
          "description": "mutations contain operations to perform on matching objects. mutations may not be empty; a minimum of one mutation is required. mutations are evaluated in order, and are reinvoked according to the reinvocationPolicy. The mutations of a policy are invoked for each binding of this policy and reinvocation of mutations occurs on a per binding basis.", 
          "x-kubernetes-list-type": "atomic"
        }, 
        "matchConditions": {
          "description": "matchConditions is a list of conditions that must be met for a request to be validated. Match conditions filter requests that have already been matched by the matchConstraints. An empty list of matchConditions matches all requests. There are a maximum of 64 match conditions allowed.\n\nIf a parameter object is provided, it can be accessed via the `params` handle in the same manner as validation expressions.\n\nThe exact matching logic is (in order):\n  1. If ANY matchCondition evaluates to FALSE, the policy is skipped.\n  2. If ALL matchConditions evaluate to TRUE, the policy is evaluated.\n  3. If any matchCondition evaluates to an error (but none are FALSE):\n     - If failurePolicy=Fail, reject the request\n     - If failurePolicy=Ignore, the policy is skipped", 
          "x-kubernetes-list-map-keys": [
            "name"
          ], 
          "x-kubernetes-patch-merge-key": "name", 
          "items": {
            "$ref": "#/definitions/io.k8s.api.admissionregistration.v1alpha1.MatchCondition"
          }, 
          "type": "array", 
          "x-kubernetes-list-type": "map", 
          "x-kubernetes-patch-strategy": "merge"
        }, 
        "matchConstraints": {
          "description": "matchConstraints specifies what resources this policy is designed to validate. The MutatingAdmissionPolicy cares about a request if it matches _all_ Constraints. However, in order to prevent clusters from being put into an unstable state that cannot be recovered from via the API MutatingAdmissionPolicy cannot match MutatingAdmissionPolicy and MutatingAdmissionPolicyBinding. The CREATE, UPDATE and CONNECT operations are allowed.  The DELETE operation may not be matched. '*' matches CREATE, UPDATE and CONNECT. Required.", 
          "$ref": "#/definitions/io.k8s.api.admissionregistration.v1alpha1.MatchResources"
        }
      }
    }, 
    "io.k8s.api.batch.v1.CronJobSpec": {
      "required": [
        "schedule", 
        "jobTemplate"
      ], 
      "type": "object", 
      "description": "CronJobSpec describes how the job execution will look like and when it will actually run.", 
      "properties": {
        "failedJobsHistoryLimit": {
          "type": "integer", 
          "description": "The number of failed finished jobs to retain. Value must be non-negative integer. Defaults to 1.", 
          "format": "int32"
        }, 
        "concurrencyPolicy": {
          "type": "string", 
          "description": "Specifies how to treat concurrent executions of a Job. Valid values are:\n\n- \"Allow\" (default): allows CronJobs to run concurrently; - \"Forbid\": forbids concurrent runs, skipping next run if previous run hasn't finished yet; - \"Replace\": cancels currently running job and replaces it with a new one"
        }, 
        "suspend": {
          "type": "boolean", 
          "description": "This flag tells the controller to suspend subsequent executions, it does not apply to already started executions.  Defaults to false."
        }, 
        "schedule": {
          "type": "string", 
          "description": "The schedule in Cron format, see https://en.wikipedia.org/wiki/Cron."
        }, 
        "startingDeadlineSeconds": {
          "type": "integer", 
          "description": "Optional deadline in seconds for starting the job if it misses scheduled time for any reason.  Missed jobs executions will be counted as failed ones.", 
          "format": "int64"
        }, 
        "successfulJobsHistoryLimit": {
          "type": "integer", 
          "description": "The number of successful finished jobs to retain. Value must be non-negative integer. Defaults to 3.", 
          "format": "int32"
        }, 
        "jobTemplate": {
          "description": "Specifies the job that will be created when executing a CronJob.", 
          "$ref": "#/definitions/io.k8s.api.batch.v1.JobTemplateSpec"
        }, 
        "timeZone": {
          "type": "string", 
          "description": "The time zone name for the given schedule, see https://en.wikipedia.org/wiki/List_of_tz_database_time_zones. If not specified, this will default to the time zone of the kube-controller-manager process. The set of valid time zone names and the time zone offset is loaded from the system-wide time zone database by the API server during CronJob validation and the controller manager during execution. If no system-wide time zone database can be found a bundled version of the database is used instead. If the time zone name becomes invalid during the lifetime of a CronJob or due to a change in host configuration, the controller will stop creating new new Jobs and will create a system event with the reason UnknownTimeZone. More information can be found in https://kubernetes.io/docs/concepts/workloads/controllers/cron-jobs/#time-zones"
        }
      }
    }, 
    "io.k8s.api.apiserverinternal.v1alpha1.StorageVersionList": {
      "type": "object", 
      "required": [
        "items"
      ], 
      "x-kubernetes-group-version-kind": [
        {
          "kind": "StorageVersionList", 
          "version": "v1alpha1", 
          "group": "internal.apiserver.k8s.io"
        }
      ], 
      "description": "A list of StorageVersions.", 
      "properties": {
        "items": {
          "items": {
            "$ref": "#/definitions/io.k8s.api.apiserverinternal.v1alpha1.StorageVersion"
          }, 
          "type": "array", 
          "description": "Items holds a list of StorageVersion"
        }, 
        "kind": {
          "enum": [
            "StorageVersionList"
          ], 
          "type": "string", 
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
        }, 
        "apiVersion": {
          "type": "string", 
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources"
        }, 
        "metadata": {
          "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata", 
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      }
    }, 
    "io.k8s.api.resource.v1beta2.DeviceTaint": {
      "required": [
        "key", 
        "effect"
      ], 
      "type": "object", 
      "description": "The device this taint is attached to has the \"effect\" on any claim which does not tolerate the taint and, through the claim, to pods using the claim.", 
      "properties": {
        "key": {
          "type": "string", 
          "description": "The taint key to be applied to a device. Must be a label name."
        }, 
        "timeAdded": {
          "description": "TimeAdded represents the time at which the taint was added. Added automatically during create or update if not set.", 
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
        }, 
        "effect": {
          "type": "string", 
          "description": "The effect of the taint on claims that do not tolerate the taint and through such claims on the pods using them. Valid effects are NoSchedule and NoExecute. PreferNoSchedule as used for nodes is not valid here."
        }, 
        "value": {
          "type": "string", 
          "description": "The taint value corresponding to the taint key. Must be a label value."
        }
      }
    }, 
    "io.k8s.api.core.v1.EventSource": {
      "type": "object", 
      "description": "EventSource contains information for an event.", 
      "properties": {
        "host": {
          "type": "string", 
          "description": "Node name on which the event is generated."
        }, 
        "component": {
          "type": "string", 
          "description": "Component from which the event is generated."
        }
      }
    }, 
    "io.k8s.api.resource.v1beta2.DeviceClaimConfiguration": {
      "type": "object", 
      "description": "DeviceClaimConfiguration is used for configuration parameters in DeviceClaim.", 
      "properties": {
        "requests": {
          "items": {
            "type": "string"
          }, 
          "type": "array", 
          "description": "Requests lists the names of requests where the configuration applies. If empty, it applies to all requests.\n\nReferences to subrequests must include the name of the main request and may include the subrequest using the format <main request>[/<subrequest>]. If just the main request is given, the configuration applies to all subrequests.", 
          "x-kubernetes-list-type": "atomic"
        }, 
        "opaque": {
          "description": "Opaque provides driver-specific configuration parameters.", 
          "$ref": "#/definitions/io.k8s.api.resource.v1beta2.OpaqueDeviceConfiguration"
        }
      }
    }, 
    "io.k8s.api.coordination.v1alpha2.LeaseCandidate": {
      "type": "object", 
      "x-kubernetes-group-version-kind": [
        {
          "kind": "LeaseCandidate", 
          "version": "v1alpha2", 
          "group": "coordination.k8s.io"
        }
      ], 
      "description": "LeaseCandidate defines a candidate for a Lease object. Candidates are created such that coordinated leader election will pick the best leader from the list of candidates.", 
      "properties": {
        "kind": {
          "enum": [
            "LeaseCandidate"
          ], 
          "type": "string", 
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
        }, 
        "spec": {
          "description": "spec contains the specification of the Lease. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status", 
          "$ref": "#/definitions/io.k8s.api.coordination.v1alpha2.LeaseCandidateSpec"
        }, 
        "apiVersion": {
          "type": "string", 
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources"
        }, 
        "metadata": {
          "description": "More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata", 
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        }
      }
    }, 
    "io.k8s.api.autoscaling.v2.CrossVersionObjectReference": {
      "required": [
        "kind", 
        "name"
      ], 
      "type": "object", 
      "description": "CrossVersionObjectReference contains enough information to let you identify the referred resource.", 
      "properties": {
        "kind": {
          "type": "string", 
          "description": "kind is the kind of the referent; More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
        }, 
        "name": {
          "type": "string", 
          "description": "name is the name of the referent; More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"
        }, 
        "apiVersion": {
          "type": "string", 
          "description": "apiVersion is the API version of the referent"
        }
      }
    }, 
    "io.k8s.api.networking.v1.NetworkPolicy": {
      "type": "object", 
      "x-kubernetes-group-version-kind": [
        {
          "kind": "NetworkPolicy", 
          "version": "v1", 
          "group": "networking.k8s.io"
        }
      ], 
      "description": "NetworkPolicy describes what network traffic is allowed for a set of Pods", 
      "properties": {
        "kind": {
          "enum": [
            "NetworkPolicy"
          ], 
          "type": "string", 
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
        }, 
        "spec": {
          "description": "spec represents the specification of the desired behavior for this NetworkPolicy.", 
          "$ref": "#/definitions/io.k8s.api.networking.v1.NetworkPolicySpec"
        }, 
        "apiVersion": {
          "type": "string", 
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources"
        }, 
        "metadata": {
          "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata", 
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        }
      }
    }, 
    "io.k8s.api.core.v1.ResourceQuota": {
      "type": "object", 
      "x-kubernetes-group-version-kind": [
        {
          "kind": "ResourceQuota", 
          "version": "v1", 
          "group": ""
        }
      ], 
      "description": "ResourceQuota sets aggregate quota restrictions enforced per namespace", 
      "properties": {
        "status": {
          "description": "Status defines the actual enforced quota and its current usage. https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status", 
          "$ref": "#/definitions/io.k8s.api.core.v1.ResourceQuotaStatus"
        }, 
        "kind": {
          "enum": [
            "ResourceQuota"
          ], 
          "type": "string", 
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
        }, 
        "spec": {
          "description": "Spec defines the desired quota. https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status", 
          "$ref": "#/definitions/io.k8s.api.core.v1.ResourceQuotaSpec"
        }, 
        "apiVersion": {
          "type": "string", 
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources"
        }, 
        "metadata": {
          "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata", 
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        }
      }
    }, 
    "io.k8s.api.core.v1.Lifecycle": {
      "type": "object", 
      "description": "Lifecycle describes actions that the management system should take in response to container lifecycle events. For the PostStart and PreStop lifecycle handlers, management of the container blocks until the action is complete, unless the container process fails, in which case the handler is aborted.", 
      "properties": {
        "preStop": {
          "description": "PreStop is called immediately before a container is terminated due to an API request or management event such as liveness/startup probe failure, preemption, resource contention, etc. The handler is not called if the container crashes or exits. The Pod's termination grace period countdown begins before the PreStop hook is executed. Regardless of the outcome of the handler, the container will eventually terminate within the Pod's termination grace period (unless delayed by finalizers). Other management of the container blocks until the hook completes or until the termination grace period is reached. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks", 
          "$ref": "#/definitions/io.k8s.api.core.v1.LifecycleHandler"
        }, 
        "stopSignal": {
          "type": "string", 
          "description": "StopSignal defines which signal will be sent to a container when it is being stopped. If not specified, the default is defined by the container runtime in use. StopSignal can only be set for Pods with a non-empty .spec.os.name"
        }, 
        "postStart": {
          "description": "PostStart is called immediately after a container is created. If the handler fails, the container is terminated and restarted according to its restart policy. Other management of the container blocks until the hook completes. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks", 
          "$ref": "#/definitions/io.k8s.api.core.v1.LifecycleHandler"
        }
      }
    }, 
    "io.k8s.api.resource.v1.Device": {
      "required": [
        "name"
      ], 
      "type": "object", 
      "description": "Device represents one individual hardware instance that can be selected based on its attributes. Besides the name, exactly one field must be set.", 
      "properties": {
        "consumesCounters": {
          "items": {
            "$ref": "#/definitions/io.k8s.api.resource.v1.DeviceCounterConsumption"
          }, 
          "type": "array", 
          "description": "ConsumesCounters defines a list of references to sharedCounters and the set of counters that the device will consume from those counter sets.\n\nThere can only be a single entry per counterSet.\n\nThe total number of device counter consumption entries must be <= 32. In addition, the total number in the entire ResourceSlice must be <= 1024 (for example, 64 devices with 16 counters each).", 
          "x-kubernetes-list-type": "atomic"
        }, 
        "capacity": {
          "additionalProperties": {
            "$ref": "#/definitions/io.k8s.api.resource.v1.DeviceCapacity"
          }, 
          "type": "object", 
          "description": "Capacity defines the set of capacities for this device. The name of each capacity must be unique in that set.\n\nThe maximum number of attributes and capacities combined is 32."
        }, 
        "bindingFailureConditions": {
          "items": {
            "type": "string"
          }, 
          "type": "array", 
          "description": "BindingFailureConditions defines the conditions for binding failure. They may be set in the per-device status conditions. If any is set to \"True\", a binding failure occurred.\n\nThe maximum number of binding failure conditions is 4.\n\nThe conditions must be a valid condition type string.\n\nThis is an alpha field and requires enabling the DRADeviceBindingConditions and DRAResourceClaimDeviceStatus feature gates.", 
          "x-kubernetes-list-type": "atomic"
        }, 
        "name": {
          "type": "string", 
          "description": "Name is unique identifier among all devices managed by the driver in the pool. It must be a DNS label."
        }, 
        "allNodes": {
          "type": "boolean", 
          "description": "AllNodes indicates that all nodes have access to the device.\n\nMust only be set if Spec.PerDeviceNodeSelection is set to true. At most one of NodeName, NodeSelector and AllNodes can be set."
        }, 
        "allowMultipleAllocations": {
          "type": "boolean", 
          "description": "AllowMultipleAllocations marks whether the device is allowed to be allocated to multiple DeviceRequests.\n\nIf AllowMultipleAllocations is set to true, the device can be allocated more than once, and all of its capacity is consumable, regardless of whether the requestPolicy is defined or not."
        }, 
        "taints": {
          "items": {
            "$ref": "#/definitions/io.k8s.api.resource.v1.DeviceTaint"
          }, 
          "type": "array", 
          "description": "If specified, these are the driver-defined taints.\n\nThe maximum number of taints is 4.\n\nThis is an alpha field and requires enabling the DRADeviceTaints feature gate.", 
          "x-kubernetes-list-type": "atomic"
        }, 
        "nodeSelector": {
          "description": "NodeSelector defines the nodes where the device is available.\n\nMust use exactly one term.\n\nMust only be set if Spec.PerDeviceNodeSelection is set to true. At most one of NodeName, NodeSelector and AllNodes can be set.", 
          "$ref": "#/definitions/io.k8s.api.core.v1.NodeSelector"
        }, 
        "bindingConditions": {
          "items": {
            "type": "string"
          }, 
          "type": "array", 
          "description": "BindingConditions defines the conditions for proceeding with binding. All of these conditions must be set in the per-device status conditions with a value of True to proceed with binding the pod to the node while scheduling the pod.\n\nThe maximum number of binding conditions is 4.\n\nThe conditions must be a valid condition type string.\n\nThis is an alpha field and requires enabling the DRADeviceBindingConditions and DRAResourceClaimDeviceStatus feature gates.", 
          "x-kubernetes-list-type": "atomic"
        }, 
        "attributes": {
          "additionalProperties": {
            "$ref": "#/definitions/io.k8s.api.resource.v1.DeviceAttribute"
          }, 
          "type": "object", 
          "description": "Attributes defines the set of attributes for this device. The name of each attribute must be unique in that set.\n\nThe maximum number of attributes and capacities combined is 32."
        }, 
        "bindsToNode": {
          "type": "boolean", 
          "description": "BindsToNode indicates if the usage of an allocation involving this device has to be limited to exactly the node that was chosen when allocating the claim. If set to true, the scheduler will set the ResourceClaim.Status.Allocation.NodeSelector to match the node where the allocation was made.\n\nThis is an alpha field and requires enabling the DRADeviceBindingConditions and DRAResourceClaimDeviceStatus feature gates."
        }, 
        "nodeName": {
          "type": "string", 
          "description": "NodeName identifies the node where the device is available.\n\nMust only be set if Spec.PerDeviceNodeSelection is set to true. At most one of NodeName, NodeSelector and AllNodes can be set."
        }
      }
    }, 
    "io.k8s.api.resource.v1beta1.DeviceToleration": {
      "type": "object", 
      "description": "The ResourceClaim this DeviceToleration is attached to tolerates any taint that matches the triple <key,value,effect> using the matching operator <operator>.", 
      "properties": {
        "operator": {
          "type": "string", 
          "description": "Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a ResourceClaim can tolerate all taints of a particular category."
        }, 
        "key": {
          "type": "string", 
          "description": "Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys. Must be a label name."
        }, 
        "tolerationSeconds": {
          "type": "integer", 
          "description": "TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system. If larger than zero, the time when the pod needs to be evicted is calculated as <time when taint was adedd> + <toleration seconds>.", 
          "format": "int64"
        }, 
        "effect": {
          "type": "string", 
          "description": "Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule and NoExecute."
        }, 
        "value": {
          "type": "string", 
          "description": "Value is the taint value the toleration matches to. If the operator is Exists, the value must be empty, otherwise just a regular string. Must be a label value."
        }
      }
    }, 
    "io.k8s.api.core.v1.ResourceQuotaList": {
      "type": "object", 
      "required": [
        "items"
      ], 
      "x-kubernetes-group-version-kind": [
        {
          "kind": "ResourceQuotaList", 
          "version": "v1", 
          "group": ""
        }
      ], 
      "description": "ResourceQuotaList is a list of ResourceQuota items.", 
      "properties": {
        "items": {
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.ResourceQuota"
          }, 
          "type": "array", 
          "description": "Items is a list of ResourceQuota objects. More info: https://kubernetes.io/docs/concepts/policy/resource-quotas/"
        }, 
        "kind": {
          "enum": [
            "ResourceQuotaList"
          ], 
          "type": "string", 
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
        }, 
        "apiVersion": {
          "type": "string", 
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources"
        }, 
        "metadata": {
          "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds", 
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      }
    }, 
    "io.k8s.api.core.v1.HostPathVolumeSource": {
      "required": [
        "path"
      ], 
      "type": "object", 
      "description": "Represents a host path mapped into a pod. Host path volumes do not support ownership management or SELinux relabeling.", 
      "properties": {
        "path": {
          "type": "string", 
          "description": "path of the directory on the host. If the path is a symlink, it will follow the link to the real path. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath"
        }, 
        "type": {
          "type": "string", 
          "description": "type for HostPath Volume Defaults to \"\" More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath"
        }
      }
    }, 
    "io.k8s.api.core.v1.ContainerExtendedResourceRequest": {
      "required": [
        "containerName", 
        "resourceName", 
        "requestName"
      ], 
      "type": "object", 
      "description": "ContainerExtendedResourceRequest has the mapping of container name, extended resource name to the device request name.", 
      "properties": {
        "containerName": {
          "type": "string", 
          "description": "The name of the container requesting resources."
        }, 
        "requestName": {
          "type": "string", 
          "description": "The name of the request in the special ResourceClaim which corresponds to the extended resource."
        }, 
        "resourceName": {
          "type": "string", 
          "description": "The name of the extended resource in that container which gets backed by DRA."
        }
      }
    }, 
    "io.k8s.api.admissionregistration.v1beta1.ApplyConfiguration": {
      "type": "object", 
      "description": "ApplyConfiguration defines the desired configuration values of an object.", 
      "properties": {
        "expression": {
          "type": "string", 
          "description": "expression will be evaluated by CEL to create an apply configuration. ref: https://github.com/google/cel-spec\n\nApply configurations are declared in CEL using object initialization. For example, this CEL expression returns an apply configuration to set a single field:\n\n\tObject{\n\t  spec: Object.spec{\n\t    serviceAccountName: \"example\"\n\t  }\n\t}\n\nApply configurations may not modify atomic structs, maps or arrays due to the risk of accidental deletion of values not included in the apply configuration.\n\nCEL expressions have access to the object types needed to create apply configurations:\n\n- 'Object' - CEL type of the resource object. - 'Object.<fieldName>' - CEL type of object field (such as 'Object.spec') - 'Object.<fieldName1>.<fieldName2>...<fieldNameN>` - CEL type of nested field (such as 'Object.spec.containers')\n\nCEL expressions have access to the contents of the API request, organized into CEL variables as well as some other useful variables:\n\n- 'object' - The object from the incoming request. The value is null for DELETE requests. - 'oldObject' - The existing object. The value is null for CREATE requests. - 'request' - Attributes of the API request([ref](/pkg/apis/admission/types.go#AdmissionRequest)). - 'params' - Parameter resource referred to by the policy binding being evaluated. Only populated if the policy has a ParamKind. - 'namespaceObject' - The namespace object that the incoming object belongs to. The value is null for cluster-scoped resources. - 'variables' - Map of composited variables, from its name to its lazily evaluated value.\n  For example, a variable named 'foo' can be accessed as 'variables.foo'.\n- 'authorizer' - A CEL Authorizer. May be used to perform authorization checks for the principal (user or service account) of the request.\n  See https://pkg.go.dev/k8s.io/apiserver/pkg/cel/library#Authz\n- 'authorizer.requestResource' - A CEL ResourceCheck constructed from the 'authorizer' and configured with the\n  request resource.\n\nThe `apiVersion`, `kind`, `metadata.name` and `metadata.generateName` are always accessible from the root of the object. No other metadata properties are accessible.\n\nOnly property names of the form `[a-zA-Z_.-/][a-zA-Z0-9_.-/]*` are accessible. Required."
        }
      }
    }, 
    "io.k8s.api.autoscaling.v2.ContainerResourceMetricStatus": {
      "required": [
        "name", 
        "current", 
        "container"
      ], 
      "type": "object", 
      "description": "ContainerResourceMetricStatus indicates the current value of a resource metric known to Kubernetes, as specified in requests and limits, describing a single container in each pod in the current scale target (e.g. CPU or memory).  Such metrics are built in to Kubernetes, and have special scaling options on top of those available to normal per-pod metrics using the \"pods\" source.", 
      "properties": {
        "current": {
          "description": "current contains the current value for the given metric", 
          "$ref": "#/definitions/io.k8s.api.autoscaling.v2.MetricValueStatus"
        }, 
        "container": {
          "type": "string", 
          "description": "container is the name of the container in the pods of the scaling target"
        }, 
        "name": {
          "type": "string", 
          "description": "name is the name of the resource in question."
        }
      }
    }, 
    "io.k8s.api.storage.v1.StorageClass": {
      "type": "object", 
      "required": [
        "provisioner"
      ], 
      "x-kubernetes-group-version-kind": [
        {
          "kind": "StorageClass", 
          "version": "v1", 
          "group": "storage.k8s.io"
        }
      ], 
      "description": "StorageClass describes the parameters for a class of storage for which PersistentVolumes can be dynamically provisioned.\n\nStorageClasses are non-namespaced; the name of the storage class according to etcd is in ObjectMeta.Name.", 
      "properties": {
        "allowedTopologies": {
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.TopologySelectorTerm"
          }, 
          "type": "array", 
          "description": "allowedTopologies restrict the node topologies where volumes can be dynamically provisioned. Each volume plugin defines its own supported topology specifications. An empty TopologySelectorTerm list means there is no topology restriction. This field is only honored by servers that enable the VolumeScheduling feature.", 
          "x-kubernetes-list-type": "atomic"
        }, 
        "parameters": {
          "additionalProperties": {
            "type": "string"
          }, 
          "type": "object", 
          "description": "parameters holds the parameters for the provisioner that should create volumes of this storage class."
        }, 
        "kind": {
          "enum": [
            "StorageClass"
          ], 
          "type": "string", 
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
        }, 
        "apiVersion": {
          "type": "string", 
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources"
        }, 
        "reclaimPolicy": {
          "type": "string", 
          "description": "reclaimPolicy controls the reclaimPolicy for dynamically provisioned PersistentVolumes of this storage class. Defaults to Delete."
        }, 
        "mountOptions": {
          "items": {
            "type": "string"
          }, 
          "type": "array", 
          "description": "mountOptions controls the mountOptions for dynamically provisioned PersistentVolumes of this storage class. e.g. [\"ro\", \"soft\"]. Not validated - mount of the PVs will simply fail if one is invalid.", 
          "x-kubernetes-list-type": "atomic"
        }, 
        "provisioner": {
          "type": "string", 
          "description": "provisioner indicates the type of the provisioner."
        }, 
        "allowVolumeExpansion": {
          "type": "boolean", 
          "description": "allowVolumeExpansion shows whether the storage class allow volume expand."
        }, 
        "volumeBindingMode": {
          "type": "string", 
          "description": "volumeBindingMode indicates how PersistentVolumeClaims should be provisioned and bound.  When unset, VolumeBindingImmediate is used. This field is only honored by servers that enable the VolumeScheduling feature."
        }, 
        "metadata": {
          "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata", 
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        }
      }
    }, 
    "io.k8s.api.core.v1.TypedObjectReference": {
      "required": [
        "kind", 
        "name"
      ], 
      "type": "object", 
      "description": "TypedObjectReference contains enough information to let you locate the typed referenced object", 
      "properties": {
        "apiGroup": {
          "type": "string", 
          "description": "APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required."
        }, 
        "kind": {
          "type": "string", 
          "description": "Kind is the type of resource being referenced"
        }, 
        "namespace": {
          "type": "string", 
          "description": "Namespace is the namespace of resource being referenced Note that when a namespace is specified, a gateway.networking.k8s.io/ReferenceGrant object is required in the referent namespace to allow that namespace's owner to accept the reference. See the ReferenceGrant documentation for details. (Alpha) This field requires the CrossNamespaceVolumeDataSource feature gate to be enabled."
        }, 
        "name": {
          "type": "string", 
          "description": "Name is the name of resource being referenced"
        }
      }
    }, 
    "io.k8s.api.discovery.v1.ForZone": {
      "required": [
        "name"
      ], 
      "type": "object", 
      "description": "ForZone provides information about which zones should consume this endpoint.", 
      "properties": {
        "name": {
          "type": "string", 
          "description": "name represents the name of the zone."
        }
      }
    }, 
    "io.k8s.api.networking.v1.IPAddress": {
      "type": "object", 
      "x-kubernetes-group-version-kind": [
        {
          "kind": "IPAddress", 
          "version": "v1", 
          "group": "networking.k8s.io"
        }
      ], 
      "description": "IPAddress represents a single IP of a single IP Family. The object is designed to be used by APIs that operate on IP addresses. The object is used by the Service core API for allocation of IP addresses. An IP address can be represented in different formats, to guarantee the uniqueness of the IP, the name of the object is the IP address in canonical format, four decimal digits separated by dots suppressing leading zeros for IPv4 and the representation defined by RFC 5952 for IPv6. Valid: 192.168.1.5 or 2001:db8::1 or 2001:db8:aaaa:bbbb:cccc:dddd:eeee:1 Invalid: 10.01.2.3 or 2001:db8:0:0:0::1", 
      "properties": {
        "kind": {
          "enum": [
            "IPAddress"
          ], 
          "type": "string", 
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
        }, 
        "spec": {
          "description": "spec is the desired state of the IPAddress. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status", 
          "$ref": "#/definitions/io.k8s.api.networking.v1.IPAddressSpec"
        }, 
        "apiVersion": {
          "type": "string", 
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources"
        }, 
        "metadata": {
          "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata", 
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        }
      }
    }, 
    "io.k8s.api.networking.v1beta1.ParentReference": {
      "required": [
        "resource", 
        "name"
      ], 
      "type": "object", 
      "description": "ParentReference describes a reference to a parent object.", 
      "properties": {
        "namespace": {
          "type": "string", 
          "description": "Namespace is the namespace of the object being referenced."
        }, 
        "resource": {
          "type": "string", 
          "description": "Resource is the resource of the object being referenced."
        }, 
        "name": {
          "type": "string", 
          "description": "Name is the name of the object being referenced."
        }, 
        "group": {
          "type": "string", 
          "description": "Group is the group of the object being referenced."
        }
      }
    }, 
    "io.k8s.api.resource.v1beta2.NetworkDeviceData": {
      "type": "object", 
      "description": "NetworkDeviceData provides network-related details for the allocated device. This information may be filled by drivers or other components to configure or identify the device within a network context.", 
      "properties": {
        "ips": {
          "items": {
            "type": "string"
          }, 
          "type": "array", 
          "description": "IPs lists the network addresses assigned to the device's network interface. This can include both IPv4 and IPv6 addresses. The IPs are in the CIDR notation, which includes both the address and the associated subnet mask. e.g.: \"192.0.2.5/24\" for IPv4 and \"2001:db8::5/64\" for IPv6.", 
          "x-kubernetes-list-type": "atomic"
        }, 
        "interfaceName": {
          "type": "string", 
          "description": "InterfaceName specifies the name of the network interface associated with the allocated device. This might be the name of a physical or virtual network interface being configured in the pod.\n\nMust not be longer than 256 characters."
        }, 
        "hardwareAddress": {
          "type": "string", 
          "description": "HardwareAddress represents the hardware address (e.g. MAC Address) of the device's network interface.\n\nMust not be longer than 128 characters."
        }
      }
    }, 
    "io.k8s.api.resource.v1beta2.CELDeviceSelector": {
      "required": [
        "expression"
      ], 
      "type": "object", 
      "description": "CELDeviceSelector contains a CEL expression for selecting a device.", 
      "properties": {
        "expression": {
          "type": "string", 
          "description": "Expression is a CEL expression which evaluates a single device. It must evaluate to true when the device under consideration satisfies the desired criteria, and false when it does not. Any other result is an error and causes allocation of devices to abort.\n\nThe expression's input is an object named \"device\", which carries the following properties:\n - driver (string): the name of the driver which defines this device.\n - attributes (map[string]object): the device's attributes, grouped by prefix\n   (e.g. device.attributes[\"dra.example.com\"] evaluates to an object with all\n   of the attributes which were prefixed by \"dra.example.com\".\n - capacity (map[string]object): the device's capacities, grouped by prefix.\n - allowMultipleAllocations (bool): the allowMultipleAllocations property of the device\n   (v1.34+ with the DRAConsumableCapacity feature enabled).\n\nExample: Consider a device with driver=\"dra.example.com\", which exposes two attributes named \"model\" and \"ext.example.com/family\" and which exposes one capacity named \"modules\". This input to this expression would have the following fields:\n\n    device.driver\n    device.attributes[\"dra.example.com\"].model\n    device.attributes[\"ext.example.com\"].family\n    device.capacity[\"dra.example.com\"].modules\n\nThe device.driver field can be used to check for a specific driver, either as a high-level precondition (i.e. you only want to consider devices from this driver) or as part of a multi-clause expression that is meant to consider devices from different drivers.\n\nThe value type of each attribute is defined by the device definition, and users who write these expressions must consult the documentation for their specific drivers. The value type of each capacity is Quantity.\n\nIf an unknown prefix is used as a lookup in either device.attributes or device.capacity, an empty map will be returned. Any reference to an unknown field will cause an evaluation error and allocation to abort.\n\nA robust expression should check for the existence of attributes before referencing them.\n\nFor ease of use, the cel.bind() function is enabled, and can be used to simplify expressions that access multiple attributes with the same domain. For example:\n\n    cel.bind(dra, device.attributes[\"dra.example.com\"], dra.someBool && dra.anotherBool)\n\nThe length of the expression must be smaller or equal to 10 Ki. The cost of evaluating it is also limited based on the estimated number of logical steps."
        }
      }
    }, 
    "io.k8s.api.core.v1.NodeRuntimeHandler": {
      "type": "object", 
      "description": "NodeRuntimeHandler is a set of runtime handler information.", 
      "properties": {
        "features": {
          "description": "Supported features.", 
          "$ref": "#/definitions/io.k8s.api.core.v1.NodeRuntimeHandlerFeatures"
        }, 
        "name": {
          "type": "string", 
          "description": "Runtime handler name. Empty for the default runtime handler."
        }
      }
    }, 
    "io.k8s.api.core.v1.PodList": {
      "type": "object", 
      "required": [
        "items"
      ], 
      "x-kubernetes-group-version-kind": [
        {
          "kind": "PodList", 
          "version": "v1", 
          "group": ""
        }
      ], 
      "description": "PodList is a list of Pods.", 
      "properties": {
        "items": {
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.Pod"
          }, 
          "type": "array", 
          "description": "List of pods. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md"
        }, 
        "kind": {
          "enum": [
            "PodList"
          ], 
          "type": "string", 
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
        }, 
        "apiVersion": {
          "type": "string", 
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources"
        }, 
        "metadata": {
          "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds", 
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      }
    }, 
    "io.k8s.api.resource.v1beta1.AllocatedDeviceStatus": {
      "required": [
        "driver", 
        "pool", 
        "device"
      ], 
      "type": "object", 
      "description": "AllocatedDeviceStatus contains the status of an allocated device, if the driver chooses to report it. This may include driver-specific information.\n\nThe combination of Driver, Pool, Device, and ShareID must match the corresponding key in Status.Allocation.Devices.", 
      "properties": {
        "shareID": {
          "type": "string", 
          "description": "ShareID uniquely identifies an individual allocation share of the device."
        }, 
        "networkData": {
          "description": "NetworkData contains network-related information specific to the device.", 
          "$ref": "#/definitions/io.k8s.api.resource.v1beta1.NetworkDeviceData"
        }, 
        "device": {
          "type": "string", 
          "description": "Device references one device instance via its name in the driver's resource pool. It must be a DNS label."
        }, 
        "driver": {
          "type": "string", 
          "description": "Driver specifies the name of the DRA driver whose kubelet plugin should be invoked to process the allocation once the claim is needed on a node.\n\nMust be a DNS subdomain and should end with a DNS domain owned by the vendor of the driver."
        }, 
        "conditions": {
          "items": {
            "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Condition"
          }, 
          "type": "array", 
          "description": "Conditions contains the latest observation of the device's state. If the device has been configured according to the class and claim config references, the `Ready` condition should be True.\n\nMust not contain more than 8 entries.", 
          "x-kubernetes-list-map-keys": [
            "type"
          ], 
          "x-kubernetes-list-type": "map"
        }, 
        "pool": {
          "type": "string", 
          "description": "This name together with the driver name and the device name field identify which device was allocated (`<driver name>/<pool name>/<device name>`).\n\nMust not be longer than 253 characters and may contain one or more DNS sub-domains separated by slashes."
        }, 
        "data": {
          "description": "Data contains arbitrary driver-specific data.\n\nThe length of the raw data must be smaller or equal to 10 Ki.", 
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.runtime.RawExtension"
        }
      }
    }, 
    "io.k8s.api.networking.v1.ServiceCIDRList": {
      "type": "object", 
      "required": [
        "items"
      ], 
      "x-kubernetes-group-version-kind": [
        {
          "kind": "ServiceCIDRList", 
          "version": "v1", 
          "group": "networking.k8s.io"
        }
      ], 
      "description": "ServiceCIDRList contains a list of ServiceCIDR objects.", 
      "properties": {
        "items": {
          "items": {
            "$ref": "#/definitions/io.k8s.api.networking.v1.ServiceCIDR"
          }, 
          "type": "array", 
          "description": "items is the list of ServiceCIDRs."
        }, 
        "kind": {
          "enum": [
            "ServiceCIDRList"
          ], 
          "type": "string", 
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
        }, 
        "apiVersion": {
          "type": "string", 
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources"
        }, 
        "metadata": {
          "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata", 
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      }
    }, 
    "io.k8s.api.apps.v1.StatefulSetUpdateStrategy": {
      "type": "object", 
      "description": "StatefulSetUpdateStrategy indicates the strategy that the StatefulSet controller will use to perform updates. It includes any additional parameters necessary to perform the update for the indicated strategy.", 
      "properties": {
        "rollingUpdate": {
          "description": "RollingUpdate is used to communicate parameters when Type is RollingUpdateStatefulSetStrategyType.", 
          "$ref": "#/definitions/io.k8s.api.apps.v1.RollingUpdateStatefulSetStrategy"
        }, 
        "type": {
          "type": "string", 
          "description": "Type indicates the type of the StatefulSetUpdateStrategy. Default is RollingUpdate."
        }
      }
    }, 
    "io.k8s.api.certificates.v1alpha1.PodCertificateRequestSpec": {
      "required": [
        "signerName", 
        "podName", 
        "podUID", 
        "serviceAccountName", 
        "serviceAccountUID", 
        "nodeName", 
        "nodeUID", 
        "pkixPublicKey", 
        "proofOfPossession"
      ], 
      "type": "object", 
      "description": "PodCertificateRequestSpec describes the certificate request.  All fields are immutable after creation.", 
      "properties": {
        "signerName": {
          "type": "string", 
          "description": "signerName indicates the requested signer.\n\nAll signer names beginning with `kubernetes.io` are reserved for use by the Kubernetes project.  There is currently one well-known signer documented by the Kubernetes project, `kubernetes.io/kube-apiserver-client-pod`, which will issue client certificates understood by kube-apiserver.  It is currently unimplemented."
        }, 
        "proofOfPossession": {
          "type": "string", 
          "description": "proofOfPossession proves that the requesting kubelet holds the private key corresponding to pkixPublicKey.\n\nIt is contructed by signing the ASCII bytes of the pod's UID using `pkixPublicKey`.\n\nkube-apiserver validates the proof of possession during creation of the PodCertificateRequest.\n\nIf the key is an RSA key, then the signature is over the ASCII bytes of the pod UID, using RSASSA-PSS from RFC 8017 (as implemented by the golang function crypto/rsa.SignPSS with nil options).\n\nIf the key is an ECDSA key, then the signature is as described by [SEC 1, Version 2.0](https://www.secg.org/sec1-v2.pdf) (as implemented by the golang library function crypto/ecdsa.SignASN1)\n\nIf the key is an ED25519 key, the the signature is as described by the [ED25519 Specification](https://ed25519.cr.yp.to/) (as implemented by the golang library crypto/ed25519.Sign).", 
          "format": "byte"
        }, 
        "nodeUID": {
          "type": "string", 
          "description": "nodeUID is the UID of the node the pod is assigned to."
        }, 
        "maxExpirationSeconds": {
          "type": "integer", 
          "description": "maxExpirationSeconds is the maximum lifetime permitted for the certificate.\n\nIf omitted, kube-apiserver will set it to 86400(24 hours). kube-apiserver will reject values shorter than 3600 (1 hour).  The maximum allowable value is 7862400 (91 days).\n\nThe signer implementation is then free to issue a certificate with any lifetime *shorter* than MaxExpirationSeconds, but no shorter than 3600 seconds (1 hour).  This constraint is enforced by kube-apiserver. `kubernetes.io` signers will never issue certificates with a lifetime longer than 24 hours.", 
          "format": "int32"
        }, 
        "serviceAccountName": {
          "type": "string", 
          "description": "serviceAccountName is the name of the service account the pod is running as."
        }, 
        "serviceAccountUID": {
          "type": "string", 
          "description": "serviceAccountUID is the UID of the service account the pod is running as."
        }, 
        "podName": {
          "type": "string", 
          "description": "podName is the name of the pod into which the certificate will be mounted."
        }, 
        "podUID": {
          "type": "string", 
          "description": "podUID is the UID of the pod into which the certificate will be mounted."
        }, 
        "nodeName": {
          "type": "string", 
          "description": "nodeName is the name of the node the pod is assigned to."
        }, 
        "pkixPublicKey": {
          "type": "string", 
          "description": "pkixPublicKey is the PKIX-serialized public key the signer will issue the certificate to.\n\nThe key must be one of RSA3072, RSA4096, ECDSAP256, ECDSAP384, ECDSAP521, or ED25519. Note that this list may be expanded in the future.\n\nSigner implementations do not need to support all key types supported by kube-apiserver and kubelet.  If a signer does not support the key type used for a given PodCertificateRequest, it must deny the request by setting a status.conditions entry with a type of \"Denied\" and a reason of \"UnsupportedKeyType\". It may also suggest a key type that it does support in the message field.", 
          "format": "byte"
        }
      }
    }, 
    "io.k8s.api.policy.v1.PodDisruptionBudgetList": {
      "type": "object", 
      "required": [
        "items"
      ], 
      "x-kubernetes-group-version-kind": [
        {
          "kind": "PodDisruptionBudgetList", 
          "version": "v1", 
          "group": "policy"
        }
      ], 
      "description": "PodDisruptionBudgetList is a collection of PodDisruptionBudgets.", 
      "properties": {
        "items": {
          "items": {
            "$ref": "#/definitions/io.k8s.api.policy.v1.PodDisruptionBudget"
          }, 
          "type": "array", 
          "description": "Items is a list of PodDisruptionBudgets"
        }, 
        "kind": {
          "enum": [
            "PodDisruptionBudgetList"
          ], 
          "type": "string", 
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
        }, 
        "apiVersion": {
          "type": "string", 
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources"
        }, 
        "metadata": {
          "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata", 
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      }
    }, 
    "io.k8s.api.batch.v1.CronJobList": {
      "type": "object", 
      "required": [
        "items"
      ], 
      "x-kubernetes-group-version-kind": [
        {
          "kind": "CronJobList", 
          "version": "v1", 
          "group": "batch"
        }
      ], 
      "description": "CronJobList is a collection of cron jobs.", 
      "properties": {
        "items": {
          "items": {
            "$ref": "#/definitions/io.k8s.api.batch.v1.CronJob"
          }, 
          "type": "array", 
          "description": "items is the list of CronJobs."
        }, 
        "kind": {
          "enum": [
            "CronJobList"
          ], 
          "type": "string", 
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
        }, 
        "apiVersion": {
          "type": "string", 
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources"
        }, 
        "metadata": {
          "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata", 
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      }
    }, 
    "io.k8s.api.admissionregistration.v1alpha1.MutatingAdmissionPolicyList": {
      "type": "object", 
      "required": [
        "items"
      ], 
      "x-kubernetes-group-version-kind": [
        {
          "kind": "MutatingAdmissionPolicyList", 
          "version": "v1alpha1", 
          "group": "admissionregistration.k8s.io"
        }
      ], 
      "description": "MutatingAdmissionPolicyList is a list of MutatingAdmissionPolicy.", 
      "properties": {
        "items": {
          "items": {
            "$ref": "#/definitions/io.k8s.api.admissionregistration.v1alpha1.MutatingAdmissionPolicy"
          }, 
          "type": "array", 
          "description": "List of ValidatingAdmissionPolicy."
        }, 
        "kind": {
          "enum": [
            "MutatingAdmissionPolicyList"
          ], 
          "type": "string", 
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
        }, 
        "apiVersion": {
          "type": "string", 
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources"
        }, 
        "metadata": {
          "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds", 
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      }
    }, 
    "io.k8s.api.core.v1.NamespaceStatus": {
      "type": "object", 
      "description": "NamespaceStatus is information about the current status of a Namespace.", 
      "properties": {
        "phase": {
          "type": "string", 
          "description": "Phase is the current lifecycle phase of the namespace. More info: https://kubernetes.io/docs/tasks/administer-cluster/namespaces/"
        }, 
        "conditions": {
          "description": "Represents the latest available observations of a namespace's current state.", 
          "x-kubernetes-list-map-keys": [
            "type"
          ], 
          "x-kubernetes-patch-merge-key": "type", 
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.NamespaceCondition"
          }, 
          "type": "array", 
          "x-kubernetes-list-type": "map", 
          "x-kubernetes-patch-strategy": "merge"
        }
      }
    }, 
    "io.k8s.api.rbac.v1.ClusterRoleBinding": {
      "type": "object", 
      "required": [
        "roleRef"
      ], 
      "x-kubernetes-group-version-kind": [
        {
          "kind": "ClusterRoleBinding", 
          "version": "v1", 
          "group": "rbac.authorization.k8s.io"
        }
      ], 
      "description": "ClusterRoleBinding references a ClusterRole, but not contain it.  It can reference a ClusterRole in the global namespace, and adds who information via Subject.", 
      "properties": {
        "roleRef": {
          "description": "RoleRef can only reference a ClusterRole in the global namespace. If the RoleRef cannot be resolved, the Authorizer must return an error. This field is immutable.", 
          "$ref": "#/definitions/io.k8s.api.rbac.v1.RoleRef"
        }, 
        "kind": {
          "enum": [
            "ClusterRoleBinding"
          ], 
          "type": "string", 
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
        }, 
        "subjects": {
          "items": {
            "$ref": "#/definitions/io.k8s.api.rbac.v1.Subject"
          }, 
          "type": "array", 
          "description": "Subjects holds references to the objects the role applies to.", 
          "x-kubernetes-list-type": "atomic"
        }, 
        "apiVersion": {
          "type": "string", 
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources"
        }, 
        "metadata": {
          "description": "Standard object's metadata.", 
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        }
      }
    }, 
    "io.k8s.api.core.v1.ObjectFieldSelector": {
      "type": "object", 
      "required": [
        "fieldPath"
      ], 
      "x-kubernetes-map-type": "atomic", 
      "description": "ObjectFieldSelector selects an APIVersioned field of an object.", 
      "properties": {
        "fieldPath": {
          "type": "string", 
          "description": "Path of the field to select in the specified API version."
        }, 
        "apiVersion": {
          "type": "string", 
          "description": "Version of the schema the FieldPath is written in terms of, defaults to \"v1\"."
        }
      }
    }, 
    "io.k8s.api.core.v1.EventList": {
      "type": "object", 
      "required": [
        "items"
      ], 
      "x-kubernetes-group-version-kind": [
        {
          "kind": "EventList", 
          "version": "v1", 
          "group": ""
        }
      ], 
      "description": "EventList is a list of events.", 
      "properties": {
        "items": {
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.Event"
          }, 
          "type": "array", 
          "description": "List of events"
        }, 
        "kind": {
          "enum": [
            "EventList"
          ], 
          "type": "string", 
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
        }, 
        "apiVersion": {
          "type": "string", 
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources"
        }, 
        "metadata": {
          "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds", 
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      }
    }, 
    "io.k8s.api.networking.v1.NetworkPolicyPort": {
      "type": "object", 
      "description": "NetworkPolicyPort describes a port to allow traffic on", 
      "properties": {
        "protocol": {
          "type": "string", 
          "description": "protocol represents the protocol (TCP, UDP, or SCTP) which traffic must match. If not specified, this field defaults to TCP."
        }, 
        "endPort": {
          "type": "integer", 
          "description": "endPort indicates that the range of ports from port to endPort if set, inclusive, should be allowed by the policy. This field cannot be defined if the port field is not defined or if the port field is defined as a named (string) port. The endPort must be equal or greater than port.", 
          "format": "int32"
        }, 
        "port": {
          "description": "port represents the port on the given protocol. This can either be a numerical or named port on a pod. If this field is not provided, this matches all port names and numbers. If present, only traffic on the specified protocol AND port will be matched.", 
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.util.intstr.IntOrString"
        }
      }
    }, 
    "io.k8s.api.apps.v1.ControllerRevision": {
      "type": "object", 
      "required": [
        "revision"
      ], 
      "x-kubernetes-group-version-kind": [
        {
          "kind": "ControllerRevision", 
          "version": "v1", 
          "group": "apps"
        }
      ], 
      "description": "ControllerRevision implements an immutable snapshot of state data. Clients are responsible for serializing and deserializing the objects that contain their internal state. Once a ControllerRevision has been successfully created, it can not be updated. The API Server will fail validation of all requests that attempt to mutate the Data field. ControllerRevisions may, however, be deleted. Note that, due to its use by both the DaemonSet and StatefulSet controllers for update and rollback, this object is beta. However, it may be subject to name and representation changes in future releases, and clients should not depend on its stability. It is primarily for internal use by controllers.", 
      "properties": {
        "kind": {
          "enum": [
            "ControllerRevision"
          ], 
          "type": "string", 
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
        }, 
        "metadata": {
          "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata", 
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        }, 
        "data": {
          "description": "Data is the serialized representation of the state.", 
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.runtime.RawExtension"
        }, 
        "apiVersion": {
          "type": "string", 
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources"
        }, 
        "revision": {
          "type": "integer", 
          "description": "Revision indicates the revision of the state represented by Data.", 
          "format": "int64"
        }
      }
    }, 
    "io.k8s.api.core.v1.VolumeResourceRequirements": {
      "type": "object", 
      "description": "VolumeResourceRequirements describes the storage resource requirements for a volume.", 
      "properties": {
        "requests": {
          "additionalProperties": {
            "$ref": "#/definitions/io.k8s.apimachinery.pkg.api.resource.Quantity"
          }, 
          "type": "object", 
          "description": "Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. Requests cannot exceed Limits. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/"
        }, 
        "limits": {
          "additionalProperties": {
            "$ref": "#/definitions/io.k8s.apimachinery.pkg.api.resource.Quantity"
          }, 
          "type": "object", 
          "description": "Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/"
        }
      }
    }, 
    "io.k8s.api.batch.v1.Job": {
      "type": "object", 
      "x-kubernetes-group-version-kind": [
        {
          "kind": "Job", 
          "version": "v1", 
          "group": "batch"
        }
      ], 
      "description": "Job represents the configuration of a single job.", 
      "properties": {
        "status": {
          "description": "Current status of a job. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status", 
          "$ref": "#/definitions/io.k8s.api.batch.v1.JobStatus"
        }, 
        "kind": {
          "enum": [
            "Job"
          ], 
          "type": "string", 
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
        }, 
        "spec": {
          "description": "Specification of the desired behavior of a job. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status", 
          "$ref": "#/definitions/io.k8s.api.batch.v1.JobSpec"
        }, 
        "apiVersion": {
          "type": "string", 
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources"
        }, 
        "metadata": {
          "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata", 
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        }
      }
    }, 
    "io.k8s.api.core.v1.ISCSIVolumeSource": {
      "required": [
        "targetPortal", 
        "iqn", 
        "lun"
      ], 
      "type": "object", 
      "description": "Represents an ISCSI disk. ISCSI volumes can only be mounted as read/write once. ISCSI volumes support ownership management and SELinux relabeling.", 
      "properties": {
        "targetPortal": {
          "type": "string", 
          "description": "targetPortal is iSCSI Target Portal. The Portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260)."
        }, 
        "portals": {
          "items": {
            "type": "string"
          }, 
          "type": "array", 
          "description": "portals is the iSCSI Target Portal List. The portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).", 
          "x-kubernetes-list-type": "atomic"
        }, 
        "secretRef": {
          "description": "secretRef is the CHAP Secret for iSCSI target and initiator authentication", 
          "$ref": "#/definitions/io.k8s.api.core.v1.LocalObjectReference"
        }, 
        "fsType": {
          "type": "string", 
          "description": "fsType is the filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#iscsi"
        }, 
        "readOnly": {
          "type": "boolean", 
          "description": "readOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false."
        }, 
        "chapAuthSession": {
          "type": "boolean", 
          "description": "chapAuthSession defines whether support iSCSI Session CHAP authentication"
        }, 
        "initiatorName": {
          "type": "string", 
          "description": "initiatorName is the custom iSCSI Initiator Name. If initiatorName is specified with iscsiInterface simultaneously, new iSCSI interface <target portal>:<volume name> will be created for the connection."
        }, 
        "iscsiInterface": {
          "type": "string", 
          "description": "iscsiInterface is the interface Name that uses an iSCSI transport. Defaults to 'default' (tcp)."
        }, 
        "iqn": {
          "type": "string", 
          "description": "iqn is the target iSCSI Qualified Name."
        }, 
        "chapAuthDiscovery": {
          "type": "boolean", 
          "description": "chapAuthDiscovery defines whether support iSCSI Discovery CHAP authentication"
        }, 
        "lun": {
          "type": "integer", 
          "description": "lun represents iSCSI Target Lun number.", 
          "format": "int32"
        }
      }
    }, 
    "io.k8s.api.core.v1.ReplicationControllerCondition": {
      "required": [
        "type", 
        "status"
      ], 
      "type": "object", 
      "description": "ReplicationControllerCondition describes the state of a replication controller at a certain point.", 
      "properties": {
        "status": {
          "type": "string", 
          "description": "Status of the condition, one of True, False, Unknown."
        }, 
        "lastTransitionTime": {
          "description": "The last time the condition transitioned from one status to another.", 
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
        }, 
        "message": {
          "type": "string", 
          "description": "A human readable message indicating details about the transition."
        }, 
        "type": {
          "type": "string", 
          "description": "Type of replication controller condition."
        }, 
        "reason": {
          "type": "string", 
          "description": "The reason for the condition's last transition."
        }
      }
    }, 
    "io.k8s.api.batch.v1.CronJobStatus": {
      "type": "object", 
      "description": "CronJobStatus represents the current state of a cron job.", 
      "properties": {
        "active": {
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.ObjectReference"
          }, 
          "type": "array", 
          "description": "A list of pointers to currently running jobs.", 
          "x-kubernetes-list-type": "atomic"
        }, 
        "lastScheduleTime": {
          "description": "Information when was the last time the job was successfully scheduled.", 
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
        }, 
        "lastSuccessfulTime": {
          "description": "Information when was the last time the job successfully completed.", 
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
        }
      }
    }, 
    "io.k8s.api.flowcontrol.v1.PolicyRulesWithSubjects": {
      "required": [
        "subjects"
      ], 
      "type": "object", 
      "description": "PolicyRulesWithSubjects prescribes a test that applies to a request to an apiserver. The test considers the subject making the request, the verb being requested, and the resource to be acted upon. This PolicyRulesWithSubjects matches a request if and only if both (a) at least one member of subjects matches the request and (b) at least one member of resourceRules or nonResourceRules matches the request.", 
      "properties": {
        "nonResourceRules": {
          "items": {
            "$ref": "#/definitions/io.k8s.api.flowcontrol.v1.NonResourcePolicyRule"
          }, 
          "type": "array", 
          "description": "`nonResourceRules` is a list of NonResourcePolicyRules that identify matching requests according to their verb and the target non-resource URL.", 
          "x-kubernetes-list-type": "atomic"
        }, 
        "subjects": {
          "items": {
            "$ref": "#/definitions/io.k8s.api.flowcontrol.v1.Subject"
          }, 
          "type": "array", 
          "description": "subjects is the list of normal user, serviceaccount, or group that this rule cares about. There must be at least one member in this slice. A slice that includes both the system:authenticated and system:unauthenticated user groups matches every request. Required.", 
          "x-kubernetes-list-type": "atomic"
        }, 
        "resourceRules": {
          "items": {
            "$ref": "#/definitions/io.k8s.api.flowcontrol.v1.ResourcePolicyRule"
          }, 
          "type": "array", 
          "description": "`resourceRules` is a slice of ResourcePolicyRules that identify matching requests according to their verb and the target resource. At least one of `resourceRules` and `nonResourceRules` has to be non-empty.", 
          "x-kubernetes-list-type": "atomic"
        }
      }
    }, 
    "io.k8s.api.core.v1.Binding": {
      "type": "object", 
      "required": [
        "target"
      ], 
      "x-kubernetes-group-version-kind": [
        {
          "kind": "Binding", 
          "version": "v1", 
          "group": ""
        }
      ], 
      "description": "Binding ties one object to another; for example, a pod is bound to a node by a scheduler.", 
      "properties": {
        "kind": {
          "enum": [
            "Binding"
          ], 
          "type": "string", 
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
        }, 
        "target": {
          "description": "The target object that you want to bind to the standard object.", 
          "$ref": "#/definitions/io.k8s.api.core.v1.ObjectReference"
        }, 
        "apiVersion": {
          "type": "string", 
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources"
        }, 
        "metadata": {
          "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata", 
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        }
      }
    }, 
    "io.k8s.apimachinery.pkg.version.Info": {
      "required": [
        "major", 
        "minor", 
        "gitVersion", 
        "gitCommit", 
        "gitTreeState", 
        "buildDate", 
        "goVersion", 
        "compiler", 
        "platform"
      ], 
      "type": "object", 
      "description": "Info contains versioning information. how we'll want to distribute that information.", 
      "properties": {
        "major": {
          "type": "string", 
          "description": "Major is the major version of the binary version"
        }, 
        "gitTreeState": {
          "type": "string"
        }, 
        "emulationMajor": {
          "type": "string", 
          "description": "EmulationMajor is the major version of the emulation version"
        }, 
        "minCompatibilityMinor": {
          "type": "string", 
          "description": "MinCompatibilityMinor is the minor version of the minimum compatibility version"
        }, 
        "buildDate": {
          "type": "string"
        }, 
        "platform": {
          "type": "string"
        }, 
        "gitVersion": {
          "type": "string"
        }, 
        "gitCommit": {
          "type": "string"
        }, 
        "minCompatibilityMajor": {
          "type": "string", 
          "description": "MinCompatibilityMajor is the major version of the minimum compatibility version"
        }, 
        "emulationMinor": {
          "type": "string", 
          "description": "EmulationMinor is the minor version of the emulation version"
        }, 
        "compiler": {
          "type": "string"
        }, 
        "minor": {
          "type": "string", 
          "description": "Minor is the minor version of the binary version"
        }, 
        "goVersion": {
          "type": "string"
        }
      }
    }, 
    "io.k8s.api.admissionregistration.v1.ValidatingWebhookConfiguration": {
      "type": "object", 
      "x-kubernetes-group-version-kind": [
        {
          "kind": "ValidatingWebhookConfiguration", 
          "version": "v1", 
          "group": "admissionregistration.k8s.io"
        }
      ], 
      "description": "ValidatingWebhookConfiguration describes the configuration of and admission webhook that accept or reject and object without changing it.", 
      "properties": {
        "kind": {
          "enum": [
            "ValidatingWebhookConfiguration"
          ], 
          "type": "string", 
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
        }, 
        "webhooks": {
          "description": "Webhooks is a list of webhooks and the affected resources and operations.", 
          "x-kubernetes-list-map-keys": [
            "name"
          ], 
          "x-kubernetes-patch-merge-key": "name", 
          "items": {
            "$ref": "#/definitions/io.k8s.api.admissionregistration.v1.ValidatingWebhook"
          }, 
          "type": "array", 
          "x-kubernetes-list-type": "map", 
          "x-kubernetes-patch-strategy": "merge"
        }, 
        "apiVersion": {
          "type": "string", 
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources"
        }, 
        "metadata": {
          "description": "Standard object metadata; More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata.", 
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        }
      }
    }, 
    "io.k8s.api.resource.v1beta2.ResourceClaimTemplateList": {
      "type": "object", 
      "required": [
        "items"
      ], 
      "x-kubernetes-group-version-kind": [
        {
          "kind": "ResourceClaimTemplateList", 
          "version": "v1beta2", 
          "group": "resource.k8s.io"
        }
      ], 
      "description": "ResourceClaimTemplateList is a collection of claim templates.", 
      "properties": {
        "items": {
          "items": {
            "$ref": "#/definitions/io.k8s.api.resource.v1beta2.ResourceClaimTemplate"
          }, 
          "type": "array", 
          "description": "Items is the list of resource claim templates."
        }, 
        "kind": {
          "enum": [
            "ResourceClaimTemplateList"
          ], 
          "type": "string", 
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
        }, 
        "apiVersion": {
          "type": "string", 
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources"
        }, 
        "metadata": {
          "description": "Standard list metadata", 
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      }
    }, 
    "io.k8s.api.admissionregistration.v1.ValidatingAdmissionPolicyStatus": {
      "type": "object", 
      "description": "ValidatingAdmissionPolicyStatus represents the status of an admission validation policy.", 
      "properties": {
        "observedGeneration": {
          "type": "integer", 
          "description": "The generation observed by the controller.", 
          "format": "int64"
        }, 
        "conditions": {
          "items": {
            "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Condition"
          }, 
          "type": "array", 
          "description": "The conditions represent the latest available observations of a policy's current state.", 
          "x-kubernetes-list-map-keys": [
            "type"
          ], 
          "x-kubernetes-list-type": "map"
        }, 
        "typeChecking": {
          "description": "The results of type checking for each expression. Presence of this field indicates the completion of the type checking.", 
          "$ref": "#/definitions/io.k8s.api.admissionregistration.v1.TypeChecking"
        }
      }
    }, 
    "io.k8s.api.authentication.v1.SelfSubjectReviewStatus": {
      "type": "object", 
      "description": "SelfSubjectReviewStatus is filled by the kube-apiserver and sent back to a user.", 
      "properties": {
        "userInfo": {
          "description": "User attributes of the user making this request.", 
          "$ref": "#/definitions/io.k8s.api.authentication.v1.UserInfo"
        }
      }
    }, 
    "io.k8s.api.core.v1.FlexVolumeSource": {
      "required": [
        "driver"
      ], 
      "type": "object", 
      "description": "FlexVolume represents a generic volume resource that is provisioned/attached using an exec based plugin.", 
      "properties": {
        "secretRef": {
          "description": "secretRef is Optional: secretRef is reference to the secret object containing sensitive information to pass to the plugin scripts. This may be empty if no secret object is specified. If the secret object contains more than one secret, all secrets are passed to the plugin scripts.", 
          "$ref": "#/definitions/io.k8s.api.core.v1.LocalObjectReference"
        }, 
        "fsType": {
          "type": "string", 
          "description": "fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". The default filesystem depends on FlexVolume script."
        }, 
        "driver": {
          "type": "string", 
          "description": "driver is the name of the driver to use for this volume."
        }, 
        "readOnly": {
          "type": "boolean", 
          "description": "readOnly is Optional: defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts."
        }, 
        "options": {
          "additionalProperties": {
            "type": "string"
          }, 
          "type": "object", 
          "description": "options is Optional: this field holds extra command options if any."
        }
      }
    }, 
    "io.k8s.api.apiserverinternal.v1alpha1.StorageVersionSpec": {
      "type": "object", 
      "description": "StorageVersionSpec is an empty spec."
    }, 
    "io.k8s.api.apps.v1.StatefulSetList": {
      "type": "object", 
      "required": [
        "items"
      ], 
      "x-kubernetes-group-version-kind": [
        {
          "kind": "StatefulSetList", 
          "version": "v1", 
          "group": "apps"
        }
      ], 
      "description": "StatefulSetList is a collection of StatefulSets.", 
      "properties": {
        "items": {
          "items": {
            "$ref": "#/definitions/io.k8s.api.apps.v1.StatefulSet"
          }, 
          "type": "array", 
          "description": "Items is the list of stateful sets."
        }, 
        "kind": {
          "enum": [
            "StatefulSetList"
          ], 
          "type": "string", 
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
        }, 
        "apiVersion": {
          "type": "string", 
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources"
        }, 
        "metadata": {
          "description": "Standard list's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata", 
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      }
    }, 
    "io.k8s.api.admissionregistration.v1beta1.MatchResources": {
      "type": "object", 
      "x-kubernetes-map-type": "atomic", 
      "description": "MatchResources decides whether to run the admission control policy on an object based on whether it meets the match criteria. The exclude rules take precedence over include rules (if a resource matches both, it is excluded)", 
      "properties": {
        "objectSelector": {
          "description": "ObjectSelector decides whether to run the validation based on if the object has matching labels. objectSelector is evaluated against both the oldObject and newObject that would be sent to the cel validation, and is considered to match if either object matches the selector. A null object (oldObject in the case of create, or newObject in the case of delete) or an object that cannot have labels (like a DeploymentRollback or a PodProxyOptions object) is not considered to match. Use the object selector only if the webhook is opt-in, because end users may skip the admission webhook by setting the labels. Default to the empty LabelSelector, which matches everything.", 
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector"
        }, 
        "matchPolicy": {
          "type": "string", 
          "description": "matchPolicy defines how the \"MatchResources\" list is used to match incoming requests. Allowed values are \"Exact\" or \"Equivalent\".\n\n- Exact: match a request only if it exactly matches a specified rule. For example, if deployments can be modified via apps/v1, apps/v1beta1, and extensions/v1beta1, but \"rules\" only included `apiGroups:[\"apps\"], apiVersions:[\"v1\"], resources: [\"deployments\"]`, a request to apps/v1beta1 or extensions/v1beta1 would not be sent to the ValidatingAdmissionPolicy.\n\n- Equivalent: match a request if modifies a resource listed in rules, even via another API group or version. For example, if deployments can be modified via apps/v1, apps/v1beta1, and extensions/v1beta1, and \"rules\" only included `apiGroups:[\"apps\"], apiVersions:[\"v1\"], resources: [\"deployments\"]`, a request to apps/v1beta1 or extensions/v1beta1 would be converted to apps/v1 and sent to the ValidatingAdmissionPolicy.\n\nDefaults to \"Equivalent\""
        }, 
        "excludeResourceRules": {
          "items": {
            "$ref": "#/definitions/io.k8s.api.admissionregistration.v1beta1.NamedRuleWithOperations"
          }, 
          "type": "array", 
          "description": "ExcludeResourceRules describes what operations on what resources/subresources the ValidatingAdmissionPolicy should not care about. The exclude rules take precedence over include rules (if a resource matches both, it is excluded)", 
          "x-kubernetes-list-type": "atomic"
        }, 
        "resourceRules": {
          "items": {
            "$ref": "#/definitions/io.k8s.api.admissionregistration.v1beta1.NamedRuleWithOperations"
          }, 
          "type": "array", 
          "description": "ResourceRules describes what operations on what resources/subresources the ValidatingAdmissionPolicy matches. The policy cares about an operation if it matches _any_ Rule.", 
          "x-kubernetes-list-type": "atomic"
        }, 
        "namespaceSelector": {
          "description": "NamespaceSelector decides whether to run the admission control policy on an object based on whether the namespace for that object matches the selector. If the object itself is a namespace, the matching is performed on object.metadata.labels. If the object is another cluster scoped resource, it never skips the policy.\n\nFor example, to run the webhook on any objects whose namespace is not associated with \"runlevel\" of \"0\" or \"1\";  you will set the selector as follows: \"namespaceSelector\": {\n  \"matchExpressions\": [\n    {\n      \"key\": \"runlevel\",\n      \"operator\": \"NotIn\",\n      \"values\": [\n        \"0\",\n        \"1\"\n      ]\n    }\n  ]\n}\n\nIf instead you want to only run the policy on any objects whose namespace is associated with the \"environment\" of \"prod\" or \"staging\"; you will set the selector as follows: \"namespaceSelector\": {\n  \"matchExpressions\": [\n    {\n      \"key\": \"environment\",\n      \"operator\": \"In\",\n      \"values\": [\n        \"prod\",\n        \"staging\"\n      ]\n    }\n  ]\n}\n\nSee https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/ for more examples of label selectors.\n\nDefault to the empty LabelSelector, which matches everything.", 
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector"
        }
      }
    }, 
    "io.k8s.api.networking.v1.IngressList": {
      "type": "object", 
      "required": [
        "items"
      ], 
      "x-kubernetes-group-version-kind": [
        {
          "kind": "IngressList", 
          "version": "v1", 
          "group": "networking.k8s.io"
        }
      ], 
      "description": "IngressList is a collection of Ingress.", 
      "properties": {
        "items": {
          "items": {
            "$ref": "#/definitions/io.k8s.api.networking.v1.Ingress"
          }, 
          "type": "array", 
          "description": "items is the list of Ingress."
        }, 
        "kind": {
          "enum": [
            "IngressList"
          ], 
          "type": "string", 
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
        }, 
        "apiVersion": {
          "type": "string", 
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources"
        }, 
        "metadata": {
          "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata", 
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      }
    }, 
    "io.k8s.api.admissionregistration.v1.MutatingWebhookConfigurationList": {
      "type": "object", 
      "required": [
        "items"
      ], 
      "x-kubernetes-group-version-kind": [
        {
          "kind": "MutatingWebhookConfigurationList", 
          "version": "v1", 
          "group": "admissionregistration.k8s.io"
        }
      ], 
      "description": "MutatingWebhookConfigurationList is a list of MutatingWebhookConfiguration.", 
      "properties": {
        "items": {
          "items": {
            "$ref": "#/definitions/io.k8s.api.admissionregistration.v1.MutatingWebhookConfiguration"
          }, 
          "type": "array", 
          "description": "List of MutatingWebhookConfiguration."
        }, 
        "kind": {
          "enum": [
            "MutatingWebhookConfigurationList"
          ], 
          "type": "string", 
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
        }, 
        "apiVersion": {
          "type": "string", 
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources"
        }, 
        "metadata": {
          "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds", 
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      }
    }, 
    "io.k8s.api.autoscaling.v1.HorizontalPodAutoscalerSpec": {
      "required": [
        "scaleTargetRef", 
        "maxReplicas"
      ], 
      "type": "object", 
      "description": "specification of a horizontal pod autoscaler.", 
      "properties": {
        "minReplicas": {
          "type": "integer", 
          "description": "minReplicas is the lower limit for the number of replicas to which the autoscaler can scale down.  It defaults to 1 pod.  minReplicas is allowed to be 0 if the alpha feature gate HPAScaleToZero is enabled and at least one Object or External metric is configured.  Scaling is active as long as at least one metric value is available.", 
          "format": "int32"
        }, 
        "scaleTargetRef": {
          "description": "reference to scaled resource; horizontal pod autoscaler will learn the current resource consumption and will set the desired number of pods by using its Scale subresource.", 
          "$ref": "#/definitions/io.k8s.api.autoscaling.v1.CrossVersionObjectReference"
        }, 
        "targetCPUUtilizationPercentage": {
          "type": "integer", 
          "description": "targetCPUUtilizationPercentage is the target average CPU utilization (represented as a percentage of requested CPU) over all the pods; if not specified the default autoscaling policy will be used.", 
          "format": "int32"
        }, 
        "maxReplicas": {
          "type": "integer", 
          "description": "maxReplicas is the upper limit for the number of pods that can be set by the autoscaler; cannot be smaller than MinReplicas.", 
          "format": "int32"
        }
      }
    }, 
    "io.k8s.api.resource.v1beta2.ResourceClaimList": {
      "type": "object", 
      "required": [
        "items"
      ], 
      "x-kubernetes-group-version-kind": [
        {
          "kind": "ResourceClaimList", 
          "version": "v1beta2", 
          "group": "resource.k8s.io"
        }
      ], 
      "description": "ResourceClaimList is a collection of claims.", 
      "properties": {
        "items": {
          "items": {
            "$ref": "#/definitions/io.k8s.api.resource.v1beta2.ResourceClaim"
          }, 
          "type": "array", 
          "description": "Items is the list of resource claims."
        }, 
        "kind": {
          "enum": [
            "ResourceClaimList"
          ], 
          "type": "string", 
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
        }, 
        "apiVersion": {
          "type": "string", 
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources"
        }, 
        "metadata": {
          "description": "Standard list metadata", 
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      }
    }, 
    "io.k8s.api.authentication.v1.TokenRequestStatus": {
      "required": [
        "token", 
        "expirationTimestamp"
      ], 
      "type": "object", 
      "description": "TokenRequestStatus is the result of a token request.", 
      "properties": {
        "expirationTimestamp": {
          "description": "ExpirationTimestamp is the time of expiration of the returned token.", 
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
        }, 
        "token": {
          "type": "string", 
          "description": "Token is the opaque bearer token."
        }
      }
    }, 
    "io.k8s.api.resource.v1beta1.ResourceClaimConsumerReference": {
      "required": [
        "resource", 
        "name", 
        "uid"
      ], 
      "type": "object", 
      "description": "ResourceClaimConsumerReference contains enough information to let you locate the consumer of a ResourceClaim. The user must be a resource in the same namespace as the ResourceClaim.", 
      "properties": {
        "apiGroup": {
          "type": "string", 
          "description": "APIGroup is the group for the resource being referenced. It is empty for the core API. This matches the group in the APIVersion that is used when creating the resources."
        }, 
        "resource": {
          "type": "string", 
          "description": "Resource is the type of resource being referenced, for example \"pods\"."
        }, 
        "name": {
          "type": "string", 
          "description": "Name is the name of resource being referenced."
        }, 
        "uid": {
          "type": "string", 
          "description": "UID identifies exactly one incarnation of the resource."
        }
      }
    }, 
    "io.k8s.api.core.v1.ContainerStateTerminated": {
      "required": [
        "exitCode"
      ], 
      "type": "object", 
      "description": "ContainerStateTerminated is a terminated state of a container.", 
      "properties": {
        "reason": {
          "type": "string", 
          "description": "(brief) reason from the last termination of the container"
        }, 
        "finishedAt": {
          "description": "Time at which the container last terminated", 
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
        }, 
        "containerID": {
          "type": "string", 
          "description": "Container's ID in the format '<type>://<container_id>'"
        }, 
        "startedAt": {
          "description": "Time at which previous execution of the container started", 
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
        }, 
        "signal": {
          "type": "integer", 
          "description": "Signal from the last termination of the container", 
          "format": "int32"
        }, 
        "message": {
          "type": "string", 
          "description": "Message regarding the last termination of the container"
        }, 
        "exitCode": {
          "type": "integer", 
          "description": "Exit status from the last termination of the container", 
          "format": "int32"
        }
      }
    }, 
    "io.k8s.api.core.v1.RBDPersistentVolumeSource": {
      "required": [
        "monitors", 
        "image"
      ], 
      "type": "object", 
      "description": "Represents a Rados Block Device mount that lasts the lifetime of a pod. RBD volumes support ownership management and SELinux relabeling.", 
      "properties": {
        "secretRef": {
          "description": "secretRef is name of the authentication secret for RBDUser. If provided overrides keyring. Default is nil. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it", 
          "$ref": "#/definitions/io.k8s.api.core.v1.SecretReference"
        }, 
        "image": {
          "type": "string", 
          "description": "image is the rados image name. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it"
        }, 
        "keyring": {
          "type": "string", 
          "description": "keyring is the path to key ring for RBDUser. Default is /etc/ceph/keyring. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it"
        }, 
        "fsType": {
          "type": "string", 
          "description": "fsType is the filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#rbd"
        }, 
        "readOnly": {
          "type": "boolean", 
          "description": "readOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it"
        }, 
        "user": {
          "type": "string", 
          "description": "user is the rados user name. Default is admin. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it"
        }, 
        "monitors": {
          "items": {
            "type": "string"
          }, 
          "type": "array", 
          "description": "monitors is a collection of Ceph monitors. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it", 
          "x-kubernetes-list-type": "atomic"
        }, 
        "pool": {
          "type": "string", 
          "description": "pool is the rados pool name. Default is rbd. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it"
        }
      }
    }, 
    "io.k8s.api.core.v1.PodResourceClaimStatus": {
      "required": [
        "name"
      ], 
      "type": "object", 
      "description": "PodResourceClaimStatus is stored in the PodStatus for each PodResourceClaim which references a ResourceClaimTemplate. It stores the generated name for the corresponding ResourceClaim.", 
      "properties": {
        "resourceClaimName": {
          "type": "string", 
          "description": "ResourceClaimName is the name of the ResourceClaim that was generated for the Pod in the namespace of the Pod. If this is unset, then generating a ResourceClaim was not necessary. The pod.spec.resourceClaims entry can be ignored in this case."
        }, 
        "name": {
          "type": "string", 
          "description": "Name uniquely identifies this resource claim inside the pod. This must match the name of an entry in pod.spec.resourceClaims, which implies that the string must be a DNS_LABEL."
        }
      }
    }, 
    "io.k8s.api.resource.v1.DeviceConstraint": {
      "type": "object", 
      "description": "DeviceConstraint must have exactly one field set besides Requests.", 
      "properties": {
        "distinctAttribute": {
          "type": "string", 
          "description": "DistinctAttribute requires that all devices in question have this attribute and that its type and value are unique across those devices.\n\nThis acts as the inverse of MatchAttribute.\n\nThis constraint is used to avoid allocating multiple requests to the same device by ensuring attribute-level differentiation.\n\nThis is useful for scenarios where resource requests must be fulfilled by separate physical devices. For example, a container requests two network interfaces that must be allocated from two different physical NICs."
        }, 
        "requests": {
          "items": {
            "type": "string"
          }, 
          "type": "array", 
          "description": "Requests is a list of the one or more requests in this claim which must co-satisfy this constraint. If a request is fulfilled by multiple devices, then all of the devices must satisfy the constraint. If this is not specified, this constraint applies to all requests in this claim.\n\nReferences to subrequests must include the name of the main request and may include the subrequest using the format <main request>[/<subrequest>]. If just the main request is given, the constraint applies to all subrequests.", 
          "x-kubernetes-list-type": "atomic"
        }, 
        "matchAttribute": {
          "type": "string", 
          "description": "MatchAttribute requires that all devices in question have this attribute and that its type and value are the same across those devices.\n\nFor example, if you specified \"dra.example.com/numa\" (a hypothetical example!), then only devices in the same NUMA node will be chosen. A device which does not have that attribute will not be chosen. All devices should use a value of the same type for this attribute because that is part of its specification, but if one device doesn't, then it also will not be chosen.\n\nMust include the domain qualifier."
        }
      }
    }, 
    "io.k8s.api.core.v1.SecretEnvSource": {
      "type": "object", 
      "description": "SecretEnvSource selects a Secret to populate the environment variables with.\n\nThe contents of the target Secret's Data field will represent the key-value pairs as environment variables.", 
      "properties": {
        "optional": {
          "type": "boolean", 
          "description": "Specify whether the Secret must be defined"
        }, 
        "name": {
          "type": "string", 
          "description": "Name of the referent. This field is effectively required, but due to backwards compatibility is allowed to be empty. Instances of this type with an empty value here are almost certainly wrong. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"
        }
      }
    }, 
    "io.k8s.api.batch.v1.SuccessPolicy": {
      "required": [
        "rules"
      ], 
      "type": "object", 
      "description": "SuccessPolicy describes when a Job can be declared as succeeded based on the success of some indexes.", 
      "properties": {
        "rules": {
          "items": {
            "$ref": "#/definitions/io.k8s.api.batch.v1.SuccessPolicyRule"
          }, 
          "type": "array", 
          "description": "rules represents the list of alternative rules for the declaring the Jobs as successful before `.status.succeeded >= .spec.completions`. Once any of the rules are met, the \"SuccessCriteriaMet\" condition is added, and the lingering pods are removed. The terminal state for such a Job has the \"Complete\" condition. Additionally, these rules are evaluated in order; Once the Job meets one of the rules, other rules are ignored. At most 20 elements are allowed.", 
          "x-kubernetes-list-type": "atomic"
        }
      }
    }, 
    "io.k8s.api.autoscaling.v2.ExternalMetricSource": {
      "required": [
        "metric", 
        "target"
      ], 
      "type": "object", 
      "description": "ExternalMetricSource indicates how to scale on a metric not associated with any Kubernetes object (for example length of queue in cloud messaging service, or QPS from loadbalancer running outside of cluster).", 
      "properties": {
        "metric": {
          "description": "metric identifies the target metric by name and selector", 
          "$ref": "#/definitions/io.k8s.api.autoscaling.v2.MetricIdentifier"
        }, 
        "target": {
          "description": "target specifies the target value for the given metric", 
          "$ref": "#/definitions/io.k8s.api.autoscaling.v2.MetricTarget"
        }
      }
    }, 
    "io.k8s.api.resource.v1.DeviceSubRequest": {
      "required": [
        "name", 
        "deviceClassName"
      ], 
      "type": "object", 
      "description": "DeviceSubRequest describes a request for device provided in the claim.spec.devices.requests[].firstAvailable array. Each is typically a request for a single resource like a device, but can also ask for several identical devices.\n\nDeviceSubRequest is similar to ExactDeviceRequest, but doesn't expose the AdminAccess field as that one is only supported when requesting a specific device.", 
      "properties": {
        "count": {
          "type": "integer", 
          "description": "Count is used only when the count mode is \"ExactCount\". Must be greater than zero. If AllocationMode is ExactCount and this field is not specified, the default is one.", 
          "format": "int64"
        }, 
        "capacity": {
          "description": "Capacity define resource requirements against each capacity.\n\nIf this field is unset and the device supports multiple allocations, the default value will be applied to each capacity according to requestPolicy. For the capacity that has no requestPolicy, default is the full capacity value.\n\nApplies to each device allocation. If Count > 1, the request fails if there aren't enough devices that meet the requirements. If AllocationMode is set to All, the request fails if there are devices that otherwise match the request, and have this capacity, with a value >= the requested amount, but which cannot be allocated to this request.", 
          "$ref": "#/definitions/io.k8s.api.resource.v1.CapacityRequirements"
        }, 
        "name": {
          "type": "string", 
          "description": "Name can be used to reference this subrequest in the list of constraints or the list of configurations for the claim. References must use the format <main request>/<subrequest>.\n\nMust be a DNS label."
        }, 
        "tolerations": {
          "items": {
            "$ref": "#/definitions/io.k8s.api.resource.v1.DeviceToleration"
          }, 
          "type": "array", 
          "description": "If specified, the request's tolerations.\n\nTolerations for NoSchedule are required to allocate a device which has a taint with that effect. The same applies to NoExecute.\n\nIn addition, should any of the allocated devices get tainted with NoExecute after allocation and that effect is not tolerated, then all pods consuming the ResourceClaim get deleted to evict them. The scheduler will not let new pods reserve the claim while it has these tainted devices. Once all pods are evicted, the claim will get deallocated.\n\nThe maximum number of tolerations is 16.\n\nThis is an alpha field and requires enabling the DRADeviceTaints feature gate.", 
          "x-kubernetes-list-type": "atomic"
        }, 
        "deviceClassName": {
          "type": "string", 
          "description": "DeviceClassName references a specific DeviceClass, which can define additional configuration and selectors to be inherited by this subrequest.\n\nA class is required. Which classes are available depends on the cluster.\n\nAdministrators may use this to restrict which devices may get requested by only installing classes with selectors for permitted devices. If users are free to request anything without restrictions, then administrators can create an empty DeviceClass for users to reference."
        }, 
        "allocationMode": {
          "type": "string", 
          "description": "AllocationMode and its related fields define how devices are allocated to satisfy this subrequest. Supported values are:\n\n- ExactCount: This request is for a specific number of devices.\n  This is the default. The exact number is provided in the\n  count field.\n\n- All: This subrequest is for all of the matching devices in a pool.\n  Allocation will fail if some devices are already allocated,\n  unless adminAccess is requested.\n\nIf AllocationMode is not specified, the default mode is ExactCount. If the mode is ExactCount and count is not specified, the default count is one. Any other subrequests must specify this field.\n\nMore modes may get added in the future. Clients must refuse to handle requests with unknown modes."
        }, 
        "selectors": {
          "items": {
            "$ref": "#/definitions/io.k8s.api.resource.v1.DeviceSelector"
          }, 
          "type": "array", 
          "description": "Selectors define criteria which must be satisfied by a specific device in order for that device to be considered for this subrequest. All selectors must be satisfied for a device to be considered.", 
          "x-kubernetes-list-type": "atomic"
        }
      }
    }, 
    "io.k8s.api.admissionregistration.v1beta1.MatchCondition": {
      "required": [
        "name", 
        "expression"
      ], 
      "type": "object", 
      "description": "MatchCondition represents a condition which must be fulfilled for a request to be sent to a webhook.", 
      "properties": {
        "expression": {
          "type": "string", 
          "description": "Expression represents the expression which will be evaluated by CEL. Must evaluate to bool. CEL expressions have access to the contents of the AdmissionRequest and Authorizer, organized into CEL variables:\n\n'object' - The object from the incoming request. The value is null for DELETE requests. 'oldObject' - The existing object. The value is null for CREATE requests. 'request' - Attributes of the admission request(/pkg/apis/admission/types.go#AdmissionRequest). 'authorizer' - A CEL Authorizer. May be used to perform authorization checks for the principal (user or service account) of the request.\n  See https://pkg.go.dev/k8s.io/apiserver/pkg/cel/library#Authz\n'authorizer.requestResource' - A CEL ResourceCheck constructed from the 'authorizer' and configured with the\n  request resource.\nDocumentation on CEL: https://kubernetes.io/docs/reference/using-api/cel/\n\nRequired."
        }, 
        "name": {
          "type": "string", 
          "description": "Name is an identifier for this match condition, used for strategic merging of MatchConditions, as well as providing an identifier for logging purposes. A good name should be descriptive of the associated expression. Name must be a qualified name consisting of alphanumeric characters, '-', '_' or '.', and must start and end with an alphanumeric character (e.g. 'MyName',  or 'my.name',  or '123-abc', regex used for validation is '([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9]') with an optional DNS subdomain prefix and '/' (e.g. 'example.com/MyName')\n\nRequired."
        }
      }
    }, 
    "io.k8s.api.authorization.v1.LocalSubjectAccessReview": {
      "type": "object", 
      "required": [
        "spec"
      ], 
      "x-kubernetes-group-version-kind": [
        {
          "kind": "LocalSubjectAccessReview", 
          "version": "v1", 
          "group": "authorization.k8s.io"
        }
      ], 
      "description": "LocalSubjectAccessReview checks whether or not a user or group can perform an action in a given namespace. Having a namespace scoped resource makes it much easier to grant namespace scoped policy that includes permissions checking.", 
      "properties": {
        "status": {
          "description": "Status is filled in by the server and indicates whether the request is allowed or not", 
          "$ref": "#/definitions/io.k8s.api.authorization.v1.SubjectAccessReviewStatus"
        }, 
        "kind": {
          "enum": [
            "LocalSubjectAccessReview"
          ], 
          "type": "string", 
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
        }, 
        "spec": {
          "description": "Spec holds information about the request being evaluated.  spec.namespace must be equal to the namespace you made the request against.  If empty, it is defaulted.", 
          "$ref": "#/definitions/io.k8s.api.authorization.v1.SubjectAccessReviewSpec"
        }, 
        "apiVersion": {
          "type": "string", 
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources"
        }, 
        "metadata": {
          "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata", 
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        }
      }
    }, 
    "io.k8s.api.core.v1.SessionAffinityConfig": {
      "type": "object", 
      "description": "SessionAffinityConfig represents the configurations of session affinity.", 
      "properties": {
        "clientIP": {
          "description": "clientIP contains the configurations of Client IP based session affinity.", 
          "$ref": "#/definitions/io.k8s.api.core.v1.ClientIPConfig"
        }
      }
    }, 
    "io.k8s.api.core.v1.KeyToPath": {
      "required": [
        "key", 
        "path"
      ], 
      "type": "object", 
      "description": "Maps a string key to a path within a volume.", 
      "properties": {
        "path": {
          "type": "string", 
          "description": "path is the relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'."
        }, 
        "mode": {
          "type": "integer", 
          "description": "mode is Optional: mode bits used to set permissions on this file. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.", 
          "format": "int32"
        }, 
        "key": {
          "type": "string", 
          "description": "key is the key to project."
        }
      }
    }, 
    "io.k8s.api.autoscaling.v1.ScaleStatus": {
      "required": [
        "replicas"
      ], 
      "type": "object", 
      "description": "ScaleStatus represents the current status of a scale subresource.", 
      "properties": {
        "replicas": {
          "type": "integer", 
          "description": "replicas is the actual number of observed instances of the scaled object.", 
          "format": "int32"
        }, 
        "selector": {
          "type": "string", 
          "description": "selector is the label query over pods that should match the replicas count. This is same as the label selector but in the string format to avoid introspection by clients. The string will be in the same format as the query-param syntax. More info about label selectors: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/"
        }
      }
    }, 
    "io.k8s.api.certificates.v1alpha1.ClusterTrustBundleSpec": {
      "required": [
        "trustBundle"
      ], 
      "type": "object", 
      "description": "ClusterTrustBundleSpec contains the signer and trust anchors.", 
      "properties": {
        "signerName": {
          "type": "string", 
          "description": "signerName indicates the associated signer, if any.\n\nIn order to create or update a ClusterTrustBundle that sets signerName, you must have the following cluster-scoped permission: group=certificates.k8s.io resource=signers resourceName=<the signer name> verb=attest.\n\nIf signerName is not empty, then the ClusterTrustBundle object must be named with the signer name as a prefix (translating slashes to colons). For example, for the signer name `example.com/foo`, valid ClusterTrustBundle object names include `example.com:foo:abc` and `example.com:foo:v1`.\n\nIf signerName is empty, then the ClusterTrustBundle object's name must not have such a prefix.\n\nList/watch requests for ClusterTrustBundles can filter on this field using a `spec.signerName=NAME` field selector."
        }, 
        "trustBundle": {
          "type": "string", 
          "description": "trustBundle contains the individual X.509 trust anchors for this bundle, as PEM bundle of PEM-wrapped, DER-formatted X.509 certificates.\n\nThe data must consist only of PEM certificate blocks that parse as valid X.509 certificates.  Each certificate must include a basic constraints extension with the CA bit set.  The API server will reject objects that contain duplicate certificates, or that use PEM block headers.\n\nUsers of ClusterTrustBundles, including Kubelet, are free to reorder and deduplicate certificate blocks in this file according to their own logic, as well as to drop PEM block headers and inter-block data."
        }
      }
    }, 
    "io.k8s.api.admissionregistration.v1.TypeChecking": {
      "type": "object", 
      "description": "TypeChecking contains results of type checking the expressions in the ValidatingAdmissionPolicy", 
      "properties": {
        "expressionWarnings": {
          "items": {
            "$ref": "#/definitions/io.k8s.api.admissionregistration.v1.ExpressionWarning"
          }, 
          "type": "array", 
          "description": "The type checking warnings for each expression.", 
          "x-kubernetes-list-type": "atomic"
        }
      }
    }, 
    "io.k8s.api.admissionregistration.v1alpha1.MutatingAdmissionPolicyBindingList": {
      "type": "object", 
      "required": [
        "items"
      ], 
      "x-kubernetes-group-version-kind": [
        {
          "kind": "MutatingAdmissionPolicyBindingList", 
          "version": "v1alpha1", 
          "group": "admissionregistration.k8s.io"
        }
      ], 
      "description": "MutatingAdmissionPolicyBindingList is a list of MutatingAdmissionPolicyBinding.", 
      "properties": {
        "items": {
          "items": {
            "$ref": "#/definitions/io.k8s.api.admissionregistration.v1alpha1.MutatingAdmissionPolicyBinding"
          }, 
          "type": "array", 
          "description": "List of PolicyBinding."
        }, 
        "kind": {
          "enum": [
            "MutatingAdmissionPolicyBindingList"
          ], 
          "type": "string", 
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
        }, 
        "apiVersion": {
          "type": "string", 
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources"
        }, 
        "metadata": {
          "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds", 
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      }
    }, 
    "io.k8s.api.batch.v1.PodFailurePolicy": {
      "required": [
        "rules"
      ], 
      "type": "object", 
      "description": "PodFailurePolicy describes how failed pods influence the backoffLimit.", 
      "properties": {
        "rules": {
          "items": {
            "$ref": "#/definitions/io.k8s.api.batch.v1.PodFailurePolicyRule"
          }, 
          "type": "array", 
          "description": "A list of pod failure policy rules. The rules are evaluated in order. Once a rule matches a Pod failure, the remaining of the rules are ignored. When no rule matches the Pod failure, the default handling applies - the counter of pod failures is incremented and it is checked against the backoffLimit. At most 20 elements are allowed.", 
          "x-kubernetes-list-type": "atomic"
        }
      }
    }, 
    "io.k8s.api.networking.v1.ServiceBackendPort": {
      "type": "object", 
      "x-kubernetes-map-type": "atomic", 
      "description": "ServiceBackendPort is the service port being referenced.", 
      "properties": {
        "name": {
          "type": "string", 
          "description": "name is the name of the port on the Service. This is a mutually exclusive setting with \"Number\"."
        }, 
        "number": {
          "type": "integer", 
          "description": "number is the numerical port number (e.g. 80) on the Service. This is a mutually exclusive setting with \"Name\".", 
          "format": "int32"
        }
      }
    }, 
    "io.k8s.api.apiserverinternal.v1alpha1.StorageVersionCondition": {
      "required": [
        "type", 
        "status", 
        "reason", 
        "message"
      ], 
      "type": "object", 
      "description": "Describes the state of the storageVersion at a certain point.", 
      "properties": {
        "status": {
          "type": "string", 
          "description": "Status of the condition, one of True, False, Unknown."
        }, 
        "reason": {
          "type": "string", 
          "description": "The reason for the condition's last transition."
        }, 
        "observedGeneration": {
          "type": "integer", 
          "description": "If set, this represents the .metadata.generation that the condition was set based upon.", 
          "format": "int64"
        }, 
        "type": {
          "type": "string", 
          "description": "Type of the condition."
        }, 
        "message": {
          "type": "string", 
          "description": "A human readable message indicating details about the transition."
        }, 
        "lastTransitionTime": {
          "description": "Last time the condition transitioned from one status to another.", 
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
        }
      }
    }, 
    "io.k8s.api.core.v1.PodTemplateSpec": {
      "type": "object", 
      "description": "PodTemplateSpec describes the data a pod should have when created from a template", 
      "properties": {
        "spec": {
          "description": "Specification of the desired behavior of the pod. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status", 
          "$ref": "#/definitions/io.k8s.api.core.v1.PodSpec"
        }, 
        "metadata": {
          "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata", 
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        }
      }
    }, 
    "io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.JSONSchemaProps": {
      "type": "object", 
      "description": "JSONSchemaProps is a JSON-Schema following Specification Draft 4 (http://json-schema.org/).", 
      "properties": {
        "maxItems": {
          "type": "integer", 
          "format": "int64"
        }, 
        "x-kubernetes-preserve-unknown-fields": {
          "type": "boolean", 
          "description": "x-kubernetes-preserve-unknown-fields stops the API server decoding step from pruning fields which are not specified in the validation schema. This affects fields recursively, but switches back to normal pruning behaviour if nested properties or additionalProperties are specified in the schema. This can either be true or undefined. False is forbidden."
        }, 
        "not": {
          "$ref": "#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.JSONSchemaProps"
        }, 
        "minimum": {
          "type": "number", 
          "format": "double"
        }, 
        "minProperties": {
          "type": "integer", 
          "format": "int64"
        }, 
        "$schema": {
          "type": "string"
        }, 
        "exclusiveMinimum": {
          "type": "boolean"
        }, 
        "id": {
          "type": "string"
        }, 
        "$ref": {
          "type": "string"
        }, 
        "exclusiveMaximum": {
          "type": "boolean"
        }, 
        "x-kubernetes-list-type": {
          "type": "string", 
          "description": "x-kubernetes-list-type annotates an array to further describe its topology. This extension must only be used on lists and may have 3 possible values:\n\n1) `atomic`: the list is treated as a single entity, like a scalar.\n     Atomic lists will be entirely replaced when updated. This extension\n     may be used on any type of list (struct, scalar, ...).\n2) `set`:\n     Sets are lists that must not have multiple items with the same value. Each\n     value must be a scalar, an object with x-kubernetes-map-type `atomic` or an\n     array with x-kubernetes-list-type `atomic`.\n3) `map`:\n     These lists are like maps in that their elements have a non-index key\n     used to identify them. Order is preserved upon merge. The map tag\n     must only be used on a list with elements of type object.\nDefaults to atomic for arrays."
        }, 
        "title": {
          "type": "string"
        }, 
        "anyOf": {
          "items": {
            "$ref": "#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.JSONSchemaProps"
          }, 
          "type": "array", 
          "x-kubernetes-list-type": "atomic"
        }, 
        "allOf": {
          "items": {
            "$ref": "#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.JSONSchemaProps"
          }, 
          "type": "array", 
          "x-kubernetes-list-type": "atomic"
        }, 
        "patternProperties": {
          "additionalProperties": {
            "$ref": "#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.JSONSchemaProps"
          }, 
          "type": "object"
        }, 
        "multipleOf": {
          "type": "number", 
          "format": "double"
        }, 
        "maxProperties": {
          "type": "integer", 
          "format": "int64"
        }, 
        "x-kubernetes-map-type": {
          "type": "string", 
          "description": "x-kubernetes-map-type annotates an object to further describe its topology. This extension must only be used when type is object and may have 2 possible values:\n\n1) `granular`:\n     These maps are actual maps (key-value pairs) and each fields are independent\n     from each other (they can each be manipulated by separate actors). This is\n     the default behaviour for all maps.\n2) `atomic`: the list is treated as a single entity, like a scalar.\n     Atomic maps will be entirely replaced when updated."
        }, 
        "type": {
          "type": "string"
        }, 
        "x-kubernetes-validations": {
          "description": "x-kubernetes-validations describes a list of validation rules written in the CEL expression language.", 
          "x-kubernetes-list-map-keys": [
            "rule"
          ], 
          "x-kubernetes-patch-merge-key": "rule", 
          "items": {
            "$ref": "#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.ValidationRule"
          }, 
          "type": "array", 
          "x-kubernetes-list-type": "map", 
          "x-kubernetes-patch-strategy": "merge"
        }, 
        "description": {
          "type": "string"
        }, 
        "format": {
          "type": "string", 
          "description": "format is an OpenAPI v3 format string. Unknown formats are ignored. The following formats are validated:\n\n- bsonobjectid: a bson object ID, i.e. a 24 characters hex string - uri: an URI as parsed by Golang net/url.ParseRequestURI - email: an email address as parsed by Golang net/mail.ParseAddress - hostname: a valid representation for an Internet host name, as defined by RFC 1034, section 3.1 [RFC1034]. - ipv4: an IPv4 IP as parsed by Golang net.ParseIP - ipv6: an IPv6 IP as parsed by Golang net.ParseIP - cidr: a CIDR as parsed by Golang net.ParseCIDR - mac: a MAC address as parsed by Golang net.ParseMAC - uuid: an UUID that allows uppercase defined by the regex (?i)^[0-9a-f]{8}-?[0-9a-f]{4}-?[0-9a-f]{4}-?[0-9a-f]{4}-?[0-9a-f]{12}$ - uuid3: an UUID3 that allows uppercase defined by the regex (?i)^[0-9a-f]{8}-?[0-9a-f]{4}-?3[0-9a-f]{3}-?[0-9a-f]{4}-?[0-9a-f]{12}$ - uuid4: an UUID4 that allows uppercase defined by the regex (?i)^[0-9a-f]{8}-?[0-9a-f]{4}-?4[0-9a-f]{3}-?[89ab][0-9a-f]{3}-?[0-9a-f]{12}$ - uuid5: an UUID5 that allows uppercase defined by the regex (?i)^[0-9a-f]{8}-?[0-9a-f]{4}-?5[0-9a-f]{3}-?[89ab][0-9a-f]{3}-?[0-9a-f]{12}$ - isbn: an ISBN10 or ISBN13 number string like \"0321751043\" or \"978-0321751041\" - isbn10: an ISBN10 number string like \"0321751043\" - isbn13: an ISBN13 number string like \"978-0321751041\" - creditcard: a credit card number defined by the regex ^(?:4[0-9]{12}(?:[0-9]{3})?|5[1-5][0-9]{14}|6(?:011|5[0-9][0-9])[0-9]{12}|3[47][0-9]{13}|3(?:0[0-5]|[68][0-9])[0-9]{11}|(?:2131|1800|35\\\\d{3})\\\\d{11})$ with any non digit characters mixed in - ssn: a U.S. social security number following the regex ^\\\\d{3}[- ]?\\\\d{2}[- ]?\\\\d{4}$ - hexcolor: an hexadecimal color code like \"#FFFFFF: following the regex ^#?([0-9a-fA-F]{3}|[0-9a-fA-F]{6})$ - rgbcolor: an RGB color code like rgb like \"rgb(255,255,2559\" - byte: base64 encoded binary data - password: any kind of string - date: a date string like \"2006-01-02\" as defined by full-date in RFC3339 - duration: a duration string like \"22 ns\" as parsed by Golang time.ParseDuration or compatible with Scala duration format - datetime: a date time string like \"2014-12-15T19:30:20.000Z\" as defined by date-time in RFC3339."
        }, 
        "minLength": {
          "type": "integer", 
          "format": "int64"
        }, 
        "enum": {
          "items": {
            "$ref": "#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.JSON"
          }, 
          "type": "array", 
          "x-kubernetes-list-type": "atomic"
        }, 
        "additionalItems": {
          "$ref": "#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.JSONSchemaPropsOrBool"
        }, 
        "x-kubernetes-int-or-string": {
          "type": "boolean", 
          "description": "x-kubernetes-int-or-string specifies that this value is either an integer or a string. If this is true, an empty type is allowed and type as child of anyOf is permitted if following one of the following patterns:\n\n1) anyOf:\n   - type: integer\n   - type: string\n2) allOf:\n   - anyOf:\n     - type: integer\n     - type: string\n   - ... zero or more"
        }, 
        "dependencies": {
          "additionalProperties": {
            "$ref": "#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.JSONSchemaPropsOrStringArray"
          }, 
          "type": "object"
        }, 
        "x-kubernetes-list-map-keys": {
          "items": {
            "type": "string"
          }, 
          "type": "array", 
          "description": "x-kubernetes-list-map-keys annotates an array with the x-kubernetes-list-type `map` by specifying the keys used as the index of the map.\n\nThis tag MUST only be used on lists that have the \"x-kubernetes-list-type\" extension set to \"map\". Also, the values specified for this attribute must be a scalar typed field of the child structure (no nesting is supported).\n\nThe properties specified must either be required or have a default value, to ensure those properties are present for all list items.", 
          "x-kubernetes-list-type": "atomic"
        }, 
        "maxLength": {
          "type": "integer", 
          "format": "int64"
        }, 
        "uniqueItems": {
          "type": "boolean"
        }, 
        "externalDocs": {
          "$ref": "#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.ExternalDocumentation"
        }, 
        "properties": {
          "additionalProperties": {
            "$ref": "#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.JSONSchemaProps"
          }, 
          "type": "object"
        }, 
        "oneOf": {
          "items": {
            "$ref": "#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.JSONSchemaProps"
          }, 
          "type": "array", 
          "x-kubernetes-list-type": "atomic"
        }, 
        "nullable": {
          "type": "boolean"
        }, 
        "default": {
          "description": "default is a default value for undefined object fields. Defaulting is a beta feature under the CustomResourceDefaulting feature gate. Defaulting requires spec.preserveUnknownFields to be false.", 
          "$ref": "#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.JSON"
        }, 
        "items": {
          "$ref": "#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.JSONSchemaPropsOrArray"
        }, 
        "required": {
          "items": {
            "type": "string"
          }, 
          "type": "array", 
          "x-kubernetes-list-type": "atomic"
        }, 
        "maximum": {
          "type": "number", 
          "format": "double"
        }, 
        "minItems": {
          "type": "integer", 
          "format": "int64"
        }, 
        "pattern": {
          "type": "string"
        }, 
        "additionalProperties": {
          "$ref": "#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.JSONSchemaPropsOrBool"
        }, 
        "definitions": {
          "additionalProperties": {
            "$ref": "#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.JSONSchemaProps"
          }, 
          "type": "object"
        }, 
        "example": {
          "$ref": "#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.JSON"
        }, 
        "x-kubernetes-embedded-resource": {
          "type": "boolean", 
          "description": "x-kubernetes-embedded-resource defines that the value is an embedded Kubernetes runtime.Object, with TypeMeta and ObjectMeta. The type must be object. It is allowed to further restrict the embedded object. kind, apiVersion and metadata are validated automatically. x-kubernetes-preserve-unknown-fields is allowed to be true, but does not have to be if the object is fully specified (up to kind, apiVersion, metadata)."
        }
      }
    }, 
    "io.k8s.api.core.v1.ImageVolumeSource": {
      "type": "object", 
      "description": "ImageVolumeSource represents a image volume resource.", 
      "properties": {
        "pullPolicy": {
          "type": "string", 
          "description": "Policy for pulling OCI objects. Possible values are: Always: the kubelet always attempts to pull the reference. Container creation will fail If the pull fails. Never: the kubelet never pulls the reference and only uses a local image or artifact. Container creation will fail if the reference isn't present. IfNotPresent: the kubelet pulls if the reference isn't already present on disk. Container creation will fail if the reference isn't present and the pull fails. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise."
        }, 
        "reference": {
          "type": "string", 
          "description": "Required: Image or artifact reference to be used. Behaves in the same way as pod.spec.containers[*].image. Pull secrets will be assembled in the same way as for the container image by looking up node credentials, SA image pull secrets, and pod spec image pull secrets. More info: https://kubernetes.io/docs/concepts/containers/images This field is optional to allow higher level config management to default or override container images in workload controllers like Deployments and StatefulSets."
        }
      }
    }, 
    "io.k8s.api.core.v1.FlockerVolumeSource": {
      "type": "object", 
      "description": "Represents a Flocker volume mounted by the Flocker agent. One and only one of datasetName and datasetUUID should be set. Flocker volumes do not support ownership management or SELinux relabeling.", 
      "properties": {
        "datasetName": {
          "type": "string", 
          "description": "datasetName is Name of the dataset stored as metadata -> name on the dataset for Flocker should be considered as deprecated"
        }, 
        "datasetUUID": {
          "type": "string", 
          "description": "datasetUUID is the UUID of the dataset. This is unique identifier of a Flocker dataset"
        }
      }
    }, 
    "io.k8s.api.core.v1.PersistentVolumeClaimList": {
      "type": "object", 
      "required": [
        "items"
      ], 
      "x-kubernetes-group-version-kind": [
        {
          "kind": "PersistentVolumeClaimList", 
          "version": "v1", 
          "group": ""
        }
      ], 
      "description": "PersistentVolumeClaimList is a list of PersistentVolumeClaim items.", 
      "properties": {
        "items": {
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.PersistentVolumeClaim"
          }, 
          "type": "array", 
          "description": "items is a list of persistent volume claims. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims"
        }, 
        "kind": {
          "enum": [
            "PersistentVolumeClaimList"
          ], 
          "type": "string", 
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
        }, 
        "apiVersion": {
          "type": "string", 
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources"
        }, 
        "metadata": {
          "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds", 
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      }
    }, 
    "io.k8s.api.resource.v1beta2.ResourceClaimConsumerReference": {
      "required": [
        "resource", 
        "name", 
        "uid"
      ], 
      "type": "object", 
      "description": "ResourceClaimConsumerReference contains enough information to let you locate the consumer of a ResourceClaim. The user must be a resource in the same namespace as the ResourceClaim.", 
      "properties": {
        "apiGroup": {
          "type": "string", 
          "description": "APIGroup is the group for the resource being referenced. It is empty for the core API. This matches the group in the APIVersion that is used when creating the resources."
        }, 
        "resource": {
          "type": "string", 
          "description": "Resource is the type of resource being referenced, for example \"pods\"."
        }, 
        "name": {
          "type": "string", 
          "description": "Name is the name of resource being referenced."
        }, 
        "uid": {
          "type": "string", 
          "description": "UID identifies exactly one incarnation of the resource."
        }
      }
    }, 
    "io.k8s.api.resource.v1.ResourceSlice": {
      "type": "object", 
      "required": [
        "spec"
      ], 
      "x-kubernetes-group-version-kind": [
        {
          "kind": "ResourceSlice", 
          "version": "v1", 
          "group": "resource.k8s.io"
        }
      ], 
      "description": "ResourceSlice represents one or more resources in a pool of similar resources, managed by a common driver. A pool may span more than one ResourceSlice, and exactly how many ResourceSlices comprise a pool is determined by the driver.\n\nAt the moment, the only supported resources are devices with attributes and capacities. Each device in a given pool, regardless of how many ResourceSlices, must have a unique name. The ResourceSlice in which a device gets published may change over time. The unique identifier for a device is the tuple <driver name>, <pool name>, <device name>.\n\nWhenever a driver needs to update a pool, it increments the pool.Spec.Pool.Generation number and updates all ResourceSlices with that new number and new resource definitions. A consumer must only use ResourceSlices with the highest generation number and ignore all others.\n\nWhen allocating all resources in a pool matching certain criteria or when looking for the best solution among several different alternatives, a consumer should check the number of ResourceSlices in a pool (included in each ResourceSlice) to determine whether its view of a pool is complete and if not, should wait until the driver has completed updating the pool.\n\nFor resources that are not local to a node, the node name is not set. Instead, the driver may use a node selector to specify where the devices are available.\n\nThis is an alpha type and requires enabling the DynamicResourceAllocation feature gate.", 
      "properties": {
        "kind": {
          "enum": [
            "ResourceSlice"
          ], 
          "type": "string", 
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
        }, 
        "spec": {
          "description": "Contains the information published by the driver.\n\nChanging the spec automatically increments the metadata.generation number.", 
          "$ref": "#/definitions/io.k8s.api.resource.v1.ResourceSliceSpec"
        }, 
        "apiVersion": {
          "type": "string", 
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources"
        }, 
        "metadata": {
          "description": "Standard object metadata", 
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        }
      }
    }, 
    "io.k8s.api.core.v1.ContainerPort": {
      "required": [
        "containerPort"
      ], 
      "type": "object", 
      "description": "ContainerPort represents a network port in a single container.", 
      "properties": {
        "hostIP": {
          "type": "string", 
          "description": "What host IP to bind the external port to."
        }, 
        "protocol": {
          "type": "string", 
          "description": "Protocol for port. Must be UDP, TCP, or SCTP. Defaults to \"TCP\"."
        }, 
        "containerPort": {
          "type": "integer", 
          "description": "Number of port to expose on the pod's IP address. This must be a valid port number, 0 < x < 65536.", 
          "format": "int32"
        }, 
        "name": {
          "type": "string", 
          "description": "If specified, this must be an IANA_SVC_NAME and unique within the pod. Each named port in a pod must have a unique name. Name for the port that can be referred to by services."
        }, 
        "hostPort": {
          "type": "integer", 
          "description": "Number of port to expose on the host. If specified, this must be a valid port number, 0 < x < 65536. If HostNetwork is specified, this must match ContainerPort. Most containers do not need this.", 
          "format": "int32"
        }
      }
    }, 
    "io.k8s.api.authorization.v1.SubjectAccessReviewStatus": {
      "required": [
        "allowed"
      ], 
      "type": "object", 
      "description": "SubjectAccessReviewStatus", 
      "properties": {
        "reason": {
          "type": "string", 
          "description": "Reason is optional.  It indicates why a request was allowed or denied."
        }, 
        "evaluationError": {
          "type": "string", 
          "description": "EvaluationError is an indication that some error occurred during the authorization check. It is entirely possible to get an error and be able to continue determine authorization status in spite of it. For instance, RBAC can be missing a role, but enough roles are still present and bound to reason about the request."
        }, 
        "allowed": {
          "type": "boolean", 
          "description": "Allowed is required. True if the action would be allowed, false otherwise."
        }, 
        "denied": {
          "type": "boolean", 
          "description": "Denied is optional. True if the action would be denied, otherwise false. If both allowed is false and denied is false, then the authorizer has no opinion on whether to authorize the action. Denied may not be true if Allowed is true."
        }
      }
    }, 
    "io.k8s.api.networking.v1.HTTPIngressRuleValue": {
      "required": [
        "paths"
      ], 
      "type": "object", 
      "description": "HTTPIngressRuleValue is a list of http selectors pointing to backends. In the example: http://<host>/<path>?<searchpart> -> backend where where parts of the url correspond to RFC 3986, this resource will be used to match against everything after the last '/' and before the first '?' or '#'.", 
      "properties": {
        "paths": {
          "items": {
            "$ref": "#/definitions/io.k8s.api.networking.v1.HTTPIngressPath"
          }, 
          "type": "array", 
          "description": "paths is a collection of paths that map requests to backends.", 
          "x-kubernetes-list-type": "atomic"
        }
      }
    }, 
    "io.k8s.api.storage.v1.CSINodeSpec": {
      "required": [
        "drivers"
      ], 
      "type": "object", 
      "description": "CSINodeSpec holds information about the specification of all CSI drivers installed on a node", 
      "properties": {
        "drivers": {
          "description": "drivers is a list of information of all CSI Drivers existing on a node. If all drivers in the list are uninstalled, this can become empty.", 
          "x-kubernetes-list-map-keys": [
            "name"
          ], 
          "x-kubernetes-patch-merge-key": "name", 
          "items": {
            "$ref": "#/definitions/io.k8s.api.storage.v1.CSINodeDriver"
          }, 
          "type": "array", 
          "x-kubernetes-list-type": "map", 
          "x-kubernetes-patch-strategy": "merge"
        }
      }
    }, 
    "io.k8s.api.resource.v1.DeviceClaim": {
      "type": "object", 
      "description": "DeviceClaim defines how to request devices with a ResourceClaim.", 
      "properties": {
        "requests": {
          "items": {
            "$ref": "#/definitions/io.k8s.api.resource.v1.DeviceRequest"
          }, 
          "type": "array", 
          "description": "Requests represent individual requests for distinct devices which must all be satisfied. If empty, nothing needs to be allocated.", 
          "x-kubernetes-list-type": "atomic"
        }, 
        "config": {
          "items": {
            "$ref": "#/definitions/io.k8s.api.resource.v1.DeviceClaimConfiguration"
          }, 
          "type": "array", 
          "description": "This field holds configuration for multiple potential drivers which could satisfy requests in this claim. It is ignored while allocating the claim.", 
          "x-kubernetes-list-type": "atomic"
        }, 
        "constraints": {
          "items": {
            "$ref": "#/definitions/io.k8s.api.resource.v1.DeviceConstraint"
          }, 
          "type": "array", 
          "description": "These constraints must be satisfied by the set of devices that get allocated for the claim.", 
          "x-kubernetes-list-type": "atomic"
        }
      }
    }, 
    "io.k8s.api.resource.v1beta2.ResourceClaimTemplateSpec": {
      "required": [
        "spec"
      ], 
      "type": "object", 
      "description": "ResourceClaimTemplateSpec contains the metadata and fields for a ResourceClaim.", 
      "properties": {
        "spec": {
          "description": "Spec for the ResourceClaim. The entire content is copied unchanged into the ResourceClaim that gets created from this template. The same fields as in a ResourceClaim are also valid here.", 
          "$ref": "#/definitions/io.k8s.api.resource.v1beta2.ResourceClaimSpec"
        }, 
        "metadata": {
          "description": "ObjectMeta may contain labels and annotations that will be copied into the ResourceClaim when creating it. No other fields are allowed and will be rejected during validation.", 
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        }
      }
    }, 
    "io.k8s.api.core.v1.TopologySelectorTerm": {
      "type": "object", 
      "x-kubernetes-map-type": "atomic", 
      "description": "A topology selector term represents the result of label queries. A null or empty topology selector term matches no objects. The requirements of them are ANDed. It provides a subset of functionality as NodeSelectorTerm. This is an alpha feature and may change in the future.", 
      "properties": {
        "matchLabelExpressions": {
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.TopologySelectorLabelRequirement"
          }, 
          "type": "array", 
          "description": "A list of topology selector requirements by labels.", 
          "x-kubernetes-list-type": "atomic"
        }
      }
    }, 
    "io.k8s.api.batch.v1.JobTemplateSpec": {
      "type": "object", 
      "description": "JobTemplateSpec describes the data a Job should have when created from a template", 
      "properties": {
        "spec": {
          "description": "Specification of the desired behavior of the job. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status", 
          "$ref": "#/definitions/io.k8s.api.batch.v1.JobSpec"
        }, 
        "metadata": {
          "description": "Standard object's metadata of the jobs created from this template. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata", 
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        }
      }
    }, 
    "io.k8s.api.admissionregistration.v1beta1.MutatingAdmissionPolicySpec": {
      "type": "object", 
      "description": "MutatingAdmissionPolicySpec is the specification of the desired behavior of the admission policy.", 
      "properties": {
        "reinvocationPolicy": {
          "type": "string", 
          "description": "reinvocationPolicy indicates whether mutations may be called multiple times per MutatingAdmissionPolicyBinding as part of a single admission evaluation. Allowed values are \"Never\" and \"IfNeeded\".\n\nNever: These mutations will not be called more than once per binding in a single admission evaluation.\n\nIfNeeded: These mutations may be invoked more than once per binding for a single admission request and there is no guarantee of order with respect to other admission plugins, admission webhooks, bindings of this policy and admission policies.  Mutations are only reinvoked when mutations change the object after this mutation is invoked. Required."
        }, 
        "failurePolicy": {
          "type": "string", 
          "description": "failurePolicy defines how to handle failures for the admission policy. Failures can occur from CEL expression parse errors, type check errors, runtime errors and invalid or mis-configured policy definitions or bindings.\n\nA policy is invalid if paramKind refers to a non-existent Kind. A binding is invalid if paramRef.name refers to a non-existent resource.\n\nfailurePolicy does not define how validations that evaluate to false are handled.\n\nAllowed values are Ignore or Fail. Defaults to Fail."
        }, 
        "variables": {
          "items": {
            "$ref": "#/definitions/io.k8s.api.admissionregistration.v1beta1.Variable"
          }, 
          "type": "array", 
          "description": "variables contain definitions of variables that can be used in composition of other expressions. Each variable is defined as a named CEL expression. The variables defined here will be available under `variables` in other expressions of the policy except matchConditions because matchConditions are evaluated before the rest of the policy.\n\nThe expression of a variable can refer to other variables defined earlier in the list but not those after. Thus, variables must be sorted by the order of first appearance and acyclic.", 
          "x-kubernetes-list-type": "atomic"
        }, 
        "paramKind": {
          "description": "paramKind specifies the kind of resources used to parameterize this policy. If absent, there are no parameters for this policy and the param CEL variable will not be provided to validation expressions. If paramKind refers to a non-existent kind, this policy definition is mis-configured and the FailurePolicy is applied. If paramKind is specified but paramRef is unset in MutatingAdmissionPolicyBinding, the params variable will be null.", 
          "$ref": "#/definitions/io.k8s.api.admissionregistration.v1beta1.ParamKind"
        }, 
        "mutations": {
          "items": {
            "$ref": "#/definitions/io.k8s.api.admissionregistration.v1beta1.Mutation"
          }, 
          "type": "array", 
          "description": "mutations contain operations to perform on matching objects. mutations may not be empty; a minimum of one mutation is required. mutations are evaluated in order, and are reinvoked according to the reinvocationPolicy. The mutations of a policy are invoked for each binding of this policy and reinvocation of mutations occurs on a per binding basis.", 
          "x-kubernetes-list-type": "atomic"
        }, 
        "matchConditions": {
          "description": "matchConditions is a list of conditions that must be met for a request to be validated. Match conditions filter requests that have already been matched by the matchConstraints. An empty list of matchConditions matches all requests. There are a maximum of 64 match conditions allowed.\n\nIf a parameter object is provided, it can be accessed via the `params` handle in the same manner as validation expressions.\n\nThe exact matching logic is (in order):\n  1. If ANY matchCondition evaluates to FALSE, the policy is skipped.\n  2. If ALL matchConditions evaluate to TRUE, the policy is evaluated.\n  3. If any matchCondition evaluates to an error (but none are FALSE):\n     - If failurePolicy=Fail, reject the request\n     - If failurePolicy=Ignore, the policy is skipped", 
          "x-kubernetes-list-map-keys": [
            "name"
          ], 
          "x-kubernetes-patch-merge-key": "name", 
          "items": {
            "$ref": "#/definitions/io.k8s.api.admissionregistration.v1beta1.MatchCondition"
          }, 
          "type": "array", 
          "x-kubernetes-list-type": "map", 
          "x-kubernetes-patch-strategy": "merge"
        }, 
        "matchConstraints": {
          "description": "matchConstraints specifies what resources this policy is designed to validate. The MutatingAdmissionPolicy cares about a request if it matches _all_ Constraints. However, in order to prevent clusters from being put into an unstable state that cannot be recovered from via the API MutatingAdmissionPolicy cannot match MutatingAdmissionPolicy and MutatingAdmissionPolicyBinding. The CREATE, UPDATE and CONNECT operations are allowed.  The DELETE operation may not be matched. '*' matches CREATE, UPDATE and CONNECT. Required.", 
          "$ref": "#/definitions/io.k8s.api.admissionregistration.v1beta1.MatchResources"
        }
      }
    }, 
    "io.k8s.api.core.v1.ServiceAccountTokenProjection": {
      "required": [
        "path"
      ], 
      "type": "object", 
      "description": "ServiceAccountTokenProjection represents a projected service account token volume. This projection can be used to insert a service account token into the pods runtime filesystem for use against APIs (Kubernetes API Server or otherwise).", 
      "properties": {
        "path": {
          "type": "string", 
          "description": "path is the path relative to the mount point of the file to project the token into."
        }, 
        "audience": {
          "type": "string", 
          "description": "audience is the intended audience of the token. A recipient of a token must identify itself with an identifier specified in the audience of the token, and otherwise should reject the token. The audience defaults to the identifier of the apiserver."
        }, 
        "expirationSeconds": {
          "type": "integer", 
          "description": "expirationSeconds is the requested duration of validity of the service account token. As the token approaches expiration, the kubelet volume plugin will proactively rotate the service account token. The kubelet will start trying to rotate the token if the token is older than 80 percent of its time to live or if the token is older than 24 hours.Defaults to 1 hour and must be at least 10 minutes.", 
          "format": "int64"
        }
      }
    }, 
    "io.k8s.api.core.v1.LifecycleHandler": {
      "type": "object", 
      "description": "LifecycleHandler defines a specific action that should be taken in a lifecycle hook. One and only one of the fields, except TCPSocket must be specified.", 
      "properties": {
        "httpGet": {
          "description": "HTTPGet specifies an HTTP GET request to perform.", 
          "$ref": "#/definitions/io.k8s.api.core.v1.HTTPGetAction"
        }, 
        "sleep": {
          "description": "Sleep represents a duration that the container should sleep.", 
          "$ref": "#/definitions/io.k8s.api.core.v1.SleepAction"
        }, 
        "tcpSocket": {
          "description": "Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept for backward compatibility. There is no validation of this field and lifecycle hooks will fail at runtime when it is specified.", 
          "$ref": "#/definitions/io.k8s.api.core.v1.TCPSocketAction"
        }, 
        "exec": {
          "description": "Exec specifies a command to execute in the container.", 
          "$ref": "#/definitions/io.k8s.api.core.v1.ExecAction"
        }
      }
    }, 
    "io.k8s.api.certificates.v1beta1.ClusterTrustBundleSpec": {
      "required": [
        "trustBundle"
      ], 
      "type": "object", 
      "description": "ClusterTrustBundleSpec contains the signer and trust anchors.", 
      "properties": {
        "signerName": {
          "type": "string", 
          "description": "signerName indicates the associated signer, if any.\n\nIn order to create or update a ClusterTrustBundle that sets signerName, you must have the following cluster-scoped permission: group=certificates.k8s.io resource=signers resourceName=<the signer name> verb=attest.\n\nIf signerName is not empty, then the ClusterTrustBundle object must be named with the signer name as a prefix (translating slashes to colons). For example, for the signer name `example.com/foo`, valid ClusterTrustBundle object names include `example.com:foo:abc` and `example.com:foo:v1`.\n\nIf signerName is empty, then the ClusterTrustBundle object's name must not have such a prefix.\n\nList/watch requests for ClusterTrustBundles can filter on this field using a `spec.signerName=NAME` field selector."
        }, 
        "trustBundle": {
          "type": "string", 
          "description": "trustBundle contains the individual X.509 trust anchors for this bundle, as PEM bundle of PEM-wrapped, DER-formatted X.509 certificates.\n\nThe data must consist only of PEM certificate blocks that parse as valid X.509 certificates.  Each certificate must include a basic constraints extension with the CA bit set.  The API server will reject objects that contain duplicate certificates, or that use PEM block headers.\n\nUsers of ClusterTrustBundles, including Kubelet, are free to reorder and deduplicate certificate blocks in this file according to their own logic, as well as to drop PEM block headers and inter-block data."
        }
      }
    }, 
    "io.k8s.api.storage.v1.VolumeAttributesClass": {
      "type": "object", 
      "required": [
        "driverName"
      ], 
      "x-kubernetes-group-version-kind": [
        {
          "kind": "VolumeAttributesClass", 
          "version": "v1", 
          "group": "storage.k8s.io"
        }
      ], 
      "description": "VolumeAttributesClass represents a specification of mutable volume attributes defined by the CSI driver. The class can be specified during dynamic provisioning of PersistentVolumeClaims, and changed in the PersistentVolumeClaim spec after provisioning.", 
      "properties": {
        "apiVersion": {
          "type": "string", 
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources"
        }, 
        "kind": {
          "enum": [
            "VolumeAttributesClass"
          ], 
          "type": "string", 
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
        }, 
        "driverName": {
          "type": "string", 
          "description": "Name of the CSI driver This field is immutable."
        }, 
        "parameters": {
          "additionalProperties": {
            "type": "string"
          }, 
          "type": "object", 
          "description": "parameters hold volume attributes defined by the CSI driver. These values are opaque to the Kubernetes and are passed directly to the CSI driver. The underlying storage provider supports changing these attributes on an existing volume, however the parameters field itself is immutable. To invoke a volume update, a new VolumeAttributesClass should be created with new parameters, and the PersistentVolumeClaim should be updated to reference the new VolumeAttributesClass.\n\nThis field is required and must contain at least one key/value pair. The keys cannot be empty, and the maximum number of parameters is 512, with a cumulative max size of 256K. If the CSI driver rejects invalid parameters, the target PersistentVolumeClaim will be set to an \"Infeasible\" state in the modifyVolumeStatus field."
        }, 
        "metadata": {
          "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata", 
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        }
      }
    }, 
    "io.k8s.api.storage.v1.VolumeAttachmentStatus": {
      "required": [
        "attached"
      ], 
      "type": "object", 
      "description": "VolumeAttachmentStatus is the status of a VolumeAttachment request.", 
      "properties": {
        "attachError": {
          "description": "attachError represents the last error encountered during attach operation, if any. This field must only be set by the entity completing the attach operation, i.e. the external-attacher.", 
          "$ref": "#/definitions/io.k8s.api.storage.v1.VolumeError"
        }, 
        "attachmentMetadata": {
          "additionalProperties": {
            "type": "string"
          }, 
          "type": "object", 
          "description": "attachmentMetadata is populated with any information returned by the attach operation, upon successful attach, that must be passed into subsequent WaitForAttach or Mount calls. This field must only be set by the entity completing the attach operation, i.e. the external-attacher."
        }, 
        "attached": {
          "type": "boolean", 
          "description": "attached indicates the volume is successfully attached. This field must only be set by the entity completing the attach operation, i.e. the external-attacher."
        }, 
        "detachError": {
          "description": "detachError represents the last error encountered during detach operation, if any. This field must only be set by the entity completing the detach operation, i.e. the external-attacher.", 
          "$ref": "#/definitions/io.k8s.api.storage.v1.VolumeError"
        }
      }
    }, 
    "io.k8s.api.core.v1.ConfigMap": {
      "type": "object", 
      "x-kubernetes-group-version-kind": [
        {
          "kind": "ConfigMap", 
          "version": "v1", 
          "group": ""
        }
      ], 
      "description": "ConfigMap holds configuration data for pods to consume.", 
      "properties": {
        "kind": {
          "enum": [
            "ConfigMap"
          ], 
          "type": "string", 
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
        }, 
        "metadata": {
          "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata", 
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        }, 
        "data": {
          "additionalProperties": {
            "type": "string"
          }, 
          "type": "object", 
          "description": "Data contains the configuration data. Each key must consist of alphanumeric characters, '-', '_' or '.'. Values with non-UTF-8 byte sequences must use the BinaryData field. The keys stored in Data must not overlap with the keys in the BinaryData field, this is enforced during validation process."
        }, 
        "binaryData": {
          "additionalProperties": {
            "type": "string", 
            "format": "byte"
          }, 
          "type": "object", 
          "description": "BinaryData contains the binary data. Each key must consist of alphanumeric characters, '-', '_' or '.'. BinaryData can contain byte sequences that are not in the UTF-8 range. The keys stored in BinaryData must not overlap with the ones in the Data field, this is enforced during validation process. Using this field will require 1.10+ apiserver and kubelet."
        }, 
        "apiVersion": {
          "type": "string", 
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources"
        }, 
        "immutable": {
          "type": "boolean", 
          "description": "Immutable, if set to true, ensures that data stored in the ConfigMap cannot be updated (only object metadata can be modified). If not set to true, the field can be modified at any time. Defaulted to nil."
        }
      }
    }, 
    "io.k8s.api.authorization.v1.NonResourceRule": {
      "required": [
        "verbs"
      ], 
      "type": "object", 
      "description": "NonResourceRule holds information that describes a rule for the non-resource", 
      "properties": {
        "verbs": {
          "items": {
            "type": "string"
          }, 
          "type": "array", 
          "description": "Verb is a list of kubernetes non-resource API verbs, like: get, post, put, delete, patch, head, options.  \"*\" means all.", 
          "x-kubernetes-list-type": "atomic"
        }, 
        "nonResourceURLs": {
          "items": {
            "type": "string"
          }, 
          "type": "array", 
          "description": "NonResourceURLs is a set of partial urls that a user should have access to.  *s are allowed, but only as the full, final step in the path.  \"*\" means all.", 
          "x-kubernetes-list-type": "atomic"
        }
      }
    }, 
    "io.k8s.api.core.v1.PodSpec": {
      "required": [
        "containers"
      ], 
      "type": "object", 
      "description": "PodSpec is a description of a pod.", 
      "properties": {
        "dnsPolicy": {
          "type": "string", 
          "description": "Set DNS policy for the pod. Defaults to \"ClusterFirst\". Valid values are 'ClusterFirstWithHostNet', 'ClusterFirst', 'Default' or 'None'. DNS parameters given in DNSConfig will be merged with the policy selected with DNSPolicy. To have DNS options set along with hostNetwork, you have to specify DNS policy explicitly to 'ClusterFirstWithHostNet'."
        }, 
        "hostnameOverride": {
          "type": "string", 
          "description": "HostnameOverride specifies an explicit override for the pod's hostname as perceived by the pod. This field only specifies the pod's hostname and does not affect its DNS records. When this field is set to a non-empty string: - It takes precedence over the values set in `hostname` and `subdomain`. - The Pod's hostname will be set to this value. - `setHostnameAsFQDN` must be nil or set to false. - `hostNetwork` must be set to false.\n\nThis field must be a valid DNS subdomain as defined in RFC 1123 and contain at most 64 characters. Requires the HostnameOverride feature gate to be enabled."
        }, 
        "hostNetwork": {
          "type": "boolean", 
          "description": "Host networking requested for this pod. Use the host's network namespace. When using HostNetwork you should specify ports so the scheduler is aware. When `hostNetwork` is true, specified `hostPort` fields in port definitions must match `containerPort`, and unspecified `hostPort` fields in port definitions are defaulted to match `containerPort`. Default to false."
        }, 
        "hostUsers": {
          "type": "boolean", 
          "description": "Use the host's user namespace. Optional: Default to true. If set to true or not present, the pod will be run in the host user namespace, useful for when the pod needs a feature only available to the host user namespace, such as loading a kernel module with CAP_SYS_MODULE. When set to false, a new userns is created for the pod. Setting false is useful for mitigating container breakout vulnerabilities even allowing users to run their containers as root without actually having root privileges on the host. This field is alpha-level and is only honored by servers that enable the UserNamespacesSupport feature."
        }, 
        "restartPolicy": {
          "type": "string", 
          "description": "Restart policy for all containers within the pod. One of Always, OnFailure, Never. In some contexts, only a subset of those values may be permitted. Default to Always. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#restart-policy"
        }, 
        "automountServiceAccountToken": {
          "type": "boolean", 
          "description": "AutomountServiceAccountToken indicates whether a service account token should be automatically mounted."
        }, 
        "priorityClassName": {
          "type": "string", 
          "description": "If specified, indicates the pod's priority. \"system-node-critical\" and \"system-cluster-critical\" are two special keywords which indicate the highest priorities with the former being the highest priority. Any other name must be defined by creating a PriorityClass object with that name. If not specified, the pod priority will be default or zero if there is no default."
        }, 
        "securityContext": {
          "description": "SecurityContext holds pod-level security attributes and common container settings. Optional: Defaults to empty.  See type description for default values of each field.", 
          "$ref": "#/definitions/io.k8s.api.core.v1.PodSecurityContext"
        }, 
        "nodeName": {
          "type": "string", 
          "description": "NodeName indicates in which node this pod is scheduled. If empty, this pod is a candidate for scheduling by the scheduler defined in schedulerName. Once this field is set, the kubelet for this node becomes responsible for the lifecycle of this pod. This field should not be used to express a desire for the pod to be scheduled on a specific node. https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#nodename"
        }, 
        "hostAliases": {
          "description": "HostAliases is an optional list of hosts and IPs that will be injected into the pod's hosts file if specified.", 
          "x-kubernetes-list-map-keys": [
            "ip"
          ], 
          "x-kubernetes-patch-merge-key": "ip", 
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.HostAlias"
          }, 
          "type": "array", 
          "x-kubernetes-list-type": "map", 
          "x-kubernetes-patch-strategy": "merge"
        }, 
        "hostname": {
          "type": "string", 
          "description": "Specifies the hostname of the Pod If not specified, the pod's hostname will be set to a system-defined value."
        }, 
        "serviceAccount": {
          "type": "string", 
          "description": "DeprecatedServiceAccount is a deprecated alias for ServiceAccountName. Deprecated: Use serviceAccountName instead."
        }, 
        "nodeSelector": {
          "additionalProperties": {
            "type": "string"
          }, 
          "type": "object", 
          "x-kubernetes-map-type": "atomic", 
          "description": "NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node. More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/"
        }, 
        "priority": {
          "type": "integer", 
          "description": "The priority value. Various system components use this field to find the priority of the pod. When Priority Admission Controller is enabled, it prevents users from setting this field. The admission controller populates this field from PriorityClassName. The higher the value, the higher the priority.", 
          "format": "int32"
        }, 
        "affinity": {
          "description": "If specified, the pod's scheduling constraints", 
          "$ref": "#/definitions/io.k8s.api.core.v1.Affinity"
        }, 
        "schedulingGates": {
          "description": "SchedulingGates is an opaque list of values that if specified will block scheduling the pod. If schedulingGates is not empty, the pod will stay in the SchedulingGated state and the scheduler will not attempt to schedule the pod.\n\nSchedulingGates can only be set at pod creation time, and be removed only afterwards.", 
          "x-kubernetes-list-map-keys": [
            "name"
          ], 
          "x-kubernetes-patch-merge-key": "name", 
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.PodSchedulingGate"
          }, 
          "type": "array", 
          "x-kubernetes-list-type": "map", 
          "x-kubernetes-patch-strategy": "merge"
        }, 
        "overhead": {
          "additionalProperties": {
            "$ref": "#/definitions/io.k8s.apimachinery.pkg.api.resource.Quantity"
          }, 
          "type": "object", 
          "description": "Overhead represents the resource overhead associated with running a pod for a given RuntimeClass. This field will be autopopulated at admission time by the RuntimeClass admission controller. If the RuntimeClass admission controller is enabled, overhead must not be set in Pod create requests. The RuntimeClass admission controller will reject Pod create requests which have the overhead already set. If RuntimeClass is configured and selected in the PodSpec, Overhead will be set to the value defined in the corresponding RuntimeClass, otherwise it will remain unset and treated as zero. More info: https://git.k8s.io/enhancements/keps/sig-node/688-pod-overhead/README.md"
        }, 
        "subdomain": {
          "type": "string", 
          "description": "If specified, the fully qualified Pod hostname will be \"<hostname>.<subdomain>.<pod namespace>.svc.<cluster domain>\". If not specified, the pod will not have a domainname at all."
        }, 
        "resources": {
          "description": "Resources is the total amount of CPU and Memory resources required by all containers in the pod. It supports specifying Requests and Limits for \"cpu\", \"memory\" and \"hugepages-\" resource names only. ResourceClaims are not supported.\n\nThis field enables fine-grained control over resource allocation for the entire pod, allowing resource sharing among containers in a pod.\n\nThis is an alpha field and requires enabling the PodLevelResources feature gate.", 
          "$ref": "#/definitions/io.k8s.api.core.v1.ResourceRequirements"
        }, 
        "preemptionPolicy": {
          "type": "string", 
          "description": "PreemptionPolicy is the Policy for preempting pods with lower priority. One of Never, PreemptLowerPriority. Defaults to PreemptLowerPriority if unset."
        }, 
        "shareProcessNamespace": {
          "type": "boolean", 
          "description": "Share a single process namespace between all of the containers in a pod. When this is set containers will be able to view and signal processes from other containers in the same pod, and the first process in each container will not be assigned PID 1. HostPID and ShareProcessNamespace cannot both be set. Optional: Default to false."
        }, 
        "serviceAccountName": {
          "type": "string", 
          "description": "ServiceAccountName is the name of the ServiceAccount to use to run this pod. More info: https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/"
        }, 
        "schedulerName": {
          "type": "string", 
          "description": "If specified, the pod will be dispatched by specified scheduler. If not specified, the pod will be dispatched by default scheduler."
        }, 
        "setHostnameAsFQDN": {
          "type": "boolean", 
          "description": "If true the pod's hostname will be configured as the pod's FQDN, rather than the leaf name (the default). In Linux containers, this means setting the FQDN in the hostname field of the kernel (the nodename field of struct utsname). In Windows containers, this means setting the registry value of hostname for the registry key HKEY_LOCAL_MACHINE\\\\SYSTEM\\\\CurrentControlSet\\\\Services\\\\Tcpip\\\\Parameters to FQDN. If a pod does not have FQDN, this has no effect. Default to false."
        }, 
        "enableServiceLinks": {
          "type": "boolean", 
          "description": "EnableServiceLinks indicates whether information about services should be injected into pod's environment variables, matching the syntax of Docker links. Optional: Defaults to true."
        }, 
        "hostIPC": {
          "type": "boolean", 
          "description": "Use the host's ipc namespace. Optional: Default to false."
        }, 
        "ephemeralContainers": {
          "description": "List of ephemeral containers run in this pod. Ephemeral containers may be run in an existing pod to perform user-initiated actions such as debugging. This list cannot be specified when creating a pod, and it cannot be modified by updating the pod spec. In order to add an ephemeral container to an existing pod, use the pod's ephemeralcontainers subresource.", 
          "x-kubernetes-list-map-keys": [
            "name"
          ], 
          "x-kubernetes-patch-merge-key": "name", 
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.EphemeralContainer"
          }, 
          "type": "array", 
          "x-kubernetes-list-type": "map", 
          "x-kubernetes-patch-strategy": "merge"
        }, 
        "topologySpreadConstraints": {
          "description": "TopologySpreadConstraints describes how a group of pods ought to spread across topology domains. Scheduler will schedule pods in a way which abides by the constraints. All topologySpreadConstraints are ANDed.", 
          "x-kubernetes-list-map-keys": [
            "topologyKey", 
            "whenUnsatisfiable"
          ], 
          "x-kubernetes-patch-merge-key": "topologyKey", 
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.TopologySpreadConstraint"
          }, 
          "type": "array", 
          "x-kubernetes-list-type": "map", 
          "x-kubernetes-patch-strategy": "merge"
        }, 
        "runtimeClassName": {
          "type": "string", 
          "description": "RuntimeClassName refers to a RuntimeClass object in the node.k8s.io group, which should be used to run this pod.  If no RuntimeClass resource matches the named class, the pod will not be run. If unset or empty, the \"legacy\" RuntimeClass will be used, which is an implicit class with an empty definition that uses the default runtime handler. More info: https://git.k8s.io/enhancements/keps/sig-node/585-runtime-class"
        }, 
        "resourceClaims": {
          "description": "ResourceClaims defines which ResourceClaims must be allocated and reserved before the Pod is allowed to start. The resources will be made available to those containers which consume them by name.\n\nThis is an alpha field and requires enabling the DynamicResourceAllocation feature gate.\n\nThis field is immutable.", 
          "x-kubernetes-list-map-keys": [
            "name"
          ], 
          "x-kubernetes-patch-merge-key": "name", 
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.PodResourceClaim"
          }, 
          "type": "array", 
          "x-kubernetes-list-type": "map", 
          "x-kubernetes-patch-strategy": "merge,retainKeys"
        }, 
        "dnsConfig": {
          "description": "Specifies the DNS parameters of a pod. Parameters specified here will be merged to the generated DNS configuration based on DNSPolicy.", 
          "$ref": "#/definitions/io.k8s.api.core.v1.PodDNSConfig"
        }, 
        "os": {
          "description": "Specifies the OS of the containers in the pod. Some pod and container fields are restricted if this is set.\n\nIf the OS field is set to linux, the following fields must be unset: -securityContext.windowsOptions\n\nIf the OS field is set to windows, following fields must be unset: - spec.hostPID - spec.hostIPC - spec.hostUsers - spec.resources - spec.securityContext.appArmorProfile - spec.securityContext.seLinuxOptions - spec.securityContext.seccompProfile - spec.securityContext.fsGroup - spec.securityContext.fsGroupChangePolicy - spec.securityContext.sysctls - spec.shareProcessNamespace - spec.securityContext.runAsUser - spec.securityContext.runAsGroup - spec.securityContext.supplementalGroups - spec.securityContext.supplementalGroupsPolicy - spec.containers[*].securityContext.appArmorProfile - spec.containers[*].securityContext.seLinuxOptions - spec.containers[*].securityContext.seccompProfile - spec.containers[*].securityContext.capabilities - spec.containers[*].securityContext.readOnlyRootFilesystem - spec.containers[*].securityContext.privileged - spec.containers[*].securityContext.allowPrivilegeEscalation - spec.containers[*].securityContext.procMount - spec.containers[*].securityContext.runAsUser - spec.containers[*].securityContext.runAsGroup", 
          "$ref": "#/definitions/io.k8s.api.core.v1.PodOS"
        }, 
        "activeDeadlineSeconds": {
          "type": "integer", 
          "description": "Optional duration in seconds the pod may be active on the node relative to StartTime before the system will actively try to mark it failed and kill associated containers. Value must be a positive integer.", 
          "format": "int64"
        }, 
        "terminationGracePeriodSeconds": {
          "type": "integer", 
          "description": "Optional duration in seconds the pod needs to terminate gracefully. May be decreased in delete request. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). If this value is nil, the default grace period will be used instead. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. Defaults to 30 seconds.", 
          "format": "int64"
        }, 
        "readinessGates": {
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.PodReadinessGate"
          }, 
          "type": "array", 
          "description": "If specified, all readiness gates will be evaluated for pod readiness. A pod is ready when all its containers are ready AND all conditions specified in the readiness gates have status equal to \"True\" More info: https://git.k8s.io/enhancements/keps/sig-network/580-pod-readiness-gates", 
          "x-kubernetes-list-type": "atomic"
        }, 
        "containers": {
          "description": "List of containers belonging to the pod. Containers cannot currently be added or removed. There must be at least one container in a Pod. Cannot be updated.", 
          "x-kubernetes-list-map-keys": [
            "name"
          ], 
          "x-kubernetes-patch-merge-key": "name", 
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.Container"
          }, 
          "type": "array", 
          "x-kubernetes-list-type": "map", 
          "x-kubernetes-patch-strategy": "merge"
        }, 
        "hostPID": {
          "type": "boolean", 
          "description": "Use the host's pid namespace. Optional: Default to false."
        }, 
        "volumes": {
          "description": "List of volumes that can be mounted by containers belonging to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes", 
          "x-kubernetes-list-map-keys": [
            "name"
          ], 
          "x-kubernetes-patch-merge-key": "name", 
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.Volume"
          }, 
          "type": "array", 
          "x-kubernetes-list-type": "map", 
          "x-kubernetes-patch-strategy": "merge,retainKeys"
        }, 
        "tolerations": {
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.Toleration"
          }, 
          "type": "array", 
          "description": "If specified, the pod's tolerations.", 
          "x-kubernetes-list-type": "atomic"
        }, 
        "initContainers": {
          "description": "List of initialization containers belonging to the pod. Init containers are executed in order prior to containers being started. If any init container fails, the pod is considered to have failed and is handled according to its restartPolicy. The name for an init container or normal container must be unique among all containers. Init containers may not have Lifecycle actions, Readiness probes, Liveness probes, or Startup probes. The resourceRequirements of an init container are taken into account during scheduling by finding the highest request/limit for each resource type, and then using the max of that value or the sum of the normal containers. Limits are applied to init containers in a similar fashion. Init containers cannot currently be added or removed. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/init-containers/", 
          "x-kubernetes-list-map-keys": [
            "name"
          ], 
          "x-kubernetes-patch-merge-key": "name", 
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.Container"
          }, 
          "type": "array", 
          "x-kubernetes-list-type": "map", 
          "x-kubernetes-patch-strategy": "merge"
        }, 
        "imagePullSecrets": {
          "description": "ImagePullSecrets is an optional list of references to secrets in the same namespace to use for pulling any of the images used by this PodSpec. If specified, these secrets will be passed to individual puller implementations for them to use. More info: https://kubernetes.io/docs/concepts/containers/images#specifying-imagepullsecrets-on-a-pod", 
          "x-kubernetes-list-map-keys": [
            "name"
          ], 
          "x-kubernetes-patch-merge-key": "name", 
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.LocalObjectReference"
          }, 
          "type": "array", 
          "x-kubernetes-list-type": "map", 
          "x-kubernetes-patch-strategy": "merge"
        }
      }
    }, 
    "io.k8s.api.autoscaling.v2.PodsMetricStatus": {
      "required": [
        "metric", 
        "current"
      ], 
      "type": "object", 
      "description": "PodsMetricStatus indicates the current value of a metric describing each pod in the current scale target (for example, transactions-processed-per-second).", 
      "properties": {
        "current": {
          "description": "current contains the current value for the given metric", 
          "$ref": "#/definitions/io.k8s.api.autoscaling.v2.MetricValueStatus"
        }, 
        "metric": {
          "description": "metric identifies the target metric by name and selector", 
          "$ref": "#/definitions/io.k8s.api.autoscaling.v2.MetricIdentifier"
        }
      }
    }, 
    "io.k8s.api.admissionregistration.v1beta1.Mutation": {
      "required": [
        "patchType"
      ], 
      "type": "object", 
      "description": "Mutation specifies the CEL expression which is used to apply the Mutation.", 
      "properties": {
        "applyConfiguration": {
          "description": "applyConfiguration defines the desired configuration values of an object. The configuration is applied to the admission object using [structured merge diff](https://github.com/kubernetes-sigs/structured-merge-diff). A CEL expression is used to create apply configuration.", 
          "$ref": "#/definitions/io.k8s.api.admissionregistration.v1beta1.ApplyConfiguration"
        }, 
        "jsonPatch": {
          "description": "jsonPatch defines a [JSON patch](https://jsonpatch.com/) operation to perform a mutation to the object. A CEL expression is used to create the JSON patch.", 
          "$ref": "#/definitions/io.k8s.api.admissionregistration.v1beta1.JSONPatch"
        }, 
        "patchType": {
          "type": "string", 
          "description": "patchType indicates the patch strategy used. Allowed values are \"ApplyConfiguration\" and \"JSONPatch\". Required."
        }
      }
    }, 
    "io.k8s.api.core.v1.ObjectReference": {
      "type": "object", 
      "x-kubernetes-map-type": "atomic", 
      "description": "ObjectReference contains enough information to let you inspect or modify the referred object.", 
      "properties": {
        "fieldPath": {
          "type": "string", 
          "description": "If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: \"spec.containers{name}\" (where \"name\" refers to the name of the container that triggered the event) or if no container name is specified \"spec.containers[2]\" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object."
        }, 
        "kind": {
          "type": "string", 
          "description": "Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
        }, 
        "name": {
          "type": "string", 
          "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"
        }, 
        "resourceVersion": {
          "type": "string", 
          "description": "Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency"
        }, 
        "namespace": {
          "type": "string", 
          "description": "Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/"
        }, 
        "apiVersion": {
          "type": "string", 
          "description": "API version of the referent."
        }, 
        "uid": {
          "type": "string", 
          "description": "UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids"
        }
      }
    }, 
    "io.k8s.api.core.v1.PersistentVolumeClaimVolumeSource": {
      "required": [
        "claimName"
      ], 
      "type": "object", 
      "description": "PersistentVolumeClaimVolumeSource references the user's PVC in the same namespace. This volume finds the bound PV and mounts that volume for the pod. A PersistentVolumeClaimVolumeSource is, essentially, a wrapper around another type of volume that is owned by someone else (the system).", 
      "properties": {
        "readOnly": {
          "type": "boolean", 
          "description": "readOnly Will force the ReadOnly setting in VolumeMounts. Default false."
        }, 
        "claimName": {
          "type": "string", 
          "description": "claimName is the name of a PersistentVolumeClaim in the same namespace as the pod using this volume. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims"
        }
      }
    }, 
    "io.k8s.api.resource.v1beta2.DeviceClass": {
      "type": "object", 
      "required": [
        "spec"
      ], 
      "x-kubernetes-group-version-kind": [
        {
          "kind": "DeviceClass", 
          "version": "v1beta2", 
          "group": "resource.k8s.io"
        }
      ], 
      "description": "DeviceClass is a vendor- or admin-provided resource that contains device configuration and selectors. It can be referenced in the device requests of a claim to apply these presets. Cluster scoped.\n\nThis is an alpha type and requires enabling the DynamicResourceAllocation feature gate.", 
      "properties": {
        "kind": {
          "enum": [
            "DeviceClass"
          ], 
          "type": "string", 
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
        }, 
        "spec": {
          "description": "Spec defines what can be allocated and how to configure it.\n\nThis is mutable. Consumers have to be prepared for classes changing at any time, either because they get updated or replaced. Claim allocations are done once based on whatever was set in classes at the time of allocation.\n\nChanging the spec automatically increments the metadata.generation number.", 
          "$ref": "#/definitions/io.k8s.api.resource.v1beta2.DeviceClassSpec"
        }, 
        "apiVersion": {
          "type": "string", 
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources"
        }, 
        "metadata": {
          "description": "Standard object metadata", 
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        }
      }
    }, 
    "io.k8s.api.resource.v1beta1.ResourceSliceList": {
      "type": "object", 
      "required": [
        "items"
      ], 
      "x-kubernetes-group-version-kind": [
        {
          "kind": "ResourceSliceList", 
          "version": "v1beta1", 
          "group": "resource.k8s.io"
        }
      ], 
      "description": "ResourceSliceList is a collection of ResourceSlices.", 
      "properties": {
        "items": {
          "items": {
            "$ref": "#/definitions/io.k8s.api.resource.v1beta1.ResourceSlice"
          }, 
          "type": "array", 
          "description": "Items is the list of resource ResourceSlices."
        }, 
        "kind": {
          "enum": [
            "ResourceSliceList"
          ], 
          "type": "string", 
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
        }, 
        "apiVersion": {
          "type": "string", 
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources"
        }, 
        "metadata": {
          "description": "Standard list metadata", 
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      }
    }, 
    "io.k8s.api.batch.v1.PodFailurePolicyOnPodConditionsPattern": {
      "required": [
        "type", 
        "status"
      ], 
      "type": "object", 
      "description": "PodFailurePolicyOnPodConditionsPattern describes a pattern for matching an actual pod condition type.", 
      "properties": {
        "status": {
          "type": "string", 
          "description": "Specifies the required Pod condition status. To match a pod condition it is required that the specified status equals the pod condition status. Defaults to True."
        }, 
        "type": {
          "type": "string", 
          "description": "Specifies the required Pod condition type. To match a pod condition it is required that specified type equals the pod condition type."
        }
      }
    }, 
    "io.k8s.apimachinery.pkg.apis.meta.v1.ManagedFieldsEntry": {
      "type": "object", 
      "description": "ManagedFieldsEntry is a workflow-id, a FieldSet and the group version of the resource that the fieldset applies to.", 
      "properties": {
        "manager": {
          "type": "string", 
          "description": "Manager is an identifier of the workflow managing these fields."
        }, 
        "subresource": {
          "type": "string", 
          "description": "Subresource is the name of the subresource used to update that object, or empty string if the object was updated through the main resource. The value of this field is used to distinguish between managers, even if they share the same name. For example, a status update will be distinct from a regular update using the same manager name. Note that the APIVersion field is not related to the Subresource field and it always corresponds to the version of the main resource."
        }, 
        "time": {
          "description": "Time is the timestamp of when the ManagedFields entry was added. The timestamp will also be updated if a field is added, the manager changes any of the owned fields value or removes a field. The timestamp does not update when a field is removed from the entry because another manager took it over.", 
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
        }, 
        "fieldsV1": {
          "description": "FieldsV1 holds the first JSON version format as described in the \"FieldsV1\" type.", 
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.FieldsV1"
        }, 
        "operation": {
          "type": "string", 
          "description": "Operation is the type of operation which lead to this ManagedFieldsEntry being created. The only valid values for this field are 'Apply' and 'Update'."
        }, 
        "fieldsType": {
          "type": "string", 
          "description": "FieldsType is the discriminator for the different fields format and version. There is currently only one possible value: \"FieldsV1\""
        }, 
        "apiVersion": {
          "type": "string", 
          "description": "APIVersion defines the version of this resource that this field set applies to. The format is \"group/version\" just like the top-level APIVersion field. It is necessary to track the version of a field set because it cannot be automatically converted."
        }
      }
    }, 
    "io.k8s.api.resource.v1beta2.OpaqueDeviceConfiguration": {
      "required": [
        "driver", 
        "parameters"
      ], 
      "type": "object", 
      "description": "OpaqueDeviceConfiguration contains configuration parameters for a driver in a format defined by the driver vendor.", 
      "properties": {
        "driver": {
          "type": "string", 
          "description": "Driver is used to determine which kubelet plugin needs to be passed these configuration parameters.\n\nAn admission policy provided by the driver developer could use this to decide whether it needs to validate them.\n\nMust be a DNS subdomain and should end with a DNS domain owned by the vendor of the driver."
        }, 
        "parameters": {
          "description": "Parameters can contain arbitrary data. It is the responsibility of the driver developer to handle validation and versioning. Typically this includes self-identification and a version (\"kind\" + \"apiVersion\" for Kubernetes types), with conversion between different versions.\n\nThe length of the raw data must be smaller or equal to 10 Ki.", 
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.runtime.RawExtension"
        }
      }
    }, 
    "io.k8s.api.certificates.v1alpha1.PodCertificateRequestList": {
      "type": "object", 
      "required": [
        "items"
      ], 
      "x-kubernetes-group-version-kind": [
        {
          "kind": "PodCertificateRequestList", 
          "version": "v1alpha1", 
          "group": "certificates.k8s.io"
        }
      ], 
      "description": "PodCertificateRequestList is a collection of PodCertificateRequest objects", 
      "properties": {
        "items": {
          "items": {
            "$ref": "#/definitions/io.k8s.api.certificates.v1alpha1.PodCertificateRequest"
          }, 
          "type": "array", 
          "description": "items is a collection of PodCertificateRequest objects"
        }, 
        "kind": {
          "enum": [
            "PodCertificateRequestList"
          ], 
          "type": "string", 
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
        }, 
        "apiVersion": {
          "type": "string", 
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources"
        }, 
        "metadata": {
          "description": "metadata contains the list metadata.", 
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      }
    }, 
    "io.k8s.api.core.v1.HTTPHeader": {
      "required": [
        "name", 
        "value"
      ], 
      "type": "object", 
      "description": "HTTPHeader describes a custom header to be used in HTTP probes", 
      "properties": {
        "name": {
          "type": "string", 
          "description": "The header field name. This will be canonicalized upon output, so case-variant names will be understood as the same header."
        }, 
        "value": {
          "type": "string", 
          "description": "The header field value"
        }
      }
    }, 
    "io.k8s.api.networking.v1.IngressBackend": {
      "type": "object", 
      "description": "IngressBackend describes all endpoints for a given service and port.", 
      "properties": {
        "resource": {
          "description": "resource is an ObjectRef to another Kubernetes resource in the namespace of the Ingress object. If resource is specified, a service.Name and service.Port must not be specified. This is a mutually exclusive setting with \"Service\".", 
          "$ref": "#/definitions/io.k8s.api.core.v1.TypedLocalObjectReference"
        }, 
        "service": {
          "description": "service references a service as a backend. This is a mutually exclusive setting with \"Resource\".", 
          "$ref": "#/definitions/io.k8s.api.networking.v1.IngressServiceBackend"
        }
      }
    }, 
    "io.k8s.api.core.v1.ConfigMapKeySelector": {
      "type": "object", 
      "required": [
        "key"
      ], 
      "x-kubernetes-map-type": "atomic", 
      "description": "Selects a key from a ConfigMap.", 
      "properties": {
        "optional": {
          "type": "boolean", 
          "description": "Specify whether the ConfigMap or its key must be defined"
        }, 
        "name": {
          "type": "string", 
          "description": "Name of the referent. This field is effectively required, but due to backwards compatibility is allowed to be empty. Instances of this type with an empty value here are almost certainly wrong. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"
        }, 
        "key": {
          "type": "string", 
          "description": "The key to select."
        }
      }
    }, 
    "io.k8s.api.networking.v1.IPBlock": {
      "required": [
        "cidr"
      ], 
      "type": "object", 
      "description": "IPBlock describes a particular CIDR (Ex. \"192.168.1.0/24\",\"2001:db8::/64\") that is allowed to the pods matched by a NetworkPolicySpec's podSelector. The except entry describes CIDRs that should not be included within this rule.", 
      "properties": {
        "cidr": {
          "type": "string", 
          "description": "cidr is a string representing the IPBlock Valid examples are \"192.168.1.0/24\" or \"2001:db8::/64\""
        }, 
        "except": {
          "items": {
            "type": "string"
          }, 
          "type": "array", 
          "description": "except is a slice of CIDRs that should not be included within an IPBlock Valid examples are \"192.168.1.0/24\" or \"2001:db8::/64\" Except values will be rejected if they are outside the cidr range", 
          "x-kubernetes-list-type": "atomic"
        }
      }
    }, 
    "io.k8s.api.core.v1.EnvVarSource": {
      "type": "object", 
      "description": "EnvVarSource represents a source for the value of an EnvVar.", 
      "properties": {
        "secretKeyRef": {
          "description": "Selects a key of a secret in the pod's namespace", 
          "$ref": "#/definitions/io.k8s.api.core.v1.SecretKeySelector"
        }, 
        "fieldRef": {
          "description": "Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['<KEY>']`, `metadata.annotations['<KEY>']`, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.", 
          "$ref": "#/definitions/io.k8s.api.core.v1.ObjectFieldSelector"
        }, 
        "fileKeyRef": {
          "description": "FileKeyRef selects a key of the env file. Requires the EnvFiles feature gate to be enabled.", 
          "$ref": "#/definitions/io.k8s.api.core.v1.FileKeySelector"
        }, 
        "configMapKeyRef": {
          "description": "Selects a key of a ConfigMap.", 
          "$ref": "#/definitions/io.k8s.api.core.v1.ConfigMapKeySelector"
        }, 
        "resourceFieldRef": {
          "description": "Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.", 
          "$ref": "#/definitions/io.k8s.api.core.v1.ResourceFieldSelector"
        }
      }
    }, 
    "io.k8s.api.batch.v1.JobCondition": {
      "required": [
        "type", 
        "status"
      ], 
      "type": "object", 
      "description": "JobCondition describes current state of a job.", 
      "properties": {
        "status": {
          "type": "string", 
          "description": "Status of the condition, one of True, False, Unknown."
        }, 
        "reason": {
          "type": "string", 
          "description": "(brief) reason for the condition's last transition."
        }, 
        "lastProbeTime": {
          "description": "Last time the condition was checked.", 
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
        }, 
        "type": {
          "type": "string", 
          "description": "Type of job condition, Complete or Failed."
        }, 
        "message": {
          "type": "string", 
          "description": "Human readable message indicating details about last transition."
        }, 
        "lastTransitionTime": {
          "description": "Last time the condition transit from one status to another.", 
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
        }
      }
    }, 
    "io.k8s.api.core.v1.NodeAffinity": {
      "type": "object", 
      "description": "Node affinity is a group of node affinity scheduling rules.", 
      "properties": {
        "requiredDuringSchedulingIgnoredDuringExecution": {
          "description": "If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to an update), the system may or may not try to eventually evict the pod from its node.", 
          "$ref": "#/definitions/io.k8s.api.core.v1.NodeSelector"
        }, 
        "preferredDuringSchedulingIgnoredDuringExecution": {
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.PreferredSchedulingTerm"
          }, 
          "type": "array", 
          "description": "The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding \"weight\" to the sum if the node matches the corresponding matchExpressions; the node(s) with the highest sum are the most preferred.", 
          "x-kubernetes-list-type": "atomic"
        }
      }
    }, 
    "io.k8s.apimachinery.pkg.api.resource.Quantity": {
      "oneOf": [
        {
          "type": "string"
        }, 
        {
          "type": "integer"
        }
      ]
    }, 
    "io.k8s.api.resource.v1beta2.DeviceSubRequest": {
      "required": [
        "name", 
        "deviceClassName"
      ], 
      "type": "object", 
      "description": "DeviceSubRequest describes a request for device provided in the claim.spec.devices.requests[].firstAvailable array. Each is typically a request for a single resource like a device, but can also ask for several identical devices.\n\nDeviceSubRequest is similar to ExactDeviceRequest, but doesn't expose the AdminAccess field as that one is only supported when requesting a specific device.", 
      "properties": {
        "count": {
          "type": "integer", 
          "description": "Count is used only when the count mode is \"ExactCount\". Must be greater than zero. If AllocationMode is ExactCount and this field is not specified, the default is one.", 
          "format": "int64"
        }, 
        "capacity": {
          "description": "Capacity define resource requirements against each capacity.\n\nIf this field is unset and the device supports multiple allocations, the default value will be applied to each capacity according to requestPolicy. For the capacity that has no requestPolicy, default is the full capacity value.\n\nApplies to each device allocation. If Count > 1, the request fails if there aren't enough devices that meet the requirements. If AllocationMode is set to All, the request fails if there are devices that otherwise match the request, and have this capacity, with a value >= the requested amount, but which cannot be allocated to this request.", 
          "$ref": "#/definitions/io.k8s.api.resource.v1beta2.CapacityRequirements"
        }, 
        "name": {
          "type": "string", 
          "description": "Name can be used to reference this subrequest in the list of constraints or the list of configurations for the claim. References must use the format <main request>/<subrequest>.\n\nMust be a DNS label."
        }, 
        "tolerations": {
          "items": {
            "$ref": "#/definitions/io.k8s.api.resource.v1beta2.DeviceToleration"
          }, 
          "type": "array", 
          "description": "If specified, the request's tolerations.\n\nTolerations for NoSchedule are required to allocate a device which has a taint with that effect. The same applies to NoExecute.\n\nIn addition, should any of the allocated devices get tainted with NoExecute after allocation and that effect is not tolerated, then all pods consuming the ResourceClaim get deleted to evict them. The scheduler will not let new pods reserve the claim while it has these tainted devices. Once all pods are evicted, the claim will get deallocated.\n\nThe maximum number of tolerations is 16.\n\nThis is an alpha field and requires enabling the DRADeviceTaints feature gate.", 
          "x-kubernetes-list-type": "atomic"
        }, 
        "deviceClassName": {
          "type": "string", 
          "description": "DeviceClassName references a specific DeviceClass, which can define additional configuration and selectors to be inherited by this subrequest.\n\nA class is required. Which classes are available depends on the cluster.\n\nAdministrators may use this to restrict which devices may get requested by only installing classes with selectors for permitted devices. If users are free to request anything without restrictions, then administrators can create an empty DeviceClass for users to reference."
        }, 
        "allocationMode": {
          "type": "string", 
          "description": "AllocationMode and its related fields define how devices are allocated to satisfy this subrequest. Supported values are:\n\n- ExactCount: This request is for a specific number of devices.\n  This is the default. The exact number is provided in the\n  count field.\n\n- All: This subrequest is for all of the matching devices in a pool.\n  Allocation will fail if some devices are already allocated,\n  unless adminAccess is requested.\n\nIf AllocationMode is not specified, the default mode is ExactCount. If the mode is ExactCount and count is not specified, the default count is one. Any other subrequests must specify this field.\n\nMore modes may get added in the future. Clients must refuse to handle requests with unknown modes."
        }, 
        "selectors": {
          "items": {
            "$ref": "#/definitions/io.k8s.api.resource.v1beta2.DeviceSelector"
          }, 
          "type": "array", 
          "description": "Selectors define criteria which must be satisfied by a specific device in order for that device to be considered for this subrequest. All selectors must be satisfied for a device to be considered.", 
          "x-kubernetes-list-type": "atomic"
        }
      }
    }, 
    "io.k8s.api.apiserverinternal.v1alpha1.StorageVersionStatus": {
      "type": "object", 
      "description": "API server instances report the versions they can decode and the version they encode objects to when persisting objects in the backend.", 
      "properties": {
        "conditions": {
          "items": {
            "$ref": "#/definitions/io.k8s.api.apiserverinternal.v1alpha1.StorageVersionCondition"
          }, 
          "type": "array", 
          "description": "The latest available observations of the storageVersion's state.", 
          "x-kubernetes-list-map-keys": [
            "type"
          ], 
          "x-kubernetes-list-type": "map"
        }, 
        "commonEncodingVersion": {
          "type": "string", 
          "description": "If all API server instances agree on the same encoding storage version, then this field is set to that version. Otherwise this field is left empty. API servers should finish updating its storageVersionStatus entry before serving write operations, so that this field will be in sync with the reality."
        }, 
        "storageVersions": {
          "items": {
            "$ref": "#/definitions/io.k8s.api.apiserverinternal.v1alpha1.ServerStorageVersion"
          }, 
          "type": "array", 
          "description": "The reported versions per API server instance.", 
          "x-kubernetes-list-map-keys": [
            "apiServerID"
          ], 
          "x-kubernetes-list-type": "map"
        }
      }
    }, 
    "io.k8s.api.core.v1.PodOS": {
      "required": [
        "name"
      ], 
      "type": "object", 
      "description": "PodOS defines the OS parameters of a pod.", 
      "properties": {
        "name": {
          "type": "string", 
          "description": "Name is the name of the operating system. The currently supported values are linux and windows. Additional value may be defined in future and can be one of: https://github.com/opencontainers/runtime-spec/blob/master/config.md#platform-specific-configuration Clients should expect to handle additional values and treat unrecognized values in this field as os: null"
        }
      }
    }, 
    "io.k8s.api.core.v1.LimitRangeList": {
      "type": "object", 
      "required": [
        "items"
      ], 
      "x-kubernetes-group-version-kind": [
        {
          "kind": "LimitRangeList", 
          "version": "v1", 
          "group": ""
        }
      ], 
      "description": "LimitRangeList is a list of LimitRange items.", 
      "properties": {
        "items": {
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.LimitRange"
          }, 
          "type": "array", 
          "description": "Items is a list of LimitRange objects. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/"
        }, 
        "kind": {
          "enum": [
            "LimitRangeList"
          ], 
          "type": "string", 
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
        }, 
        "apiVersion": {
          "type": "string", 
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources"
        }, 
        "metadata": {
          "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds", 
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      }
    }, 
    "io.k8s.kube-aggregator.pkg.apis.apiregistration.v1.APIService": {
      "type": "object", 
      "x-kubernetes-group-version-kind": [
        {
          "kind": "APIService", 
          "version": "v1", 
          "group": "apiregistration.k8s.io"
        }
      ], 
      "description": "APIService represents a server for a particular GroupVersion. Name must be \"version.group\".", 
      "properties": {
        "status": {
          "description": "Status contains derived information about an API server", 
          "$ref": "#/definitions/io.k8s.kube-aggregator.pkg.apis.apiregistration.v1.APIServiceStatus"
        }, 
        "kind": {
          "enum": [
            "APIService"
          ], 
          "type": "string", 
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
        }, 
        "spec": {
          "description": "Spec contains information for locating and communicating with a server", 
          "$ref": "#/definitions/io.k8s.kube-aggregator.pkg.apis.apiregistration.v1.APIServiceSpec"
        }, 
        "apiVersion": {
          "type": "string", 
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources"
        }, 
        "metadata": {
          "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata", 
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        }
      }
    }, 
    "io.k8s.api.admissionregistration.v1.ParamKind": {
      "type": "object", 
      "x-kubernetes-map-type": "atomic", 
      "description": "ParamKind is a tuple of Group Kind and Version.", 
      "properties": {
        "kind": {
          "type": "string", 
          "description": "Kind is the API kind the resources belong to. Required."
        }, 
        "apiVersion": {
          "type": "string", 
          "description": "APIVersion is the API group version the resources belong to. In format of \"group/version\". Required."
        }
      }
    }, 
    "io.k8s.api.flowcontrol.v1.PriorityLevelConfigurationReference": {
      "required": [
        "name"
      ], 
      "type": "object", 
      "description": "PriorityLevelConfigurationReference contains information that points to the \"request-priority\" being used.", 
      "properties": {
        "name": {
          "type": "string", 
          "description": "`name` is the name of the priority level configuration being referenced Required."
        }
      }
    }, 
    "io.k8s.api.core.v1.ComponentStatus": {
      "type": "object", 
      "x-kubernetes-group-version-kind": [
        {
          "kind": "ComponentStatus", 
          "version": "v1", 
          "group": ""
        }
      ], 
      "description": "ComponentStatus (and ComponentStatusList) holds the cluster validation info. Deprecated: This API is deprecated in v1.19+", 
      "properties": {
        "kind": {
          "enum": [
            "ComponentStatus"
          ], 
          "type": "string", 
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
        }, 
        "conditions": {
          "description": "List of component conditions observed", 
          "x-kubernetes-list-map-keys": [
            "type"
          ], 
          "x-kubernetes-patch-merge-key": "type", 
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.ComponentCondition"
          }, 
          "type": "array", 
          "x-kubernetes-list-type": "map", 
          "x-kubernetes-patch-strategy": "merge"
        }, 
        "apiVersion": {
          "type": "string", 
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources"
        }, 
        "metadata": {
          "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata", 
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        }
      }
    }, 
    "io.k8s.api.core.v1.NodeRuntimeHandlerFeatures": {
      "type": "object", 
      "description": "NodeRuntimeHandlerFeatures is a set of features implemented by the runtime handler.", 
      "properties": {
        "userNamespaces": {
          "type": "boolean", 
          "description": "UserNamespaces is set to true if the runtime handler supports UserNamespaces, including for volumes."
        }, 
        "recursiveReadOnlyMounts": {
          "type": "boolean", 
          "description": "RecursiveReadOnlyMounts is set to true if the runtime handler supports RecursiveReadOnlyMounts."
        }
      }
    }, 
    "io.k8s.api.resource.v1.CounterSet": {
      "required": [
        "name", 
        "counters"
      ], 
      "type": "object", 
      "description": "CounterSet defines a named set of counters that are available to be used by devices defined in the ResourceSlice.\n\nThe counters are not allocatable by themselves, but can be referenced by devices. When a device is allocated, the portion of counters it uses will no longer be available for use by other devices.", 
      "properties": {
        "name": {
          "type": "string", 
          "description": "Name defines the name of the counter set. It must be a DNS label."
        }, 
        "counters": {
          "additionalProperties": {
            "$ref": "#/definitions/io.k8s.api.resource.v1.Counter"
          }, 
          "type": "object", 
          "description": "Counters defines the set of counters for this CounterSet The name of each counter must be unique in that set and must be a DNS label.\n\nThe maximum number of counters in all sets is 32."
        }
      }
    }, 
    "io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.CustomResourceValidation": {
      "type": "object", 
      "description": "CustomResourceValidation is a list of validation methods for CustomResources.", 
      "properties": {
        "openAPIV3Schema": {
          "description": "openAPIV3Schema is the OpenAPI v3 schema to use for validation and pruning.", 
          "$ref": "#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.JSONSchemaProps"
        }
      }
    }, 
    "io.k8s.api.autoscaling.v2.ResourceMetricSource": {
      "required": [
        "name", 
        "target"
      ], 
      "type": "object", 
      "description": "ResourceMetricSource indicates how to scale on a resource metric known to Kubernetes, as specified in requests and limits, describing each pod in the current scale target (e.g. CPU or memory).  The values will be averaged together before being compared to the target.  Such metrics are built in to Kubernetes, and have special scaling options on top of those available to normal per-pod metrics using the \"pods\" source.  Only one \"target\" type should be set.", 
      "properties": {
        "name": {
          "type": "string", 
          "description": "name is the name of the resource in question."
        }, 
        "target": {
          "description": "target specifies the target value for the given metric", 
          "$ref": "#/definitions/io.k8s.api.autoscaling.v2.MetricTarget"
        }
      }
    }, 
    "io.k8s.api.core.v1.Toleration": {
      "type": "object", 
      "description": "The pod this Toleration is attached to tolerates any taint that matches the triple <key,value,effect> using the matching operator <operator>.", 
      "properties": {
        "operator": {
          "type": "string", 
          "description": "Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category."
        }, 
        "key": {
          "type": "string", 
          "description": "Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys."
        }, 
        "tolerationSeconds": {
          "type": "integer", 
          "description": "TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.", 
          "format": "int64"
        }, 
        "effect": {
          "type": "string", 
          "description": "Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute."
        }, 
        "value": {
          "type": "string", 
          "description": "Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string."
        }
      }
    }, 
    "io.k8s.api.discovery.v1.EndpointPort": {
      "type": "object", 
      "x-kubernetes-map-type": "atomic", 
      "description": "EndpointPort represents a Port used by an EndpointSlice", 
      "properties": {
        "protocol": {
          "type": "string", 
          "description": "protocol represents the IP protocol for this port. Must be UDP, TCP, or SCTP. Default is TCP."
        }, 
        "name": {
          "type": "string", 
          "description": "name represents the name of this port. All ports in an EndpointSlice must have a unique name. If the EndpointSlice is derived from a Kubernetes service, this corresponds to the Service.ports[].name. Name must either be an empty string or pass DNS_LABEL validation: * must be no more than 63 characters long. * must consist of lower case alphanumeric characters or '-'. * must start and end with an alphanumeric character. Default is empty string."
        }, 
        "appProtocol": {
          "type": "string", 
          "description": "The application protocol for this port. This is used as a hint for implementations to offer richer behavior for protocols that they understand. This field follows standard Kubernetes label syntax. Valid values are either:\n\n* Un-prefixed protocol names - reserved for IANA standard service names (as per RFC-6335 and https://www.iana.org/assignments/service-names).\n\n* Kubernetes-defined prefixed names:\n  * 'kubernetes.io/h2c' - HTTP/2 prior knowledge over cleartext as described in https://www.rfc-editor.org/rfc/rfc9113.html#name-starting-http-2-with-prior-\n  * 'kubernetes.io/ws'  - WebSocket over cleartext as described in https://www.rfc-editor.org/rfc/rfc6455\n  * 'kubernetes.io/wss' - WebSocket over TLS as described in https://www.rfc-editor.org/rfc/rfc6455\n\n* Other protocols should use implementation-defined prefixed names such as mycompany.com/my-custom-protocol."
        }, 
        "port": {
          "type": "integer", 
          "description": "port represents the port number of the endpoint. If the EndpointSlice is derived from a Kubernetes service, this must be set to the service's target port. EndpointSlices used for other purposes may have a nil port.", 
          "format": "int32"
        }
      }
    }, 
    "io.k8s.api.core.v1.NodeSelectorRequirement": {
      "required": [
        "key", 
        "operator"
      ], 
      "type": "object", 
      "description": "A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.", 
      "properties": {
        "operator": {
          "type": "string", 
          "description": "Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt."
        }, 
        "values": {
          "items": {
            "type": "string"
          }, 
          "type": "array", 
          "description": "An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.", 
          "x-kubernetes-list-type": "atomic"
        }, 
        "key": {
          "type": "string", 
          "description": "The label key that the selector applies to."
        }
      }
    }, 
    "io.k8s.api.autoscaling.v1.ScaleSpec": {
      "type": "object", 
      "description": "ScaleSpec describes the attributes of a scale subresource.", 
      "properties": {
        "replicas": {
          "type": "integer", 
          "description": "replicas is the desired number of instances for the scaled object.", 
          "format": "int32"
        }
      }
    }, 
    "io.k8s.api.resource.v1.AllocationResult": {
      "type": "object", 
      "description": "AllocationResult contains attributes of an allocated resource.", 
      "properties": {
        "allocationTimestamp": {
          "description": "AllocationTimestamp stores the time when the resources were allocated. This field is not guaranteed to be set, in which case that time is unknown.\n\nThis is an alpha field and requires enabling the DRADeviceBindingConditions and DRAResourceClaimDeviceStatus feature gate.", 
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
        }, 
        "devices": {
          "description": "Devices is the result of allocating devices.", 
          "$ref": "#/definitions/io.k8s.api.resource.v1.DeviceAllocationResult"
        }, 
        "nodeSelector": {
          "description": "NodeSelector defines where the allocated resources are available. If unset, they are available everywhere.", 
          "$ref": "#/definitions/io.k8s.api.core.v1.NodeSelector"
        }
      }
    }, 
    "io.k8s.api.resource.v1beta1.AllocationResult": {
      "type": "object", 
      "description": "AllocationResult contains attributes of an allocated resource.", 
      "properties": {
        "allocationTimestamp": {
          "description": "AllocationTimestamp stores the time when the resources were allocated. This field is not guaranteed to be set, in which case that time is unknown.\n\nThis is an alpha field and requires enabling the DRADeviceBindingConditions and DRAResourceClaimDeviceStatus feature gate.", 
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
        }, 
        "devices": {
          "description": "Devices is the result of allocating devices.", 
          "$ref": "#/definitions/io.k8s.api.resource.v1beta1.DeviceAllocationResult"
        }, 
        "nodeSelector": {
          "description": "NodeSelector defines where the allocated resources are available. If unset, they are available everywhere.", 
          "$ref": "#/definitions/io.k8s.api.core.v1.NodeSelector"
        }
      }
    }, 
    "io.k8s.api.core.v1.ResourceFieldSelector": {
      "type": "object", 
      "required": [
        "resource"
      ], 
      "x-kubernetes-map-type": "atomic", 
      "description": "ResourceFieldSelector represents container resources (cpu, memory) and their output format", 
      "properties": {
        "containerName": {
          "type": "string", 
          "description": "Container name: required for volumes, optional for env vars"
        }, 
        "resource": {
          "type": "string", 
          "description": "Required: resource to select"
        }, 
        "divisor": {
          "description": "Specifies the output format of the exposed resources, defaults to \"1\"", 
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.api.resource.Quantity"
        }
      }
    }, 
    "io.k8s.api.autoscaling.v2.MetricIdentifier": {
      "required": [
        "name"
      ], 
      "type": "object", 
      "description": "MetricIdentifier defines the name and optionally selector for a metric", 
      "properties": {
        "name": {
          "type": "string", 
          "description": "name is the name of the given metric"
        }, 
        "selector": {
          "description": "selector is the string-encoded form of a standard kubernetes label selector for the given metric When set, it is passed as an additional parameter to the metrics server for more specific metrics scoping. When unset, just the metricName will be used to gather metrics.", 
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector"
        }
      }
    }, 
    "io.k8s.api.core.v1.Endpoints": {
      "type": "object", 
      "x-kubernetes-group-version-kind": [
        {
          "kind": "Endpoints", 
          "version": "v1", 
          "group": ""
        }
      ], 
      "description": "Endpoints is a collection of endpoints that implement the actual service. Example:\n\n\t Name: \"mysvc\",\n\t Subsets: [\n\t   {\n\t     Addresses: [{\"ip\": \"10.10.1.1\"}, {\"ip\": \"10.10.2.2\"}],\n\t     Ports: [{\"name\": \"a\", \"port\": 8675}, {\"name\": \"b\", \"port\": 309}]\n\t   },\n\t   {\n\t     Addresses: [{\"ip\": \"10.10.3.3\"}],\n\t     Ports: [{\"name\": \"a\", \"port\": 93}, {\"name\": \"b\", \"port\": 76}]\n\t   },\n\t]\n\nEndpoints is a legacy API and does not contain information about all Service features. Use discoveryv1.EndpointSlice for complete information about Service endpoints.\n\nDeprecated: This API is deprecated in v1.33+. Use discoveryv1.EndpointSlice.", 
      "properties": {
        "kind": {
          "enum": [
            "Endpoints"
          ], 
          "type": "string", 
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
        }, 
        "apiVersion": {
          "type": "string", 
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources"
        }, 
        "subsets": {
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.EndpointSubset"
          }, 
          "type": "array", 
          "description": "The set of all endpoints is the union of all subsets. Addresses are placed into subsets according to the IPs they share. A single address with multiple ports, some of which are ready and some of which are not (because they come from different containers) will result in the address being displayed in different subsets for the different ports. No address will appear in both Addresses and NotReadyAddresses in the same subset. Sets of addresses and ports that comprise a service.", 
          "x-kubernetes-list-type": "atomic"
        }, 
        "metadata": {
          "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata", 
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        }
      }
    }, 
    "io.k8s.api.apiserverinternal.v1alpha1.StorageVersion": {
      "type": "object", 
      "required": [
        "spec", 
        "status"
      ], 
      "x-kubernetes-group-version-kind": [
        {
          "kind": "StorageVersion", 
          "version": "v1alpha1", 
          "group": "internal.apiserver.k8s.io"
        }
      ], 
      "description": "Storage version of a specific resource.", 
      "properties": {
        "status": {
          "description": "API server instances report the version they can decode and the version they encode objects to when persisting objects in the backend.", 
          "$ref": "#/definitions/io.k8s.api.apiserverinternal.v1alpha1.StorageVersionStatus"
        }, 
        "kind": {
          "enum": [
            "StorageVersion"
          ], 
          "type": "string", 
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
        }, 
        "spec": {
          "description": "Spec is an empty spec. It is here to comply with Kubernetes API style.", 
          "$ref": "#/definitions/io.k8s.api.apiserverinternal.v1alpha1.StorageVersionSpec"
        }, 
        "apiVersion": {
          "type": "string", 
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources"
        }, 
        "metadata": {
          "description": "The name is <group>.<resource>.", 
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        }
      }
    }, 
    "io.k8s.api.core.v1.EnvFromSource": {
      "type": "object", 
      "description": "EnvFromSource represents the source of a set of ConfigMaps or Secrets", 
      "properties": {
        "prefix": {
          "type": "string", 
          "description": "Optional text to prepend to the name of each environment variable. May consist of any printable ASCII characters except '='."
        }, 
        "configMapRef": {
          "description": "The ConfigMap to select from", 
          "$ref": "#/definitions/io.k8s.api.core.v1.ConfigMapEnvSource"
        }, 
        "secretRef": {
          "description": "The Secret to select from", 
          "$ref": "#/definitions/io.k8s.api.core.v1.SecretEnvSource"
        }
      }
    }, 
    "io.k8s.api.flowcontrol.v1.ExemptPriorityLevelConfiguration": {
      "type": "object", 
      "description": "ExemptPriorityLevelConfiguration describes the configurable aspects of the handling of exempt requests. In the mandatory exempt configuration object the values in the fields here can be modified by authorized users, unlike the rest of the `spec`.", 
      "properties": {
        "nominalConcurrencyShares": {
          "type": "integer", 
          "description": "`nominalConcurrencyShares` (NCS) contributes to the computation of the NominalConcurrencyLimit (NominalCL) of this level. This is the number of execution seats nominally reserved for this priority level. This DOES NOT limit the dispatching from this priority level but affects the other priority levels through the borrowing mechanism. The server's concurrency limit (ServerCL) is divided among all the priority levels in proportion to their NCS values:\n\nNominalCL(i)  = ceil( ServerCL * NCS(i) / sum_ncs ) sum_ncs = sum[priority level k] NCS(k)\n\nBigger numbers mean a larger nominal concurrency limit, at the expense of every other priority level. This field has a default value of zero.", 
          "format": "int32"
        }, 
        "lendablePercent": {
          "type": "integer", 
          "description": "`lendablePercent` prescribes the fraction of the level's NominalCL that can be borrowed by other priority levels.  This value of this field must be between 0 and 100, inclusive, and it defaults to 0. The number of seats that other levels can borrow from this level, known as this level's LendableConcurrencyLimit (LendableCL), is defined as follows.\n\nLendableCL(i) = round( NominalCL(i) * lendablePercent(i)/100.0 )", 
          "format": "int32"
        }
      }
    }, 
    "io.k8s.api.admissionregistration.v1beta1.ParamRef": {
      "type": "object", 
      "x-kubernetes-map-type": "atomic", 
      "description": "ParamRef describes how to locate the params to be used as input to expressions of rules applied by a policy binding.", 
      "properties": {
        "namespace": {
          "type": "string", 
          "description": "namespace is the namespace of the referenced resource. Allows limiting the search for params to a specific namespace. Applies to both `name` and `selector` fields.\n\nA per-namespace parameter may be used by specifying a namespace-scoped `paramKind` in the policy and leaving this field empty.\n\n- If `paramKind` is cluster-scoped, this field MUST be unset. Setting this field results in a configuration error.\n\n- If `paramKind` is namespace-scoped, the namespace of the object being evaluated for admission will be used when this field is left unset. Take care that if this is left empty the binding must not match any cluster-scoped resources, which will result in an error."
        }, 
        "name": {
          "type": "string", 
          "description": "name is the name of the resource being referenced.\n\nOne of `name` or `selector` must be set, but `name` and `selector` are mutually exclusive properties. If one is set, the other must be unset.\n\nA single parameter used for all admission requests can be configured by setting the `name` field, leaving `selector` blank, and setting namespace if `paramKind` is namespace-scoped."
        }, 
        "parameterNotFoundAction": {
          "type": "string", 
          "description": "`parameterNotFoundAction` controls the behavior of the binding when the resource exists, and name or selector is valid, but there are no parameters matched by the binding. If the value is set to `Allow`, then no matched parameters will be treated as successful validation by the binding. If set to `Deny`, then no matched parameters will be subject to the `failurePolicy` of the policy.\n\nAllowed values are `Allow` or `Deny`\n\nRequired"
        }, 
        "selector": {
          "description": "selector can be used to match multiple param objects based on their labels. Supply selector: {} to match all resources of the ParamKind.\n\nIf multiple params are found, they are all evaluated with the policy expressions and the results are ANDed together.\n\nOne of `name` or `selector` must be set, but `name` and `selector` are mutually exclusive properties. If one is set, the other must be unset.", 
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector"
        }
      }
    }, 
    "io.k8s.api.apps.v1.ReplicaSetCondition": {
      "required": [
        "type", 
        "status"
      ], 
      "type": "object", 
      "description": "ReplicaSetCondition describes the state of a replica set at a certain point.", 
      "properties": {
        "status": {
          "type": "string", 
          "description": "Status of the condition, one of True, False, Unknown."
        }, 
        "lastTransitionTime": {
          "description": "The last time the condition transitioned from one status to another.", 
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
        }, 
        "message": {
          "type": "string", 
          "description": "A human readable message indicating details about the transition."
        }, 
        "type": {
          "type": "string", 
          "description": "Type of replica set condition."
        }, 
        "reason": {
          "type": "string", 
          "description": "The reason for the condition's last transition."
        }
      }
    }, 
    "io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.ValidationRule": {
      "required": [
        "rule"
      ], 
      "type": "object", 
      "description": "ValidationRule describes a validation rule written in the CEL expression language.", 
      "properties": {
        "fieldPath": {
          "type": "string", 
          "description": "fieldPath represents the field path returned when the validation fails. It must be a relative JSON path (i.e. with array notation) scoped to the location of this x-kubernetes-validations extension in the schema and refer to an existing field. e.g. when validation checks if a specific attribute `foo` under a map `testMap`, the fieldPath could be set to `.testMap.foo` If the validation checks two lists must have unique attributes, the fieldPath could be set to either of the list: e.g. `.testList` It does not support list numeric index. It supports child operation to refer to an existing field currently. Refer to [JSONPath support in Kubernetes](https://kubernetes.io/docs/reference/kubectl/jsonpath/) for more info. Numeric index of array is not supported. For field name which contains special characters, use `['specialName']` to refer the field name. e.g. for attribute `foo.34$` appears in a list `testList`, the fieldPath could be set to `.testList['foo.34$']`"
        }, 
        "messageExpression": {
          "type": "string", 
          "description": "MessageExpression declares a CEL expression that evaluates to the validation failure message that is returned when this rule fails. Since messageExpression is used as a failure message, it must evaluate to a string. If both message and messageExpression are present on a rule, then messageExpression will be used if validation fails. If messageExpression results in a runtime error, the runtime error is logged, and the validation failure message is produced as if the messageExpression field were unset. If messageExpression evaluates to an empty string, a string with only spaces, or a string that contains line breaks, then the validation failure message will also be produced as if the messageExpression field were unset, and the fact that messageExpression produced an empty string/string with only spaces/string with line breaks will be logged. messageExpression has access to all the same variables as the rule; the only difference is the return type. Example: \"x must be less than max (\"+string(self.max)+\")\""
        }, 
        "optionalOldSelf": {
          "type": "boolean", 
          "description": "optionalOldSelf is used to opt a transition rule into evaluation even when the object is first created, or if the old object is missing the value.\n\nWhen enabled `oldSelf` will be a CEL optional whose value will be `None` if there is no old value, or when the object is initially created.\n\nYou may check for presence of oldSelf using `oldSelf.hasValue()` and unwrap it after checking using `oldSelf.value()`. Check the CEL documentation for Optional types for more information: https://pkg.go.dev/github.com/google/cel-go/cel#OptionalTypes\n\nMay not be set unless `oldSelf` is used in `rule`."
        }, 
        "message": {
          "type": "string", 
          "description": "Message represents the message displayed when validation fails. The message is required if the Rule contains line breaks. The message must not contain line breaks. If unset, the message is \"failed rule: {Rule}\". e.g. \"must be a URL with the host matching spec.host\""
        }, 
        "reason": {
          "type": "string", 
          "description": "reason provides a machine-readable validation failure reason that is returned to the caller when a request fails this validation rule. The HTTP status code returned to the caller will match the reason of the reason of the first failed validation rule. The currently supported reasons are: \"FieldValueInvalid\", \"FieldValueForbidden\", \"FieldValueRequired\", \"FieldValueDuplicate\". If not set, default to use \"FieldValueInvalid\". All future added reasons must be accepted by clients when reading this value and unknown reasons should be treated as FieldValueInvalid."
        }, 
        "rule": {
          "type": "string", 
          "description": "Rule represents the expression which will be evaluated by CEL. ref: https://github.com/google/cel-spec The Rule is scoped to the location of the x-kubernetes-validations extension in the schema. The `self` variable in the CEL expression is bound to the scoped value. Example: - Rule scoped to the root of a resource with a status subresource: {\"rule\": \"self.status.actual <= self.spec.maxDesired\"}\n\nIf the Rule is scoped to an object with properties, the accessible properties of the object are field selectable via `self.field` and field presence can be checked via `has(self.field)`. Null valued fields are treated as absent fields in CEL expressions. If the Rule is scoped to an object with additionalProperties (i.e. a map) the value of the map are accessible via `self[mapKey]`, map containment can be checked via `mapKey in self` and all entries of the map are accessible via CEL macros and functions such as `self.all(...)`. If the Rule is scoped to an array, the elements of the array are accessible via `self[i]` and also by macros and functions. If the Rule is scoped to a scalar, `self` is bound to the scalar value. Examples: - Rule scoped to a map of objects: {\"rule\": \"self.components['Widget'].priority < 10\"} - Rule scoped to a list of integers: {\"rule\": \"self.values.all(value, value >= 0 && value < 100)\"} - Rule scoped to a string value: {\"rule\": \"self.startsWith('kube')\"}\n\nThe `apiVersion`, `kind`, `metadata.name` and `metadata.generateName` are always accessible from the root of the object and from any x-kubernetes-embedded-resource annotated objects. No other metadata properties are accessible.\n\nUnknown data preserved in custom resources via x-kubernetes-preserve-unknown-fields is not accessible in CEL expressions. This includes: - Unknown field values that are preserved by object schemas with x-kubernetes-preserve-unknown-fields. - Object properties where the property schema is of an \"unknown type\". An \"unknown type\" is recursively defined as:\n  - A schema with no type and x-kubernetes-preserve-unknown-fields set to true\n  - An array where the items schema is of an \"unknown type\"\n  - An object where the additionalProperties schema is of an \"unknown type\"\n\nOnly property names of the form `[a-zA-Z_.-/][a-zA-Z0-9_.-/]*` are accessible. Accessible property names are escaped according to the following rules when accessed in the expression: - '__' escapes to '__underscores__' - '.' escapes to '__dot__' - '-' escapes to '__dash__' - '/' escapes to '__slash__' - Property names that exactly match a CEL RESERVED keyword escape to '__{keyword}__'. The keywords are:\n\t  \"true\", \"false\", \"null\", \"in\", \"as\", \"break\", \"const\", \"continue\", \"else\", \"for\", \"function\", \"if\",\n\t  \"import\", \"let\", \"loop\", \"package\", \"namespace\", \"return\".\nExamples:\n  - Rule accessing a property named \"namespace\": {\"rule\": \"self.__namespace__ > 0\"}\n  - Rule accessing a property named \"x-prop\": {\"rule\": \"self.x__dash__prop > 0\"}\n  - Rule accessing a property named \"redact__d\": {\"rule\": \"self.redact__underscores__d > 0\"}\n\nEquality on arrays with x-kubernetes-list-type of 'set' or 'map' ignores element order, i.e. [1, 2] == [2, 1]. Concatenation on arrays with x-kubernetes-list-type use the semantics of the list type:\n  - 'set': `X + Y` performs a union where the array positions of all elements in `X` are preserved and\n    non-intersecting elements in `Y` are appended, retaining their partial order.\n  - 'map': `X + Y` performs a merge where the array positions of all keys in `X` are preserved but the values\n    are overwritten by values in `Y` when the key sets of `X` and `Y` intersect. Elements in `Y` with\n    non-intersecting keys are appended, retaining their partial order.\n\nIf `rule` makes use of the `oldSelf` variable it is implicitly a `transition rule`.\n\nBy default, the `oldSelf` variable is the same type as `self`. When `optionalOldSelf` is true, the `oldSelf` variable is a CEL optional\n variable whose value() is the same type as `self`.\nSee the documentation for the `optionalOldSelf` field for details.\n\nTransition rules by default are applied only on UPDATE requests and are skipped if an old value could not be found. You can opt a transition rule into unconditional evaluation by setting `optionalOldSelf` to true."
        }
      }
    }, 
    "io.k8s.api.flowcontrol.v1.NonResourcePolicyRule": {
      "required": [
        "verbs", 
        "nonResourceURLs"
      ], 
      "type": "object", 
      "description": "NonResourcePolicyRule is a predicate that matches non-resource requests according to their verb and the target non-resource URL. A NonResourcePolicyRule matches a request if and only if both (a) at least one member of verbs matches the request and (b) at least one member of nonResourceURLs matches the request.", 
      "properties": {
        "verbs": {
          "items": {
            "type": "string"
          }, 
          "type": "array", 
          "description": "`verbs` is a list of matching verbs and may not be empty. \"*\" matches all verbs. If it is present, it must be the only entry. Required.", 
          "x-kubernetes-list-type": "set"
        }, 
        "nonResourceURLs": {
          "items": {
            "type": "string"
          }, 
          "type": "array", 
          "description": "`nonResourceURLs` is a set of url prefixes that a user should have access to and may not be empty. For example:\n  - \"/healthz\" is legal\n  - \"/hea*\" is illegal\n  - \"/hea\" is legal but matches nothing\n  - \"/hea/*\" also matches nothing\n  - \"/healthz/*\" matches all per-component health checks.\n\"*\" matches all non-resource urls. if it is present, it must be the only entry. Required.", 
          "x-kubernetes-list-type": "set"
        }
      }
    }, 
    "io.k8s.api.resource.v1alpha3.DeviceTaintSelector": {
      "type": "object", 
      "description": "DeviceTaintSelector defines which device(s) a DeviceTaintRule applies to. The empty selector matches all devices. Without a selector, no devices are matched.", 
      "properties": {
        "device": {
          "type": "string", 
          "description": "If device is set, only devices with that name are selected. This field corresponds to slice.spec.devices[].name.\n\nSetting also driver and pool may be required to avoid ambiguity, but is not required."
        }, 
        "deviceClassName": {
          "type": "string", 
          "description": "If DeviceClassName is set, the selectors defined there must be satisfied by a device to be selected. This field corresponds to class.metadata.name."
        }, 
        "driver": {
          "type": "string", 
          "description": "If driver is set, only devices from that driver are selected. This fields corresponds to slice.spec.driver."
        }, 
        "pool": {
          "type": "string", 
          "description": "If pool is set, only devices in that pool are selected.\n\nAlso setting the driver name may be useful to avoid ambiguity when different drivers use the same pool name, but this is not required because selecting pools from different drivers may also be useful, for example when drivers with node-local devices use the node name as their pool name."
        }, 
        "selectors": {
          "items": {
            "$ref": "#/definitions/io.k8s.api.resource.v1alpha3.DeviceSelector"
          }, 
          "type": "array", 
          "description": "Selectors contains the same selection criteria as a ResourceClaim. Currently, CEL expressions are supported. All of these selectors must be satisfied.", 
          "x-kubernetes-list-type": "atomic"
        }
      }
    }, 
    "io.k8s.api.discovery.v1.EndpointConditions": {
      "type": "object", 
      "description": "EndpointConditions represents the current condition of an endpoint.", 
      "properties": {
        "ready": {
          "type": "boolean", 
          "description": "ready indicates that this endpoint is ready to receive traffic, according to whatever system is managing the endpoint. A nil value should be interpreted as \"true\". In general, an endpoint should be marked ready if it is serving and not terminating, though this can be overridden in some cases, such as when the associated Service has set the publishNotReadyAddresses flag."
        }, 
        "serving": {
          "type": "boolean", 
          "description": "serving indicates that this endpoint is able to receive traffic, according to whatever system is managing the endpoint. For endpoints backed by pods, the EndpointSlice controller will mark the endpoint as serving if the pod's Ready condition is True. A nil value should be interpreted as \"true\"."
        }, 
        "terminating": {
          "type": "boolean", 
          "description": "terminating indicates that this endpoint is terminating. A nil value should be interpreted as \"false\"."
        }
      }
    }, 
    "io.k8s.api.rbac.v1.RoleBinding": {
      "type": "object", 
      "required": [
        "roleRef"
      ], 
      "x-kubernetes-group-version-kind": [
        {
          "kind": "RoleBinding", 
          "version": "v1", 
          "group": "rbac.authorization.k8s.io"
        }
      ], 
      "description": "RoleBinding references a role, but does not contain it.  It can reference a Role in the same namespace or a ClusterRole in the global namespace. It adds who information via Subjects and namespace information by which namespace it exists in.  RoleBindings in a given namespace only have effect in that namespace.", 
      "properties": {
        "roleRef": {
          "description": "RoleRef can reference a Role in the current namespace or a ClusterRole in the global namespace. If the RoleRef cannot be resolved, the Authorizer must return an error. This field is immutable.", 
          "$ref": "#/definitions/io.k8s.api.rbac.v1.RoleRef"
        }, 
        "kind": {
          "enum": [
            "RoleBinding"
          ], 
          "type": "string", 
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
        }, 
        "subjects": {
          "items": {
            "$ref": "#/definitions/io.k8s.api.rbac.v1.Subject"
          }, 
          "type": "array", 
          "description": "Subjects holds references to the objects the role applies to.", 
          "x-kubernetes-list-type": "atomic"
        }, 
        "apiVersion": {
          "type": "string", 
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources"
        }, 
        "metadata": {
          "description": "Standard object's metadata.", 
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        }
      }
    }, 
    "io.k8s.api.autoscaling.v2.ResourceMetricStatus": {
      "required": [
        "name", 
        "current"
      ], 
      "type": "object", 
      "description": "ResourceMetricStatus indicates the current value of a resource metric known to Kubernetes, as specified in requests and limits, describing each pod in the current scale target (e.g. CPU or memory).  Such metrics are built in to Kubernetes, and have special scaling options on top of those available to normal per-pod metrics using the \"pods\" source.", 
      "properties": {
        "current": {
          "description": "current contains the current value for the given metric", 
          "$ref": "#/definitions/io.k8s.api.autoscaling.v2.MetricValueStatus"
        }, 
        "name": {
          "type": "string", 
          "description": "name is the name of the resource in question."
        }
      }
    }, 
    "io.k8s.api.resource.v1beta2.DeviceAllocationConfiguration": {
      "required": [
        "source"
      ], 
      "type": "object", 
      "description": "DeviceAllocationConfiguration gets embedded in an AllocationResult.", 
      "properties": {
        "source": {
          "type": "string", 
          "description": "Source records whether the configuration comes from a class and thus is not something that a normal user would have been able to set or from a claim."
        }, 
        "requests": {
          "items": {
            "type": "string"
          }, 
          "type": "array", 
          "description": "Requests lists the names of requests where the configuration applies. If empty, its applies to all requests.\n\nReferences to subrequests must include the name of the main request and may include the subrequest using the format <main request>[/<subrequest>]. If just the main request is given, the configuration applies to all subrequests.", 
          "x-kubernetes-list-type": "atomic"
        }, 
        "opaque": {
          "description": "Opaque provides driver-specific configuration parameters.", 
          "$ref": "#/definitions/io.k8s.api.resource.v1beta2.OpaqueDeviceConfiguration"
        }
      }
    }, 
    "io.k8s.api.core.v1.LocalVolumeSource": {
      "required": [
        "path"
      ], 
      "type": "object", 
      "description": "Local represents directly-attached storage with node affinity", 
      "properties": {
        "path": {
          "type": "string", 
          "description": "path of the full path to the volume on the node. It can be either a directory or block device (disk, partition, ...)."
        }, 
        "fsType": {
          "type": "string", 
          "description": "fsType is the filesystem type to mount. It applies only when the Path is a block device. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". The default value is to auto-select a filesystem if unspecified."
        }
      }
    }, 
    "io.k8s.kube-aggregator.pkg.apis.apiregistration.v1.ServiceReference": {
      "type": "object", 
      "description": "ServiceReference holds a reference to Service.legacy.k8s.io", 
      "properties": {
        "namespace": {
          "type": "string", 
          "description": "Namespace is the namespace of the service"
        }, 
        "name": {
          "type": "string", 
          "description": "Name is the name of the service"
        }, 
        "port": {
          "type": "integer", 
          "description": "If specified, the port on the service that hosting webhook. Default to 443 for backward compatibility. `port` should be a valid port number (1-65535, inclusive).", 
          "format": "int32"
        }
      }
    }, 
    "io.k8s.api.resource.v1alpha3.DeviceTaintRuleSpec": {
      "required": [
        "taint"
      ], 
      "type": "object", 
      "description": "DeviceTaintRuleSpec specifies the selector and one taint.", 
      "properties": {
        "deviceSelector": {
          "description": "DeviceSelector defines which device(s) the taint is applied to. All selector criteria must be satified for a device to match. The empty selector matches all devices. Without a selector, no devices are matches.", 
          "$ref": "#/definitions/io.k8s.api.resource.v1alpha3.DeviceTaintSelector"
        }, 
        "taint": {
          "description": "The taint that gets applied to matching devices.", 
          "$ref": "#/definitions/io.k8s.api.resource.v1alpha3.DeviceTaint"
        }
      }
    }, 
    "io.k8s.api.core.v1.Taint": {
      "required": [
        "key", 
        "effect"
      ], 
      "type": "object", 
      "description": "The node this Taint is attached to has the \"effect\" on any pod that does not tolerate the Taint.", 
      "properties": {
        "key": {
          "type": "string", 
          "description": "Required. The taint key to be applied to a node."
        }, 
        "timeAdded": {
          "description": "TimeAdded represents the time at which the taint was added.", 
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
        }, 
        "effect": {
          "type": "string", 
          "description": "Required. The effect of the taint on pods that do not tolerate the taint. Valid effects are NoSchedule, PreferNoSchedule and NoExecute."
        }, 
        "value": {
          "type": "string", 
          "description": "The taint value corresponding to the taint key."
        }
      }
    }, 
    "io.k8s.api.networking.v1.NetworkPolicyEgressRule": {
      "type": "object", 
      "description": "NetworkPolicyEgressRule describes a particular set of traffic that is allowed out of pods matched by a NetworkPolicySpec's podSelector. The traffic must match both ports and to. This type is beta-level in 1.8", 
      "properties": {
        "to": {
          "items": {
            "$ref": "#/definitions/io.k8s.api.networking.v1.NetworkPolicyPeer"
          }, 
          "type": "array", 
          "description": "to is a list of destinations for outgoing traffic of pods selected for this rule. Items in this list are combined using a logical OR operation. If this field is empty or missing, this rule matches all destinations (traffic not restricted by destination). If this field is present and contains at least one item, this rule allows traffic only if the traffic matches at least one item in the to list.", 
          "x-kubernetes-list-type": "atomic"
        }, 
        "ports": {
          "items": {
            "$ref": "#/definitions/io.k8s.api.networking.v1.NetworkPolicyPort"
          }, 
          "type": "array", 
          "description": "ports is a list of destination ports for outgoing traffic. Each item in this list is combined using a logical OR. If this field is empty or missing, this rule matches all ports (traffic not restricted by port). If this field is present and contains at least one item, then this rule allows traffic only if the traffic matches at least one port in the list.", 
          "x-kubernetes-list-type": "atomic"
        }
      }
    }, 
    "io.k8s.api.authorization.v1.SubjectAccessReview": {
      "type": "object", 
      "required": [
        "spec"
      ], 
      "x-kubernetes-group-version-kind": [
        {
          "kind": "SubjectAccessReview", 
          "version": "v1", 
          "group": "authorization.k8s.io"
        }
      ], 
      "description": "SubjectAccessReview checks whether or not a user or group can perform an action.", 
      "properties": {
        "status": {
          "description": "Status is filled in by the server and indicates whether the request is allowed or not", 
          "$ref": "#/definitions/io.k8s.api.authorization.v1.SubjectAccessReviewStatus"
        }, 
        "kind": {
          "enum": [
            "SubjectAccessReview"
          ], 
          "type": "string", 
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
        }, 
        "spec": {
          "description": "Spec holds information about the request being evaluated", 
          "$ref": "#/definitions/io.k8s.api.authorization.v1.SubjectAccessReviewSpec"
        }, 
        "apiVersion": {
          "type": "string", 
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources"
        }, 
        "metadata": {
          "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata", 
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        }
      }
    }, 
    "io.k8s.api.authorization.v1.FieldSelectorAttributes": {
      "type": "object", 
      "description": "FieldSelectorAttributes indicates a field limited access. Webhook authors are encouraged to * ensure rawSelector and requirements are not both set * consider the requirements field if set * not try to parse or consider the rawSelector field if set. This is to avoid another CVE-2022-2880 (i.e. getting different systems to agree on how exactly to parse a query is not something we want), see https://www.oxeye.io/resources/golang-parameter-smuggling-attack for more details. For the *SubjectAccessReview endpoints of the kube-apiserver: * If rawSelector is empty and requirements are empty, the request is not limited. * If rawSelector is present and requirements are empty, the rawSelector will be parsed and limited if the parsing succeeds. * If rawSelector is empty and requirements are present, the requirements should be honored * If rawSelector is present and requirements are present, the request is invalid.", 
      "properties": {
        "rawSelector": {
          "type": "string", 
          "description": "rawSelector is the serialization of a field selector that would be included in a query parameter. Webhook implementations are encouraged to ignore rawSelector. The kube-apiserver's *SubjectAccessReview will parse the rawSelector as long as the requirements are not present."
        }, 
        "requirements": {
          "items": {
            "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.FieldSelectorRequirement"
          }, 
          "type": "array", 
          "description": "requirements is the parsed interpretation of a field selector. All requirements must be met for a resource instance to match the selector. Webhook implementations should handle requirements, but how to handle them is up to the webhook. Since requirements can only limit the request, it is safe to authorize as unlimited request if the requirements are not understood.", 
          "x-kubernetes-list-type": "atomic"
        }
      }
    }, 
    "io.k8s.api.autoscaling.v1.HorizontalPodAutoscalerList": {
      "type": "object", 
      "required": [
        "items"
      ], 
      "x-kubernetes-group-version-kind": [
        {
          "kind": "HorizontalPodAutoscalerList", 
          "version": "v1", 
          "group": "autoscaling"
        }
      ], 
      "description": "list of horizontal pod autoscaler objects.", 
      "properties": {
        "items": {
          "items": {
            "$ref": "#/definitions/io.k8s.api.autoscaling.v1.HorizontalPodAutoscaler"
          }, 
          "type": "array", 
          "description": "items is the list of horizontal pod autoscaler objects."
        }, 
        "kind": {
          "enum": [
            "HorizontalPodAutoscalerList"
          ], 
          "type": "string", 
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
        }, 
        "apiVersion": {
          "type": "string", 
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources"
        }, 
        "metadata": {
          "description": "Standard list metadata.", 
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      }
    }, 
    "io.k8s.api.core.v1.PersistentVolumeClaim": {
      "type": "object", 
      "x-kubernetes-group-version-kind": [
        {
          "kind": "PersistentVolumeClaim", 
          "version": "v1", 
          "group": ""
        }
      ], 
      "description": "PersistentVolumeClaim is a user's request for and claim to a persistent volume", 
      "properties": {
        "status": {
          "description": "status represents the current information/status of a persistent volume claim. Read-only. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims", 
          "$ref": "#/definitions/io.k8s.api.core.v1.PersistentVolumeClaimStatus"
        }, 
        "kind": {
          "enum": [
            "PersistentVolumeClaim"
          ], 
          "type": "string", 
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
        }, 
        "spec": {
          "description": "spec defines the desired characteristics of a volume requested by a pod author. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims", 
          "$ref": "#/definitions/io.k8s.api.core.v1.PersistentVolumeClaimSpec"
        }, 
        "apiVersion": {
          "type": "string", 
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources"
        }, 
        "metadata": {
          "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata", 
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        }
      }
    }, 
    "io.k8s.api.core.v1.NodeDaemonEndpoints": {
      "type": "object", 
      "description": "NodeDaemonEndpoints lists ports opened by daemons running on the Node.", 
      "properties": {
        "kubeletEndpoint": {
          "description": "Endpoint on which Kubelet is listening.", 
          "$ref": "#/definitions/io.k8s.api.core.v1.DaemonEndpoint"
        }
      }
    }, 
    "io.k8s.api.networking.v1.IngressPortStatus": {
      "required": [
        "port", 
        "protocol"
      ], 
      "type": "object", 
      "description": "IngressPortStatus represents the error condition of a service port", 
      "properties": {
        "protocol": {
          "type": "string", 
          "description": "protocol is the protocol of the ingress port. The supported values are: \"TCP\", \"UDP\", \"SCTP\""
        }, 
        "port": {
          "type": "integer", 
          "description": "port is the port number of the ingress port.", 
          "format": "int32"
        }, 
        "error": {
          "type": "string", 
          "description": "error is to record the problem with the service port The format of the error shall comply with the following rules: - built-in error values shall be specified in this file and those shall use\n  CamelCase names\n- cloud provider specific error values must have names that comply with the\n  format foo.example.com/CamelCase."
        }
      }
    }, 
    "io.k8s.api.resource.v1beta1.DeviceClaimConfiguration": {
      "type": "object", 
      "description": "DeviceClaimConfiguration is used for configuration parameters in DeviceClaim.", 
      "properties": {
        "requests": {
          "items": {
            "type": "string"
          }, 
          "type": "array", 
          "description": "Requests lists the names of requests where the configuration applies. If empty, it applies to all requests.\n\nReferences to subrequests must include the name of the main request and may include the subrequest using the format <main request>[/<subrequest>]. If just the main request is given, the configuration applies to all subrequests.", 
          "x-kubernetes-list-type": "atomic"
        }, 
        "opaque": {
          "description": "Opaque provides driver-specific configuration parameters.", 
          "$ref": "#/definitions/io.k8s.api.resource.v1beta1.OpaqueDeviceConfiguration"
        }
      }
    }, 
    "io.k8s.api.core.v1.PodSchedulingGate": {
      "required": [
        "name"
      ], 
      "type": "object", 
      "description": "PodSchedulingGate is associated to a Pod to guard its scheduling.", 
      "properties": {
        "name": {
          "type": "string", 
          "description": "Name of the scheduling gate. Each scheduling gate must have a unique name field."
        }
      }
    }, 
    "io.k8s.api.networking.v1.IngressTLS": {
      "type": "object", 
      "description": "IngressTLS describes the transport layer security associated with an ingress.", 
      "properties": {
        "hosts": {
          "items": {
            "type": "string"
          }, 
          "type": "array", 
          "description": "hosts is a list of hosts included in the TLS certificate. The values in this list must match the name/s used in the tlsSecret. Defaults to the wildcard host setting for the loadbalancer controller fulfilling this Ingress, if left unspecified.", 
          "x-kubernetes-list-type": "atomic"
        }, 
        "secretName": {
          "type": "string", 
          "description": "secretName is the name of the secret used to terminate TLS traffic on port 443. Field is left optional to allow TLS routing based on SNI hostname alone. If the SNI host in a listener conflicts with the \"Host\" header field used by an IngressRule, the SNI host is used for termination and value of the \"Host\" header is used for routing."
        }
      }
    }, 
    "io.k8s.api.resource.v1alpha3.CELDeviceSelector": {
      "required": [
        "expression"
      ], 
      "type": "object", 
      "description": "CELDeviceSelector contains a CEL expression for selecting a device.", 
      "properties": {
        "expression": {
          "type": "string", 
          "description": "Expression is a CEL expression which evaluates a single device. It must evaluate to true when the device under consideration satisfies the desired criteria, and false when it does not. Any other result is an error and causes allocation of devices to abort.\n\nThe expression's input is an object named \"device\", which carries the following properties:\n - driver (string): the name of the driver which defines this device.\n - attributes (map[string]object): the device's attributes, grouped by prefix\n   (e.g. device.attributes[\"dra.example.com\"] evaluates to an object with all\n   of the attributes which were prefixed by \"dra.example.com\".\n - capacity (map[string]object): the device's capacities, grouped by prefix.\n\nExample: Consider a device with driver=\"dra.example.com\", which exposes two attributes named \"model\" and \"ext.example.com/family\" and which exposes one capacity named \"modules\". This input to this expression would have the following fields:\n\n    device.driver\n    device.attributes[\"dra.example.com\"].model\n    device.attributes[\"ext.example.com\"].family\n    device.capacity[\"dra.example.com\"].modules\n\nThe device.driver field can be used to check for a specific driver, either as a high-level precondition (i.e. you only want to consider devices from this driver) or as part of a multi-clause expression that is meant to consider devices from different drivers.\n\nThe value type of each attribute is defined by the device definition, and users who write these expressions must consult the documentation for their specific drivers. The value type of each capacity is Quantity.\n\nIf an unknown prefix is used as a lookup in either device.attributes or device.capacity, an empty map will be returned. Any reference to an unknown field will cause an evaluation error and allocation to abort.\n\nA robust expression should check for the existence of attributes before referencing them.\n\nFor ease of use, the cel.bind() function is enabled, and can be used to simplify expressions that access multiple attributes with the same domain. For example:\n\n    cel.bind(dra, device.attributes[\"dra.example.com\"], dra.someBool && dra.anotherBool)\n\nThe length of the expression must be smaller or equal to 10 Ki. The cost of evaluating it is also limited based on the estimated number of logical steps."
        }
      }
    }, 
    "io.k8s.api.resource.v1.ResourceClaimList": {
      "type": "object", 
      "required": [
        "items"
      ], 
      "x-kubernetes-group-version-kind": [
        {
          "kind": "ResourceClaimList", 
          "version": "v1", 
          "group": "resource.k8s.io"
        }
      ], 
      "description": "ResourceClaimList is a collection of claims.", 
      "properties": {
        "items": {
          "items": {
            "$ref": "#/definitions/io.k8s.api.resource.v1.ResourceClaim"
          }, 
          "type": "array", 
          "description": "Items is the list of resource claims."
        }, 
        "kind": {
          "enum": [
            "ResourceClaimList"
          ], 
          "type": "string", 
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
        }, 
        "apiVersion": {
          "type": "string", 
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources"
        }, 
        "metadata": {
          "description": "Standard list metadata", 
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      }
    }, 
    "io.k8s.api.storage.v1alpha1.VolumeAttributesClassList": {
      "type": "object", 
      "required": [
        "items"
      ], 
      "x-kubernetes-group-version-kind": [
        {
          "kind": "VolumeAttributesClassList", 
          "version": "v1alpha1", 
          "group": "storage.k8s.io"
        }
      ], 
      "description": "VolumeAttributesClassList is a collection of VolumeAttributesClass objects.", 
      "properties": {
        "items": {
          "items": {
            "$ref": "#/definitions/io.k8s.api.storage.v1alpha1.VolumeAttributesClass"
          }, 
          "type": "array", 
          "description": "items is the list of VolumeAttributesClass objects."
        }, 
        "kind": {
          "enum": [
            "VolumeAttributesClassList"
          ], 
          "type": "string", 
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
        }, 
        "apiVersion": {
          "type": "string", 
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources"
        }, 
        "metadata": {
          "description": "Standard list metadata More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata", 
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      }
    }, 
    "io.k8s.api.resource.v1beta1.ResourceClaimStatus": {
      "type": "object", 
      "description": "ResourceClaimStatus tracks whether the resource has been allocated and what the result of that was.", 
      "properties": {
        "allocation": {
          "description": "Allocation is set once the claim has been allocated successfully.", 
          "$ref": "#/definitions/io.k8s.api.resource.v1beta1.AllocationResult"
        }, 
        "reservedFor": {
          "description": "ReservedFor indicates which entities are currently allowed to use the claim. A Pod which references a ResourceClaim which is not reserved for that Pod will not be started. A claim that is in use or might be in use because it has been reserved must not get deallocated.\n\nIn a cluster with multiple scheduler instances, two pods might get scheduled concurrently by different schedulers. When they reference the same ResourceClaim which already has reached its maximum number of consumers, only one pod can be scheduled.\n\nBoth schedulers try to add their pod to the claim.status.reservedFor field, but only the update that reaches the API server first gets stored. The other one fails with an error and the scheduler which issued it knows that it must put the pod back into the queue, waiting for the ResourceClaim to become usable again.\n\nThere can be at most 256 such reservations. This may get increased in the future, but not reduced.", 
          "x-kubernetes-list-map-keys": [
            "uid"
          ], 
          "x-kubernetes-patch-merge-key": "uid", 
          "items": {
            "$ref": "#/definitions/io.k8s.api.resource.v1beta1.ResourceClaimConsumerReference"
          }, 
          "type": "array", 
          "x-kubernetes-list-type": "map", 
          "x-kubernetes-patch-strategy": "merge"
        }, 
        "devices": {
          "items": {
            "$ref": "#/definitions/io.k8s.api.resource.v1beta1.AllocatedDeviceStatus"
          }, 
          "type": "array", 
          "description": "Devices contains the status of each device allocated for this claim, as reported by the driver. This can include driver-specific information. Entries are owned by their respective drivers.", 
          "x-kubernetes-list-map-keys": [
            "driver", 
            "device", 
            "pool", 
            "shareID"
          ], 
          "x-kubernetes-list-type": "map"
        }
      }
    }, 
    "io.k8s.api.admissionregistration.v1.ServiceReference": {
      "required": [
        "namespace", 
        "name"
      ], 
      "type": "object", 
      "description": "ServiceReference holds a reference to Service.legacy.k8s.io", 
      "properties": {
        "path": {
          "type": "string", 
          "description": "`path` is an optional URL path which will be sent in any request to this service."
        }, 
        "namespace": {
          "type": "string", 
          "description": "`namespace` is the namespace of the service. Required"
        }, 
        "name": {
          "type": "string", 
          "description": "`name` is the name of the service. Required"
        }, 
        "port": {
          "type": "integer", 
          "description": "If specified, the port on the service that hosting webhook. Default to 443 for backward compatibility. `port` should be a valid port number (1-65535, inclusive).", 
          "format": "int32"
        }
      }
    }, 
    "io.k8s.api.core.v1.NodeList": {
      "type": "object", 
      "required": [
        "items"
      ], 
      "x-kubernetes-group-version-kind": [
        {
          "kind": "NodeList", 
          "version": "v1", 
          "group": ""
        }
      ], 
      "description": "NodeList is the whole list of all Nodes which have been registered with master.", 
      "properties": {
        "items": {
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.Node"
          }, 
          "type": "array", 
          "description": "List of nodes"
        }, 
        "kind": {
          "enum": [
            "NodeList"
          ], 
          "type": "string", 
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
        }, 
        "apiVersion": {
          "type": "string", 
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources"
        }, 
        "metadata": {
          "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds", 
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      }
    }, 
    "io.k8s.api.resource.v1.CapacityRequestPolicy": {
      "type": "object", 
      "description": "CapacityRequestPolicy defines how requests consume device capacity.\n\nMust not set more than one ValidRequestValues.", 
      "properties": {
        "default": {
          "description": "Default specifies how much of this capacity is consumed by a request that does not contain an entry for it in DeviceRequest's Capacity.", 
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.api.resource.Quantity"
        }, 
        "validValues": {
          "items": {
            "$ref": "#/definitions/io.k8s.apimachinery.pkg.api.resource.Quantity"
          }, 
          "type": "array", 
          "description": "ValidValues defines a set of acceptable quantity values in consuming requests.\n\nMust not contain more than 10 entries. Must be sorted in ascending order.\n\nIf this field is set, Default must be defined and it must be included in ValidValues list.\n\nIf the requested amount does not match any valid value but smaller than some valid values, the scheduler calculates the smallest valid value that is greater than or equal to the request. That is: min(ceil(requestedValue) \u2208 validValues), where requestedValue \u2264 max(validValues).\n\nIf the requested amount exceeds all valid values, the request violates the policy, and this device cannot be allocated.", 
          "x-kubernetes-list-type": "atomic"
        }, 
        "validRange": {
          "description": "ValidRange defines an acceptable quantity value range in consuming requests.\n\nIf this field is set, Default must be defined and it must fall within the defined ValidRange.\n\nIf the requested amount does not fall within the defined range, the request violates the policy, and this device cannot be allocated.\n\nIf the request doesn't contain this capacity entry, Default value is used.", 
          "$ref": "#/definitions/io.k8s.api.resource.v1.CapacityRequestPolicyRange"
        }
      }
    }, 
    "io.k8s.api.core.v1.LimitRange": {
      "type": "object", 
      "x-kubernetes-group-version-kind": [
        {
          "kind": "LimitRange", 
          "version": "v1", 
          "group": ""
        }
      ], 
      "description": "LimitRange sets resource usage limits for each kind of resource in a Namespace.", 
      "properties": {
        "kind": {
          "enum": [
            "LimitRange"
          ], 
          "type": "string", 
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
        }, 
        "spec": {
          "description": "Spec defines the limits enforced. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status", 
          "$ref": "#/definitions/io.k8s.api.core.v1.LimitRangeSpec"
        }, 
        "apiVersion": {
          "type": "string", 
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources"
        }, 
        "metadata": {
          "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata", 
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        }
      }
    }, 
    "io.k8s.api.networking.v1.IngressClassList": {
      "type": "object", 
      "required": [
        "items"
      ], 
      "x-kubernetes-group-version-kind": [
        {
          "kind": "IngressClassList", 
          "version": "v1", 
          "group": "networking.k8s.io"
        }
      ], 
      "description": "IngressClassList is a collection of IngressClasses.", 
      "properties": {
        "items": {
          "items": {
            "$ref": "#/definitions/io.k8s.api.networking.v1.IngressClass"
          }, 
          "type": "array", 
          "description": "items is the list of IngressClasses."
        }, 
        "kind": {
          "enum": [
            "IngressClassList"
          ], 
          "type": "string", 
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
        }, 
        "apiVersion": {
          "type": "string", 
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources"
        }, 
        "metadata": {
          "description": "Standard list metadata.", 
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      }
    }, 
    "io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.CustomResourceConversion": {
      "required": [
        "strategy"
      ], 
      "type": "object", 
      "description": "CustomResourceConversion describes how to convert different versions of a CR.", 
      "properties": {
        "webhook": {
          "description": "webhook describes how to call the conversion webhook. Required when `strategy` is set to `\"Webhook\"`.", 
          "$ref": "#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.WebhookConversion"
        }, 
        "strategy": {
          "type": "string", 
          "description": "strategy specifies how custom resources are converted between versions. Allowed values are: - `\"None\"`: The converter only change the apiVersion and would not touch any other field in the custom resource. - `\"Webhook\"`: API Server will call to an external webhook to do the conversion. Additional information\n  is needed for this option. This requires spec.preserveUnknownFields to be false, and spec.conversion.webhook to be set."
        }
      }
    }, 
    "io.k8s.api.core.v1.ModifyVolumeStatus": {
      "required": [
        "status"
      ], 
      "type": "object", 
      "description": "ModifyVolumeStatus represents the status object of ControllerModifyVolume operation", 
      "properties": {
        "status": {
          "type": "string", 
          "description": "status is the status of the ControllerModifyVolume operation. It can be in any of following states:\n - Pending\n   Pending indicates that the PersistentVolumeClaim cannot be modified due to unmet requirements, such as\n   the specified VolumeAttributesClass not existing.\n - InProgress\n   InProgress indicates that the volume is being modified.\n - Infeasible\n  Infeasible indicates that the request has been rejected as invalid by the CSI driver. To\n\t  resolve the error, a valid VolumeAttributesClass needs to be specified.\nNote: New statuses can be added in the future. Consumers should check for unknown statuses and fail appropriately."
        }, 
        "targetVolumeAttributesClassName": {
          "type": "string", 
          "description": "targetVolumeAttributesClassName is the name of the VolumeAttributesClass the PVC currently being reconciled"
        }
      }
    }, 
    "io.k8s.api.core.v1.CephFSVolumeSource": {
      "required": [
        "monitors"
      ], 
      "type": "object", 
      "description": "Represents a Ceph Filesystem mount that lasts the lifetime of a pod Cephfs volumes do not support ownership management or SELinux relabeling.", 
      "properties": {
        "secretRef": {
          "description": "secretRef is Optional: SecretRef is reference to the authentication secret for User, default is empty. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it", 
          "$ref": "#/definitions/io.k8s.api.core.v1.LocalObjectReference"
        }, 
        "secretFile": {
          "type": "string", 
          "description": "secretFile is Optional: SecretFile is the path to key ring for User, default is /etc/ceph/user.secret More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it"
        }, 
        "user": {
          "type": "string", 
          "description": "user is optional: User is the rados user name, default is admin More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it"
        }, 
        "path": {
          "type": "string", 
          "description": "path is Optional: Used as the mounted root, rather than the full Ceph tree, default is /"
        }, 
        "readOnly": {
          "type": "boolean", 
          "description": "readOnly is Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it"
        }, 
        "monitors": {
          "items": {
            "type": "string"
          }, 
          "type": "array", 
          "description": "monitors is Required: Monitors is a collection of Ceph monitors More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it", 
          "x-kubernetes-list-type": "atomic"
        }
      }
    }, 
    "io.k8s.api.core.v1.Affinity": {
      "type": "object", 
      "description": "Affinity is a group of affinity scheduling rules.", 
      "properties": {
        "podAffinity": {
          "description": "Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).", 
          "$ref": "#/definitions/io.k8s.api.core.v1.PodAffinity"
        }, 
        "nodeAffinity": {
          "description": "Describes node affinity scheduling rules for the pod.", 
          "$ref": "#/definitions/io.k8s.api.core.v1.NodeAffinity"
        }, 
        "podAntiAffinity": {
          "description": "Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).", 
          "$ref": "#/definitions/io.k8s.api.core.v1.PodAntiAffinity"
        }
      }
    }, 
    "io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions": {
      "type": "object", 
      "x-kubernetes-group-version-kind": [
        {
          "kind": "DeleteOptions", 
          "version": "v1", 
          "group": ""
        }, 
        {
          "kind": "DeleteOptions", 
          "version": "v1", 
          "group": "admission.k8s.io"
        }, 
        {
          "kind": "DeleteOptions", 
          "version": "v1beta1", 
          "group": "admission.k8s.io"
        }, 
        {
          "kind": "DeleteOptions", 
          "version": "v1", 
          "group": "admissionregistration.k8s.io"
        }, 
        {
          "kind": "DeleteOptions", 
          "version": "v1alpha1", 
          "group": "admissionregistration.k8s.io"
        }, 
        {
          "kind": "DeleteOptions", 
          "version": "v1beta1", 
          "group": "admissionregistration.k8s.io"
        }, 
        {
          "kind": "DeleteOptions", 
          "version": "v1", 
          "group": "apiextensions.k8s.io"
        }, 
        {
          "kind": "DeleteOptions", 
          "version": "v1beta1", 
          "group": "apiextensions.k8s.io"
        }, 
        {
          "kind": "DeleteOptions", 
          "version": "v1", 
          "group": "apiregistration.k8s.io"
        }, 
        {
          "kind": "DeleteOptions", 
          "version": "v1beta1", 
          "group": "apiregistration.k8s.io"
        }, 
        {
          "kind": "DeleteOptions", 
          "version": "v1", 
          "group": "apps"
        }, 
        {
          "kind": "DeleteOptions", 
          "version": "v1beta1", 
          "group": "apps"
        }, 
        {
          "kind": "DeleteOptions", 
          "version": "v1beta2", 
          "group": "apps"
        }, 
        {
          "kind": "DeleteOptions", 
          "version": "v1", 
          "group": "authentication.k8s.io"
        }, 
        {
          "kind": "DeleteOptions", 
          "version": "v1alpha1", 
          "group": "authentication.k8s.io"
        }, 
        {
          "kind": "DeleteOptions", 
          "version": "v1beta1", 
          "group": "authentication.k8s.io"
        }, 
        {
          "kind": "DeleteOptions", 
          "version": "v1", 
          "group": "authorization.k8s.io"
        }, 
        {
          "kind": "DeleteOptions", 
          "version": "v1beta1", 
          "group": "authorization.k8s.io"
        }, 
        {
          "kind": "DeleteOptions", 
          "version": "v1", 
          "group": "autoscaling"
        }, 
        {
          "kind": "DeleteOptions", 
          "version": "v2", 
          "group": "autoscaling"
        }, 
        {
          "kind": "DeleteOptions", 
          "version": "v2beta1", 
          "group": "autoscaling"
        }, 
        {
          "kind": "DeleteOptions", 
          "version": "v2beta2", 
          "group": "autoscaling"
        }, 
        {
          "kind": "DeleteOptions", 
          "version": "v1", 
          "group": "batch"
        }, 
        {
          "kind": "DeleteOptions", 
          "version": "v1beta1", 
          "group": "batch"
        }, 
        {
          "kind": "DeleteOptions", 
          "version": "v1", 
          "group": "certificates.k8s.io"
        }, 
        {
          "kind": "DeleteOptions", 
          "version": "v1alpha1", 
          "group": "certificates.k8s.io"
        }, 
        {
          "kind": "DeleteOptions", 
          "version": "v1beta1", 
          "group": "certificates.k8s.io"
        }, 
        {
          "kind": "DeleteOptions", 
          "version": "v1", 
          "group": "coordination.k8s.io"
        }, 
        {
          "kind": "DeleteOptions", 
          "version": "v1alpha2", 
          "group": "coordination.k8s.io"
        }, 
        {
          "kind": "DeleteOptions", 
          "version": "v1beta1", 
          "group": "coordination.k8s.io"
        }, 
        {
          "kind": "DeleteOptions", 
          "version": "v1", 
          "group": "discovery.k8s.io"
        }, 
        {
          "kind": "DeleteOptions", 
          "version": "v1beta1", 
          "group": "discovery.k8s.io"
        }, 
        {
          "kind": "DeleteOptions", 
          "version": "v1", 
          "group": "events.k8s.io"
        }, 
        {
          "kind": "DeleteOptions", 
          "version": "v1beta1", 
          "group": "events.k8s.io"
        }, 
        {
          "kind": "DeleteOptions", 
          "version": "v1beta1", 
          "group": "extensions"
        }, 
        {
          "kind": "DeleteOptions", 
          "version": "v1", 
          "group": "flowcontrol.apiserver.k8s.io"
        }, 
        {
          "kind": "DeleteOptions", 
          "version": "v1beta1", 
          "group": "flowcontrol.apiserver.k8s.io"
        }, 
        {
          "kind": "DeleteOptions", 
          "version": "v1beta2", 
          "group": "flowcontrol.apiserver.k8s.io"
        }, 
        {
          "kind": "DeleteOptions", 
          "version": "v1beta3", 
          "group": "flowcontrol.apiserver.k8s.io"
        }, 
        {
          "kind": "DeleteOptions", 
          "version": "v1alpha1", 
          "group": "imagepolicy.k8s.io"
        }, 
        {
          "kind": "DeleteOptions", 
          "version": "v1alpha1", 
          "group": "internal.apiserver.k8s.io"
        }, 
        {
          "kind": "DeleteOptions", 
          "version": "v1", 
          "group": "networking.k8s.io"
        }, 
        {
          "kind": "DeleteOptions", 
          "version": "v1beta1", 
          "group": "networking.k8s.io"
        }, 
        {
          "kind": "DeleteOptions", 
          "version": "v1", 
          "group": "node.k8s.io"
        }, 
        {
          "kind": "DeleteOptions", 
          "version": "v1alpha1", 
          "group": "node.k8s.io"
        }, 
        {
          "kind": "DeleteOptions", 
          "version": "v1beta1", 
          "group": "node.k8s.io"
        }, 
        {
          "kind": "DeleteOptions", 
          "version": "v1", 
          "group": "policy"
        }, 
        {
          "kind": "DeleteOptions", 
          "version": "v1beta1", 
          "group": "policy"
        }, 
        {
          "kind": "DeleteOptions", 
          "version": "v1", 
          "group": "rbac.authorization.k8s.io"
        }, 
        {
          "kind": "DeleteOptions", 
          "version": "v1alpha1", 
          "group": "rbac.authorization.k8s.io"
        }, 
        {
          "kind": "DeleteOptions", 
          "version": "v1beta1", 
          "group": "rbac.authorization.k8s.io"
        }, 
        {
          "kind": "DeleteOptions", 
          "version": "v1", 
          "group": "resource.k8s.io"
        }, 
        {
          "kind": "DeleteOptions", 
          "version": "v1alpha3", 
          "group": "resource.k8s.io"
        }, 
        {
          "kind": "DeleteOptions", 
          "version": "v1beta1", 
          "group": "resource.k8s.io"
        }, 
        {
          "kind": "DeleteOptions", 
          "version": "v1beta2", 
          "group": "resource.k8s.io"
        }, 
        {
          "kind": "DeleteOptions", 
          "version": "v1", 
          "group": "scheduling.k8s.io"
        }, 
        {
          "kind": "DeleteOptions", 
          "version": "v1alpha1", 
          "group": "scheduling.k8s.io"
        }, 
        {
          "kind": "DeleteOptions", 
          "version": "v1beta1", 
          "group": "scheduling.k8s.io"
        }, 
        {
          "kind": "DeleteOptions", 
          "version": "v1", 
          "group": "storage.k8s.io"
        }, 
        {
          "kind": "DeleteOptions", 
          "version": "v1alpha1", 
          "group": "storage.k8s.io"
        }, 
        {
          "kind": "DeleteOptions", 
          "version": "v1beta1", 
          "group": "storage.k8s.io"
        }, 
        {
          "kind": "DeleteOptions", 
          "version": "v1alpha1", 
          "group": "storagemigration.k8s.io"
        }
      ], 
      "description": "DeleteOptions may be provided when deleting an API object.", 
      "properties": {
        "kind": {
          "enum": [
            "DeleteOptions"
          ], 
          "type": "string", 
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
        }, 
        "dryRun": {
          "items": {
            "type": "string"
          }, 
          "type": "array", 
          "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed", 
          "x-kubernetes-list-type": "atomic"
        }, 
        "orphanDependents": {
          "type": "boolean", 
          "description": "Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \"orphan\" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both."
        }, 
        "apiVersion": {
          "type": "string", 
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources"
        }, 
        "gracePeriodSeconds": {
          "type": "integer", 
          "description": "The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.", 
          "format": "int64"
        }, 
        "propagationPolicy": {
          "type": "string", 
          "description": "Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground."
        }, 
        "preconditions": {
          "description": "Must be fulfilled before a deletion is carried out. If not possible, a 409 Conflict status will be returned.", 
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Preconditions"
        }, 
        "ignoreStoreReadErrorWithClusterBreakingPotential": {
          "type": "boolean", 
          "description": "if set to true, it will trigger an unsafe deletion of the resource in case the normal deletion flow fails with a corrupt object error. A resource is considered corrupt if it can not be retrieved from the underlying storage successfully because of a) its data can not be transformed e.g. decryption failure, or b) it fails to decode into an object. NOTE: unsafe deletion ignores finalizer constraints, skips precondition checks, and removes the object from the storage. WARNING: This may potentially break the cluster if the workload associated with the resource being unsafe-deleted relies on normal deletion flow. Use only if you REALLY know what you are doing. The default value is false, and the user must opt in to enable it"
        }
      }
    }, 
    "io.k8s.api.authentication.v1.SelfSubjectReview": {
      "type": "object", 
      "x-kubernetes-group-version-kind": [
        {
          "kind": "SelfSubjectReview", 
          "version": "v1", 
          "group": "authentication.k8s.io"
        }
      ], 
      "description": "SelfSubjectReview contains the user information that the kube-apiserver has about the user making this request. When using impersonation, users will receive the user info of the user being impersonated.  If impersonation or request header authentication is used, any extra keys will have their case ignored and returned as lowercase.", 
      "properties": {
        "status": {
          "description": "Status is filled in by the server with the user attributes.", 
          "$ref": "#/definitions/io.k8s.api.authentication.v1.SelfSubjectReviewStatus"
        }, 
        "kind": {
          "enum": [
            "SelfSubjectReview"
          ], 
          "type": "string", 
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
        }, 
        "apiVersion": {
          "type": "string", 
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources"
        }, 
        "metadata": {
          "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata", 
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        }
      }
    }, 
    "io.k8s.api.networking.v1.NetworkPolicyPeer": {
      "type": "object", 
      "description": "NetworkPolicyPeer describes a peer to allow traffic to/from. Only certain combinations of fields are allowed", 
      "properties": {
        "namespaceSelector": {
          "description": "namespaceSelector selects namespaces using cluster-scoped labels. This field follows standard label selector semantics; if present but empty, it selects all namespaces.\n\nIf podSelector is also set, then the NetworkPolicyPeer as a whole selects the pods matching podSelector in the namespaces selected by namespaceSelector. Otherwise it selects all pods in the namespaces selected by namespaceSelector.", 
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector"
        }, 
        "ipBlock": {
          "description": "ipBlock defines policy on a particular IPBlock. If this field is set then neither of the other fields can be.", 
          "$ref": "#/definitions/io.k8s.api.networking.v1.IPBlock"
        }, 
        "podSelector": {
          "description": "podSelector is a label selector which selects pods. This field follows standard label selector semantics; if present but empty, it selects all pods.\n\nIf namespaceSelector is also set, then the NetworkPolicyPeer as a whole selects the pods matching podSelector in the Namespaces selected by NamespaceSelector. Otherwise it selects the pods matching podSelector in the policy's own namespace.", 
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector"
        }
      }
    }, 
    "io.k8s.api.admissionregistration.v1.MatchCondition": {
      "required": [
        "name", 
        "expression"
      ], 
      "type": "object", 
      "description": "MatchCondition represents a condition which must by fulfilled for a request to be sent to a webhook.", 
      "properties": {
        "expression": {
          "type": "string", 
          "description": "Expression represents the expression which will be evaluated by CEL. Must evaluate to bool. CEL expressions have access to the contents of the AdmissionRequest and Authorizer, organized into CEL variables:\n\n'object' - The object from the incoming request. The value is null for DELETE requests. 'oldObject' - The existing object. The value is null for CREATE requests. 'request' - Attributes of the admission request(/pkg/apis/admission/types.go#AdmissionRequest). 'authorizer' - A CEL Authorizer. May be used to perform authorization checks for the principal (user or service account) of the request.\n  See https://pkg.go.dev/k8s.io/apiserver/pkg/cel/library#Authz\n'authorizer.requestResource' - A CEL ResourceCheck constructed from the 'authorizer' and configured with the\n  request resource.\nDocumentation on CEL: https://kubernetes.io/docs/reference/using-api/cel/\n\nRequired."
        }, 
        "name": {
          "type": "string", 
          "description": "Name is an identifier for this match condition, used for strategic merging of MatchConditions, as well as providing an identifier for logging purposes. A good name should be descriptive of the associated expression. Name must be a qualified name consisting of alphanumeric characters, '-', '_' or '.', and must start and end with an alphanumeric character (e.g. 'MyName',  or 'my.name',  or '123-abc', regex used for validation is '([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9]') with an optional DNS subdomain prefix and '/' (e.g. 'example.com/MyName')\n\nRequired."
        }
      }
    }, 
    "io.k8s.api.admissionregistration.v1.RuleWithOperations": {
      "type": "object", 
      "description": "RuleWithOperations is a tuple of Operations and Resources. It is recommended to make sure that all the tuple expansions are valid.", 
      "properties": {
        "operations": {
          "items": {
            "type": "string"
          }, 
          "type": "array", 
          "description": "Operations is the operations the admission hook cares about - CREATE, UPDATE, DELETE, CONNECT or * for all of those operations and any future admission operations that are added. If '*' is present, the length of the slice must be one. Required.", 
          "x-kubernetes-list-type": "atomic"
        }, 
        "apiGroups": {
          "items": {
            "type": "string"
          }, 
          "type": "array", 
          "description": "APIGroups is the API groups the resources belong to. '*' is all groups. If '*' is present, the length of the slice must be one. Required.", 
          "x-kubernetes-list-type": "atomic"
        }, 
        "apiVersions": {
          "items": {
            "type": "string"
          }, 
          "type": "array", 
          "description": "APIVersions is the API versions the resources belong to. '*' is all versions. If '*' is present, the length of the slice must be one. Required.", 
          "x-kubernetes-list-type": "atomic"
        }, 
        "resources": {
          "items": {
            "type": "string"
          }, 
          "type": "array", 
          "description": "Resources is a list of resources this rule applies to.\n\nFor example: 'pods' means pods. 'pods/log' means the log subresource of pods. '*' means all resources, but not subresources. 'pods/*' means all subresources of pods. '*/scale' means all scale subresources. '*/*' means all resources and their subresources.\n\nIf wildcard is present, the validation rule will ensure resources do not overlap with each other.\n\nDepending on the enclosing object, subresources might not be allowed. Required.", 
          "x-kubernetes-list-type": "atomic"
        }, 
        "scope": {
          "type": "string", 
          "description": "scope specifies the scope of this rule. Valid values are \"Cluster\", \"Namespaced\", and \"*\" \"Cluster\" means that only cluster-scoped resources will match this rule. Namespace API objects are cluster-scoped. \"Namespaced\" means that only namespaced resources will match this rule. \"*\" means that there are no scope restrictions. Subresources match the scope of their parent resource. Default is \"*\"."
        }
      }
    }, 
    "io.k8s.api.autoscaling.v2.HorizontalPodAutoscalerSpec": {
      "required": [
        "scaleTargetRef", 
        "maxReplicas"
      ], 
      "type": "object", 
      "description": "HorizontalPodAutoscalerSpec describes the desired functionality of the HorizontalPodAutoscaler.", 
      "properties": {
        "metrics": {
          "items": {
            "$ref": "#/definitions/io.k8s.api.autoscaling.v2.MetricSpec"
          }, 
          "type": "array", 
          "description": "metrics contains the specifications for which to use to calculate the desired replica count (the maximum replica count across all metrics will be used).  The desired replica count is calculated multiplying the ratio between the target value and the current value by the current number of pods.  Ergo, metrics used must decrease as the pod count is increased, and vice-versa.  See the individual metric source types for more information about how each type of metric must respond. If not set, the default metric will be set to 80% average CPU utilization.", 
          "x-kubernetes-list-type": "atomic"
        }, 
        "minReplicas": {
          "type": "integer", 
          "description": "minReplicas is the lower limit for the number of replicas to which the autoscaler can scale down.  It defaults to 1 pod.  minReplicas is allowed to be 0 if the alpha feature gate HPAScaleToZero is enabled and at least one Object or External metric is configured.  Scaling is active as long as at least one metric value is available.", 
          "format": "int32"
        }, 
        "scaleTargetRef": {
          "description": "scaleTargetRef points to the target resource to scale, and is used to the pods for which metrics should be collected, as well as to actually change the replica count.", 
          "$ref": "#/definitions/io.k8s.api.autoscaling.v2.CrossVersionObjectReference"
        }, 
        "behavior": {
          "description": "behavior configures the scaling behavior of the target in both Up and Down directions (scaleUp and scaleDown fields respectively). If not set, the default HPAScalingRules for scale up and scale down are used.", 
          "$ref": "#/definitions/io.k8s.api.autoscaling.v2.HorizontalPodAutoscalerBehavior"
        }, 
        "maxReplicas": {
          "type": "integer", 
          "description": "maxReplicas is the upper limit for the number of replicas to which the autoscaler can scale up. It cannot be less that minReplicas.", 
          "format": "int32"
        }
      }
    }, 
    "io.k8s.api.certificates.v1alpha1.PodCertificateRequest": {
      "type": "object", 
      "required": [
        "spec"
      ], 
      "x-kubernetes-group-version-kind": [
        {
          "kind": "PodCertificateRequest", 
          "version": "v1alpha1", 
          "group": "certificates.k8s.io"
        }
      ], 
      "description": "PodCertificateRequest encodes a pod requesting a certificate from a given signer.\n\nKubelets use this API to implement podCertificate projected volumes", 
      "properties": {
        "status": {
          "description": "status contains the issued certificate, and a standard set of conditions.", 
          "$ref": "#/definitions/io.k8s.api.certificates.v1alpha1.PodCertificateRequestStatus"
        }, 
        "kind": {
          "enum": [
            "PodCertificateRequest"
          ], 
          "type": "string", 
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
        }, 
        "spec": {
          "description": "spec contains the details about the certificate being requested.", 
          "$ref": "#/definitions/io.k8s.api.certificates.v1alpha1.PodCertificateRequestSpec"
        }, 
        "apiVersion": {
          "type": "string", 
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources"
        }, 
        "metadata": {
          "description": "metadata contains the object metadata.", 
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        }
      }
    }, 
    "io.k8s.api.resource.v1alpha3.DeviceTaintRuleList": {
      "type": "object", 
      "required": [
        "items"
      ], 
      "x-kubernetes-group-version-kind": [
        {
          "kind": "DeviceTaintRuleList", 
          "version": "v1alpha3", 
          "group": "resource.k8s.io"
        }
      ], 
      "description": "DeviceTaintRuleList is a collection of DeviceTaintRules.", 
      "properties": {
        "items": {
          "items": {
            "$ref": "#/definitions/io.k8s.api.resource.v1alpha3.DeviceTaintRule"
          }, 
          "type": "array", 
          "description": "Items is the list of DeviceTaintRules."
        }, 
        "kind": {
          "enum": [
            "DeviceTaintRuleList"
          ], 
          "type": "string", 
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
        }, 
        "apiVersion": {
          "type": "string", 
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources"
        }, 
        "metadata": {
          "description": "Standard list metadata", 
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      }
    }, 
    "io.k8s.api.certificates.v1.CertificateSigningRequestList": {
      "type": "object", 
      "required": [
        "items"
      ], 
      "x-kubernetes-group-version-kind": [
        {
          "kind": "CertificateSigningRequestList", 
          "version": "v1", 
          "group": "certificates.k8s.io"
        }
      ], 
      "description": "CertificateSigningRequestList is a collection of CertificateSigningRequest objects", 
      "properties": {
        "items": {
          "items": {
            "$ref": "#/definitions/io.k8s.api.certificates.v1.CertificateSigningRequest"
          }, 
          "type": "array", 
          "description": "items is a collection of CertificateSigningRequest objects"
        }, 
        "kind": {
          "enum": [
            "CertificateSigningRequestList"
          ], 
          "type": "string", 
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
        }, 
        "apiVersion": {
          "type": "string", 
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources"
        }, 
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      }
    }, 
    "io.k8s.api.discovery.v1.ForNode": {
      "required": [
        "name"
      ], 
      "type": "object", 
      "description": "ForNode provides information about which nodes should consume this endpoint.", 
      "properties": {
        "name": {
          "type": "string", 
          "description": "name represents the name of the node."
        }
      }
    }, 
    "io.k8s.api.batch.v1.JobSpec": {
      "required": [
        "template"
      ], 
      "type": "object", 
      "description": "JobSpec describes how the job execution will look like.", 
      "properties": {
        "suspend": {
          "type": "boolean", 
          "description": "suspend specifies whether the Job controller should create Pods or not. If a Job is created with suspend set to true, no Pods are created by the Job controller. If a Job is suspended after creation (i.e. the flag goes from false to true), the Job controller will delete all active Pods associated with this Job. Users must design their workload to gracefully handle this. Suspending a Job will reset the StartTime field of the Job, effectively resetting the ActiveDeadlineSeconds timer too. Defaults to false."
        }, 
        "completions": {
          "type": "integer", 
          "description": "Specifies the desired number of successfully finished pods the job should be run with.  Setting to null means that the success of any pod signals the success of all pods, and allows parallelism to have any positive value.  Setting to 1 means that parallelism is limited to 1 and the success of that pod signals the success of the job. More info: https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/", 
          "format": "int32"
        }, 
        "manualSelector": {
          "type": "boolean", 
          "description": "manualSelector controls generation of pod labels and pod selectors. Leave `manualSelector` unset unless you are certain what you are doing. When false or unset, the system pick labels unique to this job and appends those labels to the pod template.  When true, the user is responsible for picking unique labels and specifying the selector.  Failure to pick a unique label may cause this and other jobs to not function correctly.  However, You may see `manualSelector=true` in jobs that were created with the old `extensions/v1beta1` API. More info: https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/#specifying-your-own-pod-selector"
        }, 
        "ttlSecondsAfterFinished": {
          "type": "integer", 
          "description": "ttlSecondsAfterFinished limits the lifetime of a Job that has finished execution (either Complete or Failed). If this field is set, ttlSecondsAfterFinished after the Job finishes, it is eligible to be automatically deleted. When the Job is being deleted, its lifecycle guarantees (e.g. finalizers) will be honored. If this field is unset, the Job won't be automatically deleted. If this field is set to zero, the Job becomes eligible to be deleted immediately after it finishes.", 
          "format": "int32"
        }, 
        "successPolicy": {
          "description": "successPolicy specifies the policy when the Job can be declared as succeeded. If empty, the default behavior applies - the Job is declared as succeeded only when the number of succeeded pods equals to the completions. When the field is specified, it must be immutable and works only for the Indexed Jobs. Once the Job meets the SuccessPolicy, the lingering pods are terminated.", 
          "$ref": "#/definitions/io.k8s.api.batch.v1.SuccessPolicy"
        }, 
        "podFailurePolicy": {
          "description": "Specifies the policy of handling failed pods. In particular, it allows to specify the set of actions and conditions which need to be satisfied to take the associated action. If empty, the default behaviour applies - the counter of failed pods, represented by the jobs's .status.failed field, is incremented and it is checked against the backoffLimit. This field cannot be used in combination with restartPolicy=OnFailure.", 
          "$ref": "#/definitions/io.k8s.api.batch.v1.PodFailurePolicy"
        }, 
        "managedBy": {
          "type": "string", 
          "description": "ManagedBy field indicates the controller that manages a Job. The k8s Job controller reconciles jobs which don't have this field at all or the field value is the reserved string `kubernetes.io/job-controller`, but skips reconciling Jobs with a custom value for this field. The value must be a valid domain-prefixed path (e.g. acme.io/foo) - all characters before the first \"/\" must be a valid subdomain as defined by RFC 1123. All characters trailing the first \"/\" must be valid HTTP Path characters as defined by RFC 3986. The value cannot exceed 63 characters. This field is immutable.\n\nThis field is beta-level. The job controller accepts setting the field when the feature gate JobManagedBy is enabled (enabled by default)."
        }, 
        "maxFailedIndexes": {
          "type": "integer", 
          "description": "Specifies the maximal number of failed indexes before marking the Job as failed, when backoffLimitPerIndex is set. Once the number of failed indexes exceeds this number the entire Job is marked as Failed and its execution is terminated. When left as null the job continues execution of all of its indexes and is marked with the `Complete` Job condition. It can only be specified when backoffLimitPerIndex is set. It can be null or up to completions. It is required and must be less than or equal to 10^4 when is completions greater than 10^5.", 
          "format": "int32"
        }, 
        "selector": {
          "description": "A label query over pods that should match the pod count. Normally, the system sets this field for you. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors", 
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector"
        }, 
        "backoffLimit": {
          "type": "integer", 
          "description": "Specifies the number of retries before marking this job failed. Defaults to 6, unless backoffLimitPerIndex (only Indexed Job) is specified. When backoffLimitPerIndex is specified, backoffLimit defaults to 2147483647.", 
          "format": "int32"
        }, 
        "podReplacementPolicy": {
          "type": "string", 
          "description": "podReplacementPolicy specifies when to create replacement Pods. Possible values are: - TerminatingOrFailed means that we recreate pods\n  when they are terminating (has a metadata.deletionTimestamp) or failed.\n- Failed means to wait until a previously created Pod is fully terminated (has phase\n  Failed or Succeeded) before creating a replacement Pod.\n\nWhen using podFailurePolicy, Failed is the the only allowed value. TerminatingOrFailed and Failed are allowed values when podFailurePolicy is not in use."
        }, 
        "activeDeadlineSeconds": {
          "type": "integer", 
          "description": "Specifies the duration in seconds relative to the startTime that the job may be continuously active before the system tries to terminate it; value must be positive integer. If a Job is suspended (at creation or through an update), this timer will effectively be stopped and reset when the Job is resumed again.", 
          "format": "int64"
        }, 
        "parallelism": {
          "type": "integer", 
          "description": "Specifies the maximum desired number of pods the job should run at any given time. The actual number of pods running in steady state will be less than this number when ((.spec.completions - .status.successful) < .spec.parallelism), i.e. when the work left to do is less than max parallelism. More info: https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/", 
          "format": "int32"
        }, 
        "template": {
          "description": "Describes the pod that will be created when executing a job. The only allowed template.spec.restartPolicy values are \"Never\" or \"OnFailure\". More info: https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/", 
          "$ref": "#/definitions/io.k8s.api.core.v1.PodTemplateSpec"
        }, 
        "completionMode": {
          "type": "string", 
          "description": "completionMode specifies how Pod completions are tracked. It can be `NonIndexed` (default) or `Indexed`.\n\n`NonIndexed` means that the Job is considered complete when there have been .spec.completions successfully completed Pods. Each Pod completion is homologous to each other.\n\n`Indexed` means that the Pods of a Job get an associated completion index from 0 to (.spec.completions - 1), available in the annotation batch.kubernetes.io/job-completion-index. The Job is considered complete when there is one successfully completed Pod for each index. When value is `Indexed`, .spec.completions must be specified and `.spec.parallelism` must be less than or equal to 10^5. In addition, The Pod name takes the form `$(job-name)-$(index)-$(random-string)`, the Pod hostname takes the form `$(job-name)-$(index)`.\n\nMore completion modes can be added in the future. If the Job controller observes a mode that it doesn't recognize, which is possible during upgrades due to version skew, the controller skips updates for the Job."
        }, 
        "backoffLimitPerIndex": {
          "type": "integer", 
          "description": "Specifies the limit for the number of retries within an index before marking this index as failed. When enabled the number of failures per index is kept in the pod's batch.kubernetes.io/job-index-failure-count annotation. It can only be set when Job's completionMode=Indexed, and the Pod's restart policy is Never. The field is immutable.", 
          "format": "int32"
        }
      }
    }, 
    "io.k8s.api.authorization.v1.LabelSelectorAttributes": {
      "type": "object", 
      "description": "LabelSelectorAttributes indicates a label limited access. Webhook authors are encouraged to * ensure rawSelector and requirements are not both set * consider the requirements field if set * not try to parse or consider the rawSelector field if set. This is to avoid another CVE-2022-2880 (i.e. getting different systems to agree on how exactly to parse a query is not something we want), see https://www.oxeye.io/resources/golang-parameter-smuggling-attack for more details. For the *SubjectAccessReview endpoints of the kube-apiserver: * If rawSelector is empty and requirements are empty, the request is not limited. * If rawSelector is present and requirements are empty, the rawSelector will be parsed and limited if the parsing succeeds. * If rawSelector is empty and requirements are present, the requirements should be honored * If rawSelector is present and requirements are present, the request is invalid.", 
      "properties": {
        "rawSelector": {
          "type": "string", 
          "description": "rawSelector is the serialization of a field selector that would be included in a query parameter. Webhook implementations are encouraged to ignore rawSelector. The kube-apiserver's *SubjectAccessReview will parse the rawSelector as long as the requirements are not present."
        }, 
        "requirements": {
          "items": {
            "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelectorRequirement"
          }, 
          "type": "array", 
          "description": "requirements is the parsed interpretation of a label selector. All requirements must be met for a resource instance to match the selector. Webhook implementations should handle requirements, but how to handle them is up to the webhook. Since requirements can only limit the request, it is safe to authorize as unlimited request if the requirements are not understood.", 
          "x-kubernetes-list-type": "atomic"
        }
      }
    }, 
    "io.k8s.api.flowcontrol.v1.ResourcePolicyRule": {
      "required": [
        "verbs", 
        "apiGroups", 
        "resources"
      ], 
      "type": "object", 
      "description": "ResourcePolicyRule is a predicate that matches some resource requests, testing the request's verb and the target resource. A ResourcePolicyRule matches a resource request if and only if: (a) at least one member of verbs matches the request, (b) at least one member of apiGroups matches the request, (c) at least one member of resources matches the request, and (d) either (d1) the request does not specify a namespace (i.e., `Namespace==\"\"`) and clusterScope is true or (d2) the request specifies a namespace and least one member of namespaces matches the request's namespace.", 
      "properties": {
        "apiGroups": {
          "items": {
            "type": "string"
          }, 
          "type": "array", 
          "description": "`apiGroups` is a list of matching API groups and may not be empty. \"*\" matches all API groups and, if present, must be the only entry. Required.", 
          "x-kubernetes-list-type": "set"
        }, 
        "clusterScope": {
          "type": "boolean", 
          "description": "`clusterScope` indicates whether to match requests that do not specify a namespace (which happens either because the resource is not namespaced or the request targets all namespaces). If this field is omitted or false then the `namespaces` field must contain a non-empty list."
        }, 
        "namespaces": {
          "items": {
            "type": "string"
          }, 
          "type": "array", 
          "description": "`namespaces` is a list of target namespaces that restricts matches.  A request that specifies a target namespace matches only if either (a) this list contains that target namespace or (b) this list contains \"*\".  Note that \"*\" matches any specified namespace but does not match a request that _does not specify_ a namespace (see the `clusterScope` field for that). This list may be empty, but only if `clusterScope` is true.", 
          "x-kubernetes-list-type": "set"
        }, 
        "resources": {
          "items": {
            "type": "string"
          }, 
          "type": "array", 
          "description": "`resources` is a list of matching resources (i.e., lowercase and plural) with, if desired, subresource.  For example, [ \"services\", \"nodes/status\" ].  This list may not be empty. \"*\" matches all resources and, if present, must be the only entry. Required.", 
          "x-kubernetes-list-type": "set"
        }, 
        "verbs": {
          "items": {
            "type": "string"
          }, 
          "type": "array", 
          "description": "`verbs` is a list of matching verbs and may not be empty. \"*\" matches all verbs and, if present, must be the only entry. Required.", 
          "x-kubernetes-list-type": "set"
        }
      }
    }, 
    "io.k8s.apimachinery.pkg.util.intstr.IntOrString": {
      "oneOf": [
        {
          "type": "string"
        }, 
        {
          "type": "integer"
        }
      ]
    }, 
    "io.k8s.api.core.v1.NodeSystemInfo": {
      "required": [
        "machineID", 
        "systemUUID", 
        "bootID", 
        "kernelVersion", 
        "osImage", 
        "containerRuntimeVersion", 
        "kubeletVersion", 
        "kubeProxyVersion", 
        "operatingSystem", 
        "architecture"
      ], 
      "type": "object", 
      "description": "NodeSystemInfo is a set of ids/uuids to uniquely identify the node.", 
      "properties": {
        "kernelVersion": {
          "type": "string", 
          "description": "Kernel Version reported by the node from 'uname -r' (e.g. 3.16.0-0.bpo.4-amd64)."
        }, 
        "kubeletVersion": {
          "type": "string", 
          "description": "Kubelet Version reported by the node."
        }, 
        "containerRuntimeVersion": {
          "type": "string", 
          "description": "ContainerRuntime Version reported by the node through runtime remote API (e.g. containerd://1.4.2)."
        }, 
        "machineID": {
          "type": "string", 
          "description": "MachineID reported by the node. For unique machine identification in the cluster this field is preferred. Learn more from man(5) machine-id: http://man7.org/linux/man-pages/man5/machine-id.5.html"
        }, 
        "kubeProxyVersion": {
          "type": "string", 
          "description": "Deprecated: KubeProxy Version reported by the node."
        }, 
        "bootID": {
          "type": "string", 
          "description": "Boot ID reported by the node."
        }, 
        "osImage": {
          "type": "string", 
          "description": "OS Image reported by the node from /etc/os-release (e.g. Debian GNU/Linux 7 (wheezy))."
        }, 
        "architecture": {
          "type": "string", 
          "description": "The Architecture reported by the node"
        }, 
        "systemUUID": {
          "type": "string", 
          "description": "SystemUUID reported by the node. For unique machine identification MachineID is preferred. This field is specific to Red Hat hosts https://access.redhat.com/documentation/en-us/red_hat_subscription_management/1/html/rhsm/uuid"
        }, 
        "operatingSystem": {
          "type": "string", 
          "description": "The Operating System reported by the node"
        }, 
        "swap": {
          "description": "Swap Info reported by the node.", 
          "$ref": "#/definitions/io.k8s.api.core.v1.NodeSwapStatus"
        }
      }
    }, 
    "io.k8s.api.networking.v1.NetworkPolicyList": {
      "type": "object", 
      "required": [
        "items"
      ], 
      "x-kubernetes-group-version-kind": [
        {
          "kind": "NetworkPolicyList", 
          "version": "v1", 
          "group": "networking.k8s.io"
        }
      ], 
      "description": "NetworkPolicyList is a list of NetworkPolicy objects.", 
      "properties": {
        "items": {
          "items": {
            "$ref": "#/definitions/io.k8s.api.networking.v1.NetworkPolicy"
          }, 
          "type": "array", 
          "description": "items is a list of schema objects."
        }, 
        "kind": {
          "enum": [
            "NetworkPolicyList"
          ], 
          "type": "string", 
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
        }, 
        "apiVersion": {
          "type": "string", 
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources"
        }, 
        "metadata": {
          "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata", 
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      }
    }, 
    "io.k8s.api.resource.v1beta2.DeviceSelector": {
      "type": "object", 
      "description": "DeviceSelector must have exactly one field set.", 
      "properties": {
        "cel": {
          "description": "CEL contains a CEL expression for selecting a device.", 
          "$ref": "#/definitions/io.k8s.api.resource.v1beta2.CELDeviceSelector"
        }
      }
    }, 
    "io.k8s.api.autoscaling.v2.ExternalMetricStatus": {
      "required": [
        "metric", 
        "current"
      ], 
      "type": "object", 
      "description": "ExternalMetricStatus indicates the current value of a global metric not associated with any Kubernetes object.", 
      "properties": {
        "current": {
          "description": "current contains the current value for the given metric", 
          "$ref": "#/definitions/io.k8s.api.autoscaling.v2.MetricValueStatus"
        }, 
        "metric": {
          "description": "metric identifies the target metric by name and selector", 
          "$ref": "#/definitions/io.k8s.api.autoscaling.v2.MetricIdentifier"
        }
      }
    }, 
    "io.k8s.api.admissionregistration.v1.ExpressionWarning": {
      "required": [
        "fieldRef", 
        "warning"
      ], 
      "type": "object", 
      "description": "ExpressionWarning is a warning information that targets a specific expression.", 
      "properties": {
        "fieldRef": {
          "type": "string", 
          "description": "The path to the field that refers the expression. For example, the reference to the expression of the first item of validations is \"spec.validations[0].expression\""
        }, 
        "warning": {
          "type": "string", 
          "description": "The content of type checking information in a human-readable form. Each line of the warning contains the type that the expression is checked against, followed by the type check error from the compiler."
        }
      }
    }, 
    "io.k8s.api.networking.v1.NetworkPolicyIngressRule": {
      "type": "object", 
      "description": "NetworkPolicyIngressRule describes a particular set of traffic that is allowed to the pods matched by a NetworkPolicySpec's podSelector. The traffic must match both ports and from.", 
      "properties": {
        "from": {
          "items": {
            "$ref": "#/definitions/io.k8s.api.networking.v1.NetworkPolicyPeer"
          }, 
          "type": "array", 
          "description": "from is a list of sources which should be able to access the pods selected for this rule. Items in this list are combined using a logical OR operation. If this field is empty or missing, this rule matches all sources (traffic not restricted by source). If this field is present and contains at least one item, this rule allows traffic only if the traffic matches at least one item in the from list.", 
          "x-kubernetes-list-type": "atomic"
        }, 
        "ports": {
          "items": {
            "$ref": "#/definitions/io.k8s.api.networking.v1.NetworkPolicyPort"
          }, 
          "type": "array", 
          "description": "ports is a list of ports which should be made accessible on the pods selected for this rule. Each item in this list is combined using a logical OR. If this field is empty or missing, this rule matches all ports (traffic not restricted by port). If this field is present and contains at least one item, then this rule allows traffic only if the traffic matches at least one port in the list.", 
          "x-kubernetes-list-type": "atomic"
        }
      }
    }, 
    "io.k8s.api.resource.v1beta2.AllocationResult": {
      "type": "object", 
      "description": "AllocationResult contains attributes of an allocated resource.", 
      "properties": {
        "allocationTimestamp": {
          "description": "AllocationTimestamp stores the time when the resources were allocated. This field is not guaranteed to be set, in which case that time is unknown.\n\nThis is an alpha field and requires enabling the DRADeviceBindingConditions and DRAResourceClaimDeviceStatus feature gate.", 
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
        }, 
        "devices": {
          "description": "Devices is the result of allocating devices.", 
          "$ref": "#/definitions/io.k8s.api.resource.v1beta2.DeviceAllocationResult"
        }, 
        "nodeSelector": {
          "description": "NodeSelector defines where the allocated resources are available. If unset, they are available everywhere.", 
          "$ref": "#/definitions/io.k8s.api.core.v1.NodeSelector"
        }
      }
    }, 
    "io.k8s.api.resource.v1.ResourceClaimSpec": {
      "type": "object", 
      "description": "ResourceClaimSpec defines what is being requested in a ResourceClaim and how to configure it.", 
      "properties": {
        "devices": {
          "description": "Devices defines how to request devices.", 
          "$ref": "#/definitions/io.k8s.api.resource.v1.DeviceClaim"
        }
      }
    }, 
    "io.k8s.api.certificates.v1alpha1.PodCertificateRequestStatus": {
      "type": "object", 
      "description": "PodCertificateRequestStatus describes the status of the request, and holds the certificate data if the request is issued.", 
      "properties": {
        "certificateChain": {
          "type": "string", 
          "description": "certificateChain is populated with an issued certificate by the signer. This field is set via the /status subresource. Once populated, this field is immutable.\n\nIf the certificate signing request is denied, a condition of type \"Denied\" is added and this field remains empty. If the signer cannot issue the certificate, a condition of type \"Failed\" is added and this field remains empty.\n\nValidation requirements:\n 1. certificateChain must consist of one or more PEM-formatted certificates.\n 2. Each entry must be a valid PEM-wrapped, DER-encoded ASN.1 Certificate as\n    described in section 4 of RFC5280.\n\nIf more than one block is present, and the definition of the requested spec.signerName does not indicate otherwise, the first block is the issued certificate, and subsequent blocks should be treated as intermediate certificates and presented in TLS handshakes.  When projecting the chain into a pod volume, kubelet will drop any data in-between the PEM blocks, as well as any PEM block headers."
        }, 
        "notAfter": {
          "description": "notAfter is the time at which the certificate expires.  The value must be the same as the notAfter value in the leaf certificate in certificateChain.  This field is set via the /status subresource.  Once populated, it is immutable.  The signer must set this field at the same time it sets certificateChain.", 
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
        }, 
        "conditions": {
          "description": "conditions applied to the request.\n\nThe types \"Issued\", \"Denied\", and \"Failed\" have special handling.  At most one of these conditions may be present, and they must have status \"True\".\n\nIf the request is denied with `Reason=UnsupportedKeyType`, the signer may suggest a key type that will work in the message field.", 
          "x-kubernetes-list-map-keys": [
            "type"
          ], 
          "x-kubernetes-patch-merge-key": "type", 
          "items": {
            "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Condition"
          }, 
          "type": "array", 
          "x-kubernetes-list-type": "map", 
          "x-kubernetes-patch-strategy": "merge"
        }, 
        "beginRefreshAt": {
          "description": "beginRefreshAt is the time at which the kubelet should begin trying to refresh the certificate.  This field is set via the /status subresource, and must be set at the same time as certificateChain.  Once populated, this field is immutable.\n\nThis field is only a hint.  Kubelet may start refreshing before or after this time if necessary.", 
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
        }, 
        "notBefore": {
          "description": "notBefore is the time at which the certificate becomes valid.  The value must be the same as the notBefore value in the leaf certificate in certificateChain.  This field is set via the /status subresource.  Once populated, it is immutable. The signer must set this field at the same time it sets certificateChain.", 
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
        }
      }
    }, 
    "io.k8s.api.core.v1.VolumeDevice": {
      "required": [
        "name", 
        "devicePath"
      ], 
      "type": "object", 
      "description": "volumeDevice describes a mapping of a raw block device within a container.", 
      "properties": {
        "devicePath": {
          "type": "string", 
          "description": "devicePath is the path inside of the container that the device will be mapped to."
        }, 
        "name": {
          "type": "string", 
          "description": "name must match the name of a persistentVolumeClaim in the pod"
        }
      }
    }, 
    "io.k8s.api.core.v1.StorageOSPersistentVolumeSource": {
      "type": "object", 
      "description": "Represents a StorageOS persistent volume resource.", 
      "properties": {
        "volumeName": {
          "type": "string", 
          "description": "volumeName is the human-readable name of the StorageOS volume.  Volume names are only unique within a namespace."
        }, 
        "readOnly": {
          "type": "boolean", 
          "description": "readOnly defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts."
        }, 
        "volumeNamespace": {
          "type": "string", 
          "description": "volumeNamespace specifies the scope of the volume within StorageOS.  If no namespace is specified then the Pod's namespace will be used.  This allows the Kubernetes name scoping to be mirrored within StorageOS for tighter integration. Set VolumeName to any name to override the default behaviour. Set to \"default\" if you are not using namespaces within StorageOS. Namespaces that do not pre-exist within StorageOS will be created."
        }, 
        "secretRef": {
          "description": "secretRef specifies the secret to use for obtaining the StorageOS API credentials.  If not specified, default values will be attempted.", 
          "$ref": "#/definitions/io.k8s.api.core.v1.ObjectReference"
        }, 
        "fsType": {
          "type": "string", 
          "description": "fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified."
        }
      }
    }, 
    "io.k8s.api.coordination.v1beta1.LeaseCandidateSpec": {
      "required": [
        "leaseName", 
        "binaryVersion", 
        "strategy"
      ], 
      "type": "object", 
      "description": "LeaseCandidateSpec is a specification of a Lease.", 
      "properties": {
        "binaryVersion": {
          "type": "string", 
          "description": "BinaryVersion is the binary version. It must be in a semver format without leading `v`. This field is required."
        }, 
        "pingTime": {
          "description": "PingTime is the last time that the server has requested the LeaseCandidate to renew. It is only done during leader election to check if any LeaseCandidates have become ineligible. When PingTime is updated, the LeaseCandidate will respond by updating RenewTime.", 
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.MicroTime"
        }, 
        "renewTime": {
          "description": "RenewTime is the time that the LeaseCandidate was last updated. Any time a Lease needs to do leader election, the PingTime field is updated to signal to the LeaseCandidate that they should update the RenewTime. Old LeaseCandidate objects are also garbage collected if it has been hours since the last renew. The PingTime field is updated regularly to prevent garbage collection for still active LeaseCandidates.", 
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.MicroTime"
        }, 
        "leaseName": {
          "type": "string", 
          "description": "LeaseName is the name of the lease for which this candidate is contending. The limits on this field are the same as on Lease.name. Multiple lease candidates may reference the same Lease.name. This field is immutable."
        }, 
        "emulationVersion": {
          "type": "string", 
          "description": "EmulationVersion is the emulation version. It must be in a semver format without leading `v`. EmulationVersion must be less than or equal to BinaryVersion. This field is required when strategy is \"OldestEmulationVersion\""
        }, 
        "strategy": {
          "type": "string", 
          "description": "Strategy is the strategy that coordinated leader election will use for picking the leader. If multiple candidates for the same Lease return different strategies, the strategy provided by the candidate with the latest BinaryVersion will be used. If there is still conflict, this is a user error and coordinated leader election will not operate the Lease until resolved."
        }
      }
    }, 
    "io.k8s.api.resource.v1beta1.ResourcePool": {
      "required": [
        "name", 
        "generation", 
        "resourceSliceCount"
      ], 
      "type": "object", 
      "description": "ResourcePool describes the pool that ResourceSlices belong to.", 
      "properties": {
        "generation": {
          "type": "integer", 
          "description": "Generation tracks the change in a pool over time. Whenever a driver changes something about one or more of the resources in a pool, it must change the generation in all ResourceSlices which are part of that pool. Consumers of ResourceSlices should only consider resources from the pool with the highest generation number. The generation may be reset by drivers, which should be fine for consumers, assuming that all ResourceSlices in a pool are updated to match or deleted.\n\nCombined with ResourceSliceCount, this mechanism enables consumers to detect pools which are comprised of multiple ResourceSlices and are in an incomplete state.", 
          "format": "int64"
        }, 
        "name": {
          "type": "string", 
          "description": "Name is used to identify the pool. For node-local devices, this is often the node name, but this is not required.\n\nIt must not be longer than 253 characters and must consist of one or more DNS sub-domains separated by slashes. This field is immutable."
        }, 
        "resourceSliceCount": {
          "type": "integer", 
          "description": "ResourceSliceCount is the total number of ResourceSlices in the pool at this generation number. Must be greater than zero.\n\nConsumers can use this to check whether they have seen all ResourceSlices belonging to the same pool.", 
          "format": "int64"
        }
      }
    }, 
    "io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta": {
      "type": "object", 
      "description": "ListMeta describes metadata that synthetic resources must have, including lists and various status objects. A resource may have only one of {ObjectMeta, ListMeta}.", 
      "properties": {
        "continue": {
          "type": "string", 
          "description": "continue may be set if the user set a limit on the number of items returned, and indicates that the server has more data available. The value is opaque and may be used to issue another request to the endpoint that served this list to retrieve the next set of available objects. Continuing a consistent list may not be possible if the server configuration has changed or more than a few minutes have passed. The resourceVersion field returned when using this continue value will be identical to the value in the first response, unless you have received this token from an error message."
        }, 
        "remainingItemCount": {
          "type": "integer", 
          "description": "remainingItemCount is the number of subsequent items in the list which are not included in this list response. If the list request contained label or field selectors, then the number of remaining items is unknown and the field will be left unset and omitted during serialization. If the list is complete (either because it is not chunking or because this is the last chunk), then there are no more remaining items and this field will be left unset and omitted during serialization. Servers older than v1.15 do not set this field. The intended use of the remainingItemCount is *estimating* the size of a collection. Clients should not rely on the remainingItemCount to be set or to be exact.", 
          "format": "int64"
        }, 
        "selfLink": {
          "type": "string", 
          "description": "Deprecated: selfLink is a legacy read-only field that is no longer populated by the system."
        }, 
        "resourceVersion": {
          "type": "string", 
          "description": "String that identifies the server's internal version of this object that can be used by clients to determine when objects have changed. Value must be treated as opaque by clients and passed unmodified back to the server. Populated by the system. Read-only. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency"
        }
      }
    }, 
    "io.k8s.api.events.v1.Event": {
      "type": "object", 
      "required": [
        "eventTime"
      ], 
      "x-kubernetes-group-version-kind": [
        {
          "kind": "Event", 
          "version": "v1", 
          "group": "events.k8s.io"
        }
      ], 
      "description": "Event is a report of an event somewhere in the cluster. It generally denotes some state change in the system. Events have a limited retention time and triggers and messages may evolve with time.  Event consumers should not rely on the timing of an event with a given Reason reflecting a consistent underlying trigger, or the continued existence of events with that Reason.  Events should be treated as informative, best-effort, supplemental data.", 
      "properties": {
        "deprecatedFirstTimestamp": {
          "description": "deprecatedFirstTimestamp is the deprecated field assuring backward compatibility with core.v1 Event type.", 
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
        }, 
        "reportingController": {
          "type": "string", 
          "description": "reportingController is the name of the controller that emitted this Event, e.g. `kubernetes.io/kubelet`. This field cannot be empty for new Events."
        }, 
        "series": {
          "description": "series is data about the Event series this event represents or nil if it's a singleton Event.", 
          "$ref": "#/definitions/io.k8s.api.events.v1.EventSeries"
        }, 
        "deprecatedSource": {
          "description": "deprecatedSource is the deprecated field assuring backward compatibility with core.v1 Event type.", 
          "$ref": "#/definitions/io.k8s.api.core.v1.EventSource"
        }, 
        "regarding": {
          "description": "regarding contains the object this Event is about. In most cases it's an Object reporting controller implements, e.g. ReplicaSetController implements ReplicaSets and this event is emitted because it acts on some changes in a ReplicaSet object.", 
          "$ref": "#/definitions/io.k8s.api.core.v1.ObjectReference"
        }, 
        "related": {
          "description": "related is the optional secondary object for more complex actions. E.g. when regarding object triggers a creation or deletion of related object.", 
          "$ref": "#/definitions/io.k8s.api.core.v1.ObjectReference"
        }, 
        "deprecatedCount": {
          "type": "integer", 
          "description": "deprecatedCount is the deprecated field assuring backward compatibility with core.v1 Event type.", 
          "format": "int32"
        }, 
        "reason": {
          "type": "string", 
          "description": "reason is why the action was taken. It is human-readable. This field cannot be empty for new Events and it can have at most 128 characters."
        }, 
        "kind": {
          "enum": [
            "Event"
          ], 
          "type": "string", 
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
        }, 
        "eventTime": {
          "description": "eventTime is the time when this Event was first observed. It is required.", 
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.MicroTime"
        }, 
        "reportingInstance": {
          "type": "string", 
          "description": "reportingInstance is the ID of the controller instance, e.g. `kubelet-xyzf`. This field cannot be empty for new Events and it can have at most 128 characters."
        }, 
        "apiVersion": {
          "type": "string", 
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources"
        }, 
        "note": {
          "type": "string", 
          "description": "note is a human-readable description of the status of this operation. Maximal length of the note is 1kB, but libraries should be prepared to handle values up to 64kB."
        }, 
        "action": {
          "type": "string", 
          "description": "action is what action was taken/failed regarding to the regarding object. It is machine-readable. This field cannot be empty for new Events and it can have at most 128 characters."
        }, 
        "type": {
          "type": "string", 
          "description": "type is the type of this event (Normal, Warning), new types could be added in the future. It is machine-readable. This field cannot be empty for new Events."
        }, 
        "deprecatedLastTimestamp": {
          "description": "deprecatedLastTimestamp is the deprecated field assuring backward compatibility with core.v1 Event type.", 
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
        }, 
        "metadata": {
          "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata", 
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        }
      }
    }, 
    "io.k8s.api.certificates.v1.CertificateSigningRequest": {
      "type": "object", 
      "required": [
        "spec"
      ], 
      "x-kubernetes-group-version-kind": [
        {
          "kind": "CertificateSigningRequest", 
          "version": "v1", 
          "group": "certificates.k8s.io"
        }
      ], 
      "description": "CertificateSigningRequest objects provide a mechanism to obtain x509 certificates by submitting a certificate signing request, and having it asynchronously approved and issued.\n\nKubelets use this API to obtain:\n 1. client certificates to authenticate to kube-apiserver (with the \"kubernetes.io/kube-apiserver-client-kubelet\" signerName).\n 2. serving certificates for TLS endpoints kube-apiserver can connect to securely (with the \"kubernetes.io/kubelet-serving\" signerName).\n\nThis API can be used to request client certificates to authenticate to kube-apiserver (with the \"kubernetes.io/kube-apiserver-client\" signerName), or to obtain certificates from custom non-Kubernetes signers.", 
      "properties": {
        "status": {
          "description": "status contains information about whether the request is approved or denied, and the certificate issued by the signer, or the failure condition indicating signer failure.", 
          "$ref": "#/definitions/io.k8s.api.certificates.v1.CertificateSigningRequestStatus"
        }, 
        "kind": {
          "enum": [
            "CertificateSigningRequest"
          ], 
          "type": "string", 
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
        }, 
        "spec": {
          "description": "spec contains the certificate request, and is immutable after creation. Only the request, signerName, expirationSeconds, and usages fields can be set on creation. Other fields are derived by Kubernetes and cannot be modified by users.", 
          "$ref": "#/definitions/io.k8s.api.certificates.v1.CertificateSigningRequestSpec"
        }, 
        "apiVersion": {
          "type": "string", 
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources"
        }, 
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        }
      }
    }, 
    "io.k8s.api.certificates.v1beta1.ClusterTrustBundleList": {
      "type": "object", 
      "required": [
        "items"
      ], 
      "x-kubernetes-group-version-kind": [
        {
          "kind": "ClusterTrustBundleList", 
          "version": "v1beta1", 
          "group": "certificates.k8s.io"
        }
      ], 
      "description": "ClusterTrustBundleList is a collection of ClusterTrustBundle objects", 
      "properties": {
        "items": {
          "items": {
            "$ref": "#/definitions/io.k8s.api.certificates.v1beta1.ClusterTrustBundle"
          }, 
          "type": "array", 
          "description": "items is a collection of ClusterTrustBundle objects"
        }, 
        "kind": {
          "enum": [
            "ClusterTrustBundleList"
          ], 
          "type": "string", 
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
        }, 
        "apiVersion": {
          "type": "string", 
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources"
        }, 
        "metadata": {
          "description": "metadata contains the list metadata.", 
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      }
    }, 
    "io.k8s.api.networking.v1beta1.ServiceCIDRStatus": {
      "type": "object", 
      "description": "ServiceCIDRStatus describes the current state of the ServiceCIDR.", 
      "properties": {
        "conditions": {
          "description": "conditions holds an array of metav1.Condition that describe the state of the ServiceCIDR. Current service state", 
          "x-kubernetes-list-map-keys": [
            "type"
          ], 
          "x-kubernetes-patch-merge-key": "type", 
          "items": {
            "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Condition"
          }, 
          "type": "array", 
          "x-kubernetes-list-type": "map", 
          "x-kubernetes-patch-strategy": "merge"
        }
      }
    }, 
    "io.k8s.api.flowcontrol.v1.GroupSubject": {
      "required": [
        "name"
      ], 
      "type": "object", 
      "description": "GroupSubject holds detailed information for group-kind subject.", 
      "properties": {
        "name": {
          "type": "string", 
          "description": "name is the user group that matches, or \"*\" to match all user groups. See https://github.com/kubernetes/apiserver/blob/master/pkg/authentication/user/user.go for some well-known group names. Required."
        }
      }
    }, 
    "io.k8s.api.policy.v1.PodDisruptionBudget": {
      "type": "object", 
      "x-kubernetes-group-version-kind": [
        {
          "kind": "PodDisruptionBudget", 
          "version": "v1", 
          "group": "policy"
        }
      ], 
      "description": "PodDisruptionBudget is an object to define the max disruption that can be caused to a collection of pods", 
      "properties": {
        "status": {
          "description": "Most recently observed status of the PodDisruptionBudget.", 
          "$ref": "#/definitions/io.k8s.api.policy.v1.PodDisruptionBudgetStatus"
        }, 
        "kind": {
          "enum": [
            "PodDisruptionBudget"
          ], 
          "type": "string", 
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
        }, 
        "spec": {
          "description": "Specification of the desired behavior of the PodDisruptionBudget.", 
          "$ref": "#/definitions/io.k8s.api.policy.v1.PodDisruptionBudgetSpec"
        }, 
        "apiVersion": {
          "type": "string", 
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources"
        }, 
        "metadata": {
          "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata", 
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        }
      }
    }, 
    "io.k8s.api.storage.v1.VolumeNodeResources": {
      "type": "object", 
      "description": "VolumeNodeResources is a set of resource limits for scheduling of volumes.", 
      "properties": {
        "count": {
          "type": "integer", 
          "description": "count indicates the maximum number of unique volumes managed by the CSI driver that can be used on a node. A volume that is both attached and mounted on a node is considered to be used once, not twice. The same rule applies for a unique volume that is shared among multiple pods on the same node. If this field is not specified, then the supported number of volumes on this node is unbounded.", 
          "format": "int32"
        }
      }
    }, 
    "io.k8s.kube-aggregator.pkg.apis.apiregistration.v1.APIServiceStatus": {
      "type": "object", 
      "description": "APIServiceStatus contains derived information about an API server", 
      "properties": {
        "conditions": {
          "description": "Current service state of apiService.", 
          "x-kubernetes-list-map-keys": [
            "type"
          ], 
          "x-kubernetes-patch-merge-key": "type", 
          "items": {
            "$ref": "#/definitions/io.k8s.kube-aggregator.pkg.apis.apiregistration.v1.APIServiceCondition"
          }, 
          "type": "array", 
          "x-kubernetes-list-type": "map", 
          "x-kubernetes-patch-strategy": "merge"
        }
      }
    }, 
    "io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.ExternalDocumentation": {
      "type": "object", 
      "description": "ExternalDocumentation allows referencing an external resource for extended documentation.", 
      "properties": {
        "url": {
          "type": "string"
        }, 
        "description": {
          "type": "string"
        }
      }
    }, 
    "io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.JSONSchemaPropsOrArray": {
      "description": "JSONSchemaPropsOrArray represents a value that can either be a JSONSchemaProps or an array of JSONSchemaProps. Mainly here for serialization purposes."
    }, 
    "io.k8s.apimachinery.pkg.apis.meta.v1.Status": {
      "type": "object", 
      "x-kubernetes-group-version-kind": [
        {
          "kind": "Status", 
          "version": "v1", 
          "group": ""
        }
      ], 
      "description": "Status is a return value for calls that don't return other objects.", 
      "properties": {
        "status": {
          "type": "string", 
          "description": "Status of the operation. One of: \"Success\" or \"Failure\". More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status"
        }, 
        "kind": {
          "enum": [
            "Status"
          ], 
          "type": "string", 
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
        }, 
        "code": {
          "type": "integer", 
          "description": "Suggested HTTP return code for this status, 0 if not set.", 
          "format": "int32"
        }, 
        "apiVersion": {
          "type": "string", 
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources"
        }, 
        "reason": {
          "type": "string", 
          "description": "A machine-readable description of why this operation is in the \"Failure\" status. If this value is empty there is no information available. A Reason clarifies an HTTP status code but does not override it."
        }, 
        "details": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.StatusDetails", 
          "description": "Extended data associated with the reason.  Each reason may define its own extended details. This field is optional and the data returned is not guaranteed to conform to any schema except that defined by the reason type.", 
          "x-kubernetes-list-type": "atomic"
        }, 
        "message": {
          "type": "string", 
          "description": "A human-readable description of the status of this operation."
        }, 
        "metadata": {
          "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds", 
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      }
    }, 
    "io.k8s.api.resource.v1.CapacityRequirements": {
      "type": "object", 
      "description": "CapacityRequirements defines the capacity requirements for a specific device request.", 
      "properties": {
        "requests": {
          "additionalProperties": {
            "$ref": "#/definitions/io.k8s.apimachinery.pkg.api.resource.Quantity"
          }, 
          "type": "object", 
          "description": "Requests represent individual device resource requests for distinct resources, all of which must be provided by the device.\n\nThis value is used as an additional filtering condition against the available capacity on the device. This is semantically equivalent to a CEL selector with `device.capacity[<domain>].<name>.compareTo(quantity(<request quantity>)) >= 0`. For example, device.capacity['test-driver.cdi.k8s.io'].counters.compareTo(quantity('2')) >= 0.\n\nWhen a requestPolicy is defined, the requested amount is adjusted upward to the nearest valid value based on the policy. If the requested amount cannot be adjusted to a valid value\u2014because it exceeds what the requestPolicy allows\u2014 the device is considered ineligible for allocation.\n\nFor any capacity that is not explicitly requested: - If no requestPolicy is set, the default consumed capacity is equal to the full device capacity\n  (i.e., the whole device is claimed).\n- If a requestPolicy is set, the default consumed capacity is determined according to that policy.\n\nIf the device allows multiple allocation, the aggregated amount across all requests must not exceed the capacity value. The consumed capacity, which may be adjusted based on the requestPolicy if defined, is recorded in the resource claim\u2019s status.devices[*].consumedCapacity field."
        }
      }
    }, 
    "io.k8s.api.authentication.v1.UserInfo": {
      "type": "object", 
      "description": "UserInfo holds the information about the user needed to implement the user.Info interface.", 
      "properties": {
        "username": {
          "type": "string", 
          "description": "The name that uniquely identifies this user among all active users."
        }, 
        "uid": {
          "type": "string", 
          "description": "A unique value that identifies this user across time. If this user is deleted and another user by the same name is added, they will have different UIDs."
        }, 
        "groups": {
          "items": {
            "type": "string"
          }, 
          "type": "array", 
          "description": "The names of groups this user is a part of.", 
          "x-kubernetes-list-type": "atomic"
        }, 
        "extra": {
          "additionalProperties": {
            "items": {
              "type": "string"
            }, 
            "type": "array"
          }, 
          "type": "object", 
          "description": "Any additional information provided by the authenticator."
        }
      }
    }, 
    "io.k8s.api.core.v1.Capabilities": {
      "type": "object", 
      "description": "Adds and removes POSIX capabilities from running containers.", 
      "properties": {
        "add": {
          "items": {
            "type": "string"
          }, 
          "type": "array", 
          "description": "Added capabilities", 
          "x-kubernetes-list-type": "atomic"
        }, 
        "drop": {
          "items": {
            "type": "string"
          }, 
          "type": "array", 
          "description": "Removed capabilities", 
          "x-kubernetes-list-type": "atomic"
        }
      }
    }, 
    "io.k8s.api.admissionregistration.v1beta1.MutatingAdmissionPolicyBindingSpec": {
      "type": "object", 
      "description": "MutatingAdmissionPolicyBindingSpec is the specification of the MutatingAdmissionPolicyBinding.", 
      "properties": {
        "policyName": {
          "type": "string", 
          "description": "policyName references a MutatingAdmissionPolicy name which the MutatingAdmissionPolicyBinding binds to. If the referenced resource does not exist, this binding is considered invalid and will be ignored Required."
        }, 
        "paramRef": {
          "description": "paramRef specifies the parameter resource used to configure the admission control policy. It should point to a resource of the type specified in spec.ParamKind of the bound MutatingAdmissionPolicy. If the policy specifies a ParamKind and the resource referred to by ParamRef does not exist, this binding is considered mis-configured and the FailurePolicy of the MutatingAdmissionPolicy applied. If the policy does not specify a ParamKind then this field is ignored, and the rules are evaluated without a param.", 
          "$ref": "#/definitions/io.k8s.api.admissionregistration.v1beta1.ParamRef"
        }, 
        "matchResources": {
          "description": "matchResources limits what resources match this binding and may be mutated by it. Note that if matchResources matches a resource, the resource must also match a policy's matchConstraints and matchConditions before the resource may be mutated. When matchResources is unset, it does not constrain resource matching, and only the policy's matchConstraints and matchConditions must match for the resource to be mutated. Additionally, matchResources.resourceRules are optional and do not constraint matching when unset. Note that this is differs from MutatingAdmissionPolicy matchConstraints, where resourceRules are required. The CREATE, UPDATE and CONNECT operations are allowed.  The DELETE operation may not be matched. '*' matches CREATE, UPDATE and CONNECT.", 
          "$ref": "#/definitions/io.k8s.api.admissionregistration.v1beta1.MatchResources"
        }
      }
    }, 
    "io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.CustomResourceSubresourceStatus": {
      "type": "object", 
      "description": "CustomResourceSubresourceStatus defines how to serve the status subresource for CustomResources. Status is represented by the `.status` JSON path inside of a CustomResource. When set, * exposes a /status subresource for the custom resource * PUT requests to the /status subresource take a custom resource object, and ignore changes to anything except the status stanza * PUT/POST/PATCH requests to the custom resource ignore changes to the status stanza"
    }, 
    "io.k8s.api.core.v1.ResourceQuotaStatus": {
      "type": "object", 
      "description": "ResourceQuotaStatus defines the enforced hard limits and observed use.", 
      "properties": {
        "hard": {
          "additionalProperties": {
            "$ref": "#/definitions/io.k8s.apimachinery.pkg.api.resource.Quantity"
          }, 
          "type": "object", 
          "description": "Hard is the set of enforced hard limits for each named resource. More info: https://kubernetes.io/docs/concepts/policy/resource-quotas/"
        }, 
        "used": {
          "additionalProperties": {
            "$ref": "#/definitions/io.k8s.apimachinery.pkg.api.resource.Quantity"
          }, 
          "type": "object", 
          "description": "Used is the current observed total usage of the resource in the namespace."
        }
      }
    }, 
    "io.k8s.api.resource.v1beta1.DeviceRequest": {
      "required": [
        "name"
      ], 
      "type": "object", 
      "description": "DeviceRequest is a request for devices required for a claim. This is typically a request for a single resource like a device, but can also ask for several identical devices.", 
      "properties": {
        "count": {
          "type": "integer", 
          "description": "Count is used only when the count mode is \"ExactCount\". Must be greater than zero. If AllocationMode is ExactCount and this field is not specified, the default is one.\n\nThis field can only be set when deviceClassName is set and no subrequests are specified in the firstAvailable list.", 
          "format": "int64"
        }, 
        "capacity": {
          "description": "Capacity define resource requirements against each capacity.\n\nIf this field is unset and the device supports multiple allocations, the default value will be applied to each capacity according to requestPolicy. For the capacity that has no requestPolicy, default is the full capacity value.\n\nApplies to each device allocation. If Count > 1, the request fails if there aren't enough devices that meet the requirements. If AllocationMode is set to All, the request fails if there are devices that otherwise match the request, and have this capacity, with a value >= the requested amount, but which cannot be allocated to this request.", 
          "$ref": "#/definitions/io.k8s.api.resource.v1beta1.CapacityRequirements"
        }, 
        "name": {
          "type": "string", 
          "description": "Name can be used to reference this request in a pod.spec.containers[].resources.claims entry and in a constraint of the claim.\n\nMust be a DNS label and unique among all DeviceRequests in a ResourceClaim."
        }, 
        "allocationMode": {
          "type": "string", 
          "description": "AllocationMode and its related fields define how devices are allocated to satisfy this request. Supported values are:\n\n- ExactCount: This request is for a specific number of devices.\n  This is the default. The exact number is provided in the\n  count field.\n\n- All: This request is for all of the matching devices in a pool.\n  At least one device must exist on the node for the allocation to succeed.\n  Allocation will fail if some devices are already allocated,\n  unless adminAccess is requested.\n\nIf AllocationMode is not specified, the default mode is ExactCount. If the mode is ExactCount and count is not specified, the default count is one. Any other requests must specify this field.\n\nThis field can only be set when deviceClassName is set and no subrequests are specified in the firstAvailable list.\n\nMore modes may get added in the future. Clients must refuse to handle requests with unknown modes."
        }, 
        "selectors": {
          "items": {
            "$ref": "#/definitions/io.k8s.api.resource.v1beta1.DeviceSelector"
          }, 
          "type": "array", 
          "description": "Selectors define criteria which must be satisfied by a specific device in order for that device to be considered for this request. All selectors must be satisfied for a device to be considered.\n\nThis field can only be set when deviceClassName is set and no subrequests are specified in the firstAvailable list.", 
          "x-kubernetes-list-type": "atomic"
        }, 
        "firstAvailable": {
          "items": {
            "$ref": "#/definitions/io.k8s.api.resource.v1beta1.DeviceSubRequest"
          }, 
          "type": "array", 
          "description": "FirstAvailable contains subrequests, of which exactly one will be satisfied by the scheduler to satisfy this request. It tries to satisfy them in the order in which they are listed here. So if there are two entries in the list, the scheduler will only check the second one if it determines that the first one cannot be used.\n\nThis field may only be set in the entries of DeviceClaim.Requests.\n\nDRA does not yet implement scoring, so the scheduler will select the first set of devices that satisfies all the requests in the claim. And if the requirements can be satisfied on more than one node, other scheduling features will determine which node is chosen. This means that the set of devices allocated to a claim might not be the optimal set available to the cluster. Scoring will be implemented later.", 
          "x-kubernetes-list-type": "atomic"
        }, 
        "deviceClassName": {
          "type": "string", 
          "description": "DeviceClassName references a specific DeviceClass, which can define additional configuration and selectors to be inherited by this request.\n\nA class is required if no subrequests are specified in the firstAvailable list and no class can be set if subrequests are specified in the firstAvailable list. Which classes are available depends on the cluster.\n\nAdministrators may use this to restrict which devices may get requested by only installing classes with selectors for permitted devices. If users are free to request anything without restrictions, then administrators can create an empty DeviceClass for users to reference."
        }, 
        "tolerations": {
          "items": {
            "$ref": "#/definitions/io.k8s.api.resource.v1beta1.DeviceToleration"
          }, 
          "type": "array", 
          "description": "If specified, the request's tolerations.\n\nTolerations for NoSchedule are required to allocate a device which has a taint with that effect. The same applies to NoExecute.\n\nIn addition, should any of the allocated devices get tainted with NoExecute after allocation and that effect is not tolerated, then all pods consuming the ResourceClaim get deleted to evict them. The scheduler will not let new pods reserve the claim while it has these tainted devices. Once all pods are evicted, the claim will get deallocated.\n\nThe maximum number of tolerations is 16.\n\nThis field can only be set when deviceClassName is set and no subrequests are specified in the firstAvailable list.\n\nThis is an alpha field and requires enabling the DRADeviceTaints feature gate.", 
          "x-kubernetes-list-type": "atomic"
        }, 
        "adminAccess": {
          "type": "boolean", 
          "description": "AdminAccess indicates that this is a claim for administrative access to the device(s). Claims with AdminAccess are expected to be used for monitoring or other management services for a device.  They ignore all ordinary claims to the device with respect to access modes and any resource allocations.\n\nThis field can only be set when deviceClassName is set and no subrequests are specified in the firstAvailable list.\n\nThis is an alpha field and requires enabling the DRAAdminAccess feature gate. Admin access is disabled if this field is unset or set to false, otherwise it is enabled."
        }
      }
    }, 
    "io.k8s.api.core.v1.HostIP": {
      "required": [
        "ip"
      ], 
      "type": "object", 
      "description": "HostIP represents a single IP address allocated to the host.", 
      "properties": {
        "ip": {
          "type": "string", 
          "description": "IP is the IP address assigned to the host"
        }
      }
    }, 
    "io.k8s.api.autoscaling.v2.MetricTarget": {
      "required": [
        "type"
      ], 
      "type": "object", 
      "description": "MetricTarget defines the target value, average value, or average utilization of a specific metric", 
      "properties": {
        "averageValue": {
          "description": "averageValue is the target value of the average of the metric across all relevant pods (as a quantity)", 
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.api.resource.Quantity"
        }, 
        "averageUtilization": {
          "type": "integer", 
          "description": "averageUtilization is the target value of the average of the resource metric across all relevant pods, represented as a percentage of the requested value of the resource for the pods. Currently only valid for Resource metric source type", 
          "format": "int32"
        }, 
        "type": {
          "type": "string", 
          "description": "type represents whether the metric type is Utilization, Value, or AverageValue"
        }, 
        "value": {
          "description": "value is the target value of the metric (as a quantity).", 
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.api.resource.Quantity"
        }
      }
    }, 
    "io.k8s.api.rbac.v1.ClusterRoleList": {
      "type": "object", 
      "required": [
        "items"
      ], 
      "x-kubernetes-group-version-kind": [
        {
          "kind": "ClusterRoleList", 
          "version": "v1", 
          "group": "rbac.authorization.k8s.io"
        }
      ], 
      "description": "ClusterRoleList is a collection of ClusterRoles", 
      "properties": {
        "items": {
          "items": {
            "$ref": "#/definitions/io.k8s.api.rbac.v1.ClusterRole"
          }, 
          "type": "array", 
          "description": "Items is a list of ClusterRoles"
        }, 
        "kind": {
          "enum": [
            "ClusterRoleList"
          ], 
          "type": "string", 
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
        }, 
        "apiVersion": {
          "type": "string", 
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources"
        }, 
        "metadata": {
          "description": "Standard object's metadata.", 
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      }
    }, 
    "io.k8s.api.admissionregistration.v1alpha1.Variable": {
      "required": [
        "name", 
        "expression"
      ], 
      "type": "object", 
      "description": "Variable is the definition of a variable that is used for composition.", 
      "properties": {
        "expression": {
          "type": "string", 
          "description": "Expression is the expression that will be evaluated as the value of the variable. The CEL expression has access to the same identifiers as the CEL expressions in Validation."
        }, 
        "name": {
          "type": "string", 
          "description": "Name is the name of the variable. The name must be a valid CEL identifier and unique among all variables. The variable can be accessed in other expressions through `variables` For example, if name is \"foo\", the variable will be available as `variables.foo`"
        }
      }
    }, 
    "io.k8s.api.core.v1.ServiceAccountList": {
      "type": "object", 
      "required": [
        "items"
      ], 
      "x-kubernetes-group-version-kind": [
        {
          "kind": "ServiceAccountList", 
          "version": "v1", 
          "group": ""
        }
      ], 
      "description": "ServiceAccountList is a list of ServiceAccount objects", 
      "properties": {
        "items": {
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.ServiceAccount"
          }, 
          "type": "array", 
          "description": "List of ServiceAccounts. More info: https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/"
        }, 
        "kind": {
          "enum": [
            "ServiceAccountList"
          ], 
          "type": "string", 
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
        }, 
        "apiVersion": {
          "type": "string", 
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources"
        }, 
        "metadata": {
          "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds", 
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      }
    }, 
    "io.k8s.api.autoscaling.v2.HorizontalPodAutoscalerBehavior": {
      "type": "object", 
      "description": "HorizontalPodAutoscalerBehavior configures the scaling behavior of the target in both Up and Down directions (scaleUp and scaleDown fields respectively).", 
      "properties": {
        "scaleUp": {
          "description": "scaleUp is scaling policy for scaling Up. If not set, the default value is the higher of:\n  * increase no more than 4 pods per 60 seconds\n  * double the number of pods per 60 seconds\nNo stabilization is used.", 
          "$ref": "#/definitions/io.k8s.api.autoscaling.v2.HPAScalingRules"
        }, 
        "scaleDown": {
          "description": "scaleDown is scaling policy for scaling Down. If not set, the default value is to allow to scale down to minReplicas pods, with a 300 second stabilization window (i.e., the highest recommendation for the last 300sec is used).", 
          "$ref": "#/definitions/io.k8s.api.autoscaling.v2.HPAScalingRules"
        }
      }
    }, 
    "io.k8s.api.core.v1.PersistentVolumeClaimTemplate": {
      "required": [
        "spec"
      ], 
      "type": "object", 
      "description": "PersistentVolumeClaimTemplate is used to produce PersistentVolumeClaim objects as part of an EphemeralVolumeSource.", 
      "properties": {
        "spec": {
          "description": "The specification for the PersistentVolumeClaim. The entire content is copied unchanged into the PVC that gets created from this template. The same fields as in a PersistentVolumeClaim are also valid here.", 
          "$ref": "#/definitions/io.k8s.api.core.v1.PersistentVolumeClaimSpec"
        }, 
        "metadata": {
          "description": "May contain labels and annotations that will be copied into the PVC when creating it. No other fields are allowed and will be rejected during validation.", 
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        }
      }
    }, 
    "io.k8s.api.core.v1.ReplicationControllerStatus": {
      "required": [
        "replicas"
      ], 
      "type": "object", 
      "description": "ReplicationControllerStatus represents the current status of a replication controller.", 
      "properties": {
        "availableReplicas": {
          "type": "integer", 
          "description": "The number of available replicas (ready for at least minReadySeconds) for this replication controller.", 
          "format": "int32"
        }, 
        "replicas": {
          "type": "integer", 
          "description": "Replicas is the most recently observed number of replicas. More info: https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller#what-is-a-replicationcontroller", 
          "format": "int32"
        }, 
        "observedGeneration": {
          "type": "integer", 
          "description": "ObservedGeneration reflects the generation of the most recently observed replication controller.", 
          "format": "int64"
        }, 
        "readyReplicas": {
          "type": "integer", 
          "description": "The number of ready replicas for this replication controller.", 
          "format": "int32"
        }, 
        "conditions": {
          "description": "Represents the latest available observations of a replication controller's current state.", 
          "x-kubernetes-list-map-keys": [
            "type"
          ], 
          "x-kubernetes-patch-merge-key": "type", 
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.ReplicationControllerCondition"
          }, 
          "type": "array", 
          "x-kubernetes-list-type": "map", 
          "x-kubernetes-patch-strategy": "merge"
        }, 
        "fullyLabeledReplicas": {
          "type": "integer", 
          "description": "The number of pods that have labels matching the labels of the pod template of the replication controller.", 
          "format": "int32"
        }
      }
    }, 
    "io.k8s.api.resource.v1beta1.ResourceSliceSpec": {
      "required": [
        "driver", 
        "pool"
      ], 
      "type": "object", 
      "description": "ResourceSliceSpec contains the information published by the driver in one ResourceSlice.", 
      "properties": {
        "nodeName": {
          "type": "string", 
          "description": "NodeName identifies the node which provides the resources in this pool. A field selector can be used to list only ResourceSlice objects belonging to a certain node.\n\nThis field can be used to limit access from nodes to ResourceSlices with the same node name. It also indicates to autoscalers that adding new nodes of the same type as some old node might also make new resources available.\n\nExactly one of NodeName, NodeSelector, AllNodes, and PerDeviceNodeSelection must be set. This field is immutable."
        }, 
        "sharedCounters": {
          "items": {
            "$ref": "#/definitions/io.k8s.api.resource.v1beta1.CounterSet"
          }, 
          "type": "array", 
          "description": "SharedCounters defines a list of counter sets, each of which has a name and a list of counters available.\n\nThe names of the SharedCounters must be unique in the ResourceSlice.\n\nThe maximum number of SharedCounters is 32.", 
          "x-kubernetes-list-type": "atomic"
        }, 
        "allNodes": {
          "type": "boolean", 
          "description": "AllNodes indicates that all nodes have access to the resources in the pool.\n\nExactly one of NodeName, NodeSelector, AllNodes, and PerDeviceNodeSelection must be set."
        }, 
        "driver": {
          "type": "string", 
          "description": "Driver identifies the DRA driver providing the capacity information. A field selector can be used to list only ResourceSlice objects with a certain driver name.\n\nMust be a DNS subdomain and should end with a DNS domain owned by the vendor of the driver. This field is immutable."
        }, 
        "devices": {
          "items": {
            "$ref": "#/definitions/io.k8s.api.resource.v1beta1.Device"
          }, 
          "type": "array", 
          "description": "Devices lists some or all of the devices in this pool.\n\nMust not have more than 128 entries.", 
          "x-kubernetes-list-type": "atomic"
        }, 
        "nodeSelector": {
          "description": "NodeSelector defines which nodes have access to the resources in the pool, when that pool is not limited to a single node.\n\nMust use exactly one term.\n\nExactly one of NodeName, NodeSelector, AllNodes, and PerDeviceNodeSelection must be set.", 
          "$ref": "#/definitions/io.k8s.api.core.v1.NodeSelector"
        }, 
        "perDeviceNodeSelection": {
          "type": "boolean", 
          "description": "PerDeviceNodeSelection defines whether the access from nodes to resources in the pool is set on the ResourceSlice level or on each device. If it is set to true, every device defined the ResourceSlice must specify this individually.\n\nExactly one of NodeName, NodeSelector, AllNodes, and PerDeviceNodeSelection must be set."
        }, 
        "pool": {
          "description": "Pool describes the pool that this ResourceSlice belongs to.", 
          "$ref": "#/definitions/io.k8s.api.resource.v1beta1.ResourcePool"
        }
      }
    }, 
    "io.k8s.api.core.v1.ClientIPConfig": {
      "type": "object", 
      "description": "ClientIPConfig represents the configurations of Client IP based session affinity.", 
      "properties": {
        "timeoutSeconds": {
          "type": "integer", 
          "description": "timeoutSeconds specifies the seconds of ClientIP type session sticky time. The value must be >0 && <=86400(for 1 day) if ServiceAffinity == \"ClientIP\". Default value is 10800(for 3 hours).", 
          "format": "int32"
        }
      }
    }, 
    "io.k8s.api.autoscaling.v2.HPAScalingPolicy": {
      "required": [
        "type", 
        "value", 
        "periodSeconds"
      ], 
      "type": "object", 
      "description": "HPAScalingPolicy is a single policy which must hold true for a specified past interval.", 
      "properties": {
        "type": {
          "type": "string", 
          "description": "type is used to specify the scaling policy."
        }, 
        "value": {
          "type": "integer", 
          "description": "value contains the amount of change which is permitted by the policy. It must be greater than zero", 
          "format": "int32"
        }, 
        "periodSeconds": {
          "type": "integer", 
          "description": "periodSeconds specifies the window of time for which the policy should hold true. PeriodSeconds must be greater than zero and less than or equal to 1800 (30 min).", 
          "format": "int32"
        }
      }
    }, 
    "io.k8s.api.core.v1.PersistentVolumeClaimCondition": {
      "required": [
        "type", 
        "status"
      ], 
      "type": "object", 
      "description": "PersistentVolumeClaimCondition contains details about state of pvc", 
      "properties": {
        "status": {
          "type": "string", 
          "description": "Status is the status of the condition. Can be True, False, Unknown. More info: https://kubernetes.io/docs/reference/kubernetes-api/config-and-storage-resources/persistent-volume-claim-v1/#:~:text=state%20of%20pvc-,conditions.status,-(string)%2C%20required"
        }, 
        "reason": {
          "type": "string", 
          "description": "reason is a unique, this should be a short, machine understandable string that gives the reason for condition's last transition. If it reports \"Resizing\" that means the underlying persistent volume is being resized."
        }, 
        "lastProbeTime": {
          "description": "lastProbeTime is the time we probed the condition.", 
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
        }, 
        "type": {
          "type": "string", 
          "description": "Type is the type of the condition. More info: https://kubernetes.io/docs/reference/kubernetes-api/config-and-storage-resources/persistent-volume-claim-v1/#:~:text=set%20to%20%27ResizeStarted%27.-,PersistentVolumeClaimCondition,-contains%20details%20about"
        }, 
        "message": {
          "type": "string", 
          "description": "message is the human-readable message indicating details about last transition."
        }, 
        "lastTransitionTime": {
          "description": "lastTransitionTime is the time the condition transitioned from one status to another.", 
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
        }
      }
    }, 
    "io.k8s.api.core.v1.CSIPersistentVolumeSource": {
      "required": [
        "driver", 
        "volumeHandle"
      ], 
      "type": "object", 
      "description": "Represents storage that is managed by an external CSI volume driver", 
      "properties": {
        "controllerExpandSecretRef": {
          "description": "controllerExpandSecretRef is a reference to the secret object containing sensitive information to pass to the CSI driver to complete the CSI ControllerExpandVolume call. This field is optional, and may be empty if no secret is required. If the secret object contains more than one secret, all secrets are passed.", 
          "$ref": "#/definitions/io.k8s.api.core.v1.SecretReference"
        }, 
        "nodeStageSecretRef": {
          "description": "nodeStageSecretRef is a reference to the secret object containing sensitive information to pass to the CSI driver to complete the CSI NodeStageVolume and NodeStageVolume and NodeUnstageVolume calls. This field is optional, and may be empty if no secret is required. If the secret object contains more than one secret, all secrets are passed.", 
          "$ref": "#/definitions/io.k8s.api.core.v1.SecretReference"
        }, 
        "nodeExpandSecretRef": {
          "description": "nodeExpandSecretRef is a reference to the secret object containing sensitive information to pass to the CSI driver to complete the CSI NodeExpandVolume call. This field is optional, may be omitted if no secret is required. If the secret object contains more than one secret, all secrets are passed.", 
          "$ref": "#/definitions/io.k8s.api.core.v1.SecretReference"
        }, 
        "driver": {
          "type": "string", 
          "description": "driver is the name of the driver to use for this volume. Required."
        }, 
        "volumeAttributes": {
          "additionalProperties": {
            "type": "string"
          }, 
          "type": "object", 
          "description": "volumeAttributes of the volume to publish."
        }, 
        "controllerPublishSecretRef": {
          "description": "controllerPublishSecretRef is a reference to the secret object containing sensitive information to pass to the CSI driver to complete the CSI ControllerPublishVolume and ControllerUnpublishVolume calls. This field is optional, and may be empty if no secret is required. If the secret object contains more than one secret, all secrets are passed.", 
          "$ref": "#/definitions/io.k8s.api.core.v1.SecretReference"
        }, 
        "fsType": {
          "type": "string", 
          "description": "fsType to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\"."
        }, 
        "readOnly": {
          "type": "boolean", 
          "description": "readOnly value to pass to ControllerPublishVolumeRequest. Defaults to false (read/write)."
        }, 
        "volumeHandle": {
          "type": "string", 
          "description": "volumeHandle is the unique volume name returned by the CSI volume plugin\u2019s CreateVolume to refer to the volume on all subsequent calls. Required."
        }, 
        "nodePublishSecretRef": {
          "description": "nodePublishSecretRef is a reference to the secret object containing sensitive information to pass to the CSI driver to complete the CSI NodePublishVolume and NodeUnpublishVolume calls. This field is optional, and may be empty if no secret is required. If the secret object contains more than one secret, all secrets are passed.", 
          "$ref": "#/definitions/io.k8s.api.core.v1.SecretReference"
        }
      }
    }, 
    "io.k8s.api.certificates.v1.CertificateSigningRequestStatus": {
      "type": "object", 
      "description": "CertificateSigningRequestStatus contains conditions used to indicate approved/denied/failed status of the request, and the issued certificate.", 
      "properties": {
        "conditions": {
          "items": {
            "$ref": "#/definitions/io.k8s.api.certificates.v1.CertificateSigningRequestCondition"
          }, 
          "type": "array", 
          "description": "conditions applied to the request. Known conditions are \"Approved\", \"Denied\", and \"Failed\".", 
          "x-kubernetes-list-map-keys": [
            "type"
          ], 
          "x-kubernetes-list-type": "map"
        }, 
        "certificate": {
          "format": "byte", 
          "type": "string", 
          "description": "certificate is populated with an issued certificate by the signer after an Approved condition is present. This field is set via the /status subresource. Once populated, this field is immutable.\n\nIf the certificate signing request is denied, a condition of type \"Denied\" is added and this field remains empty. If the signer cannot issue the certificate, a condition of type \"Failed\" is added and this field remains empty.\n\nValidation requirements:\n 1. certificate must contain one or more PEM blocks.\n 2. All PEM blocks must have the \"CERTIFICATE\" label, contain no headers, and the encoded data\n  must be a BER-encoded ASN.1 Certificate structure as described in section 4 of RFC5280.\n 3. Non-PEM content may appear before or after the \"CERTIFICATE\" PEM blocks and is unvalidated,\n  to allow for explanatory text as described in section 5.2 of RFC7468.\n\nIf more than one PEM block is present, and the definition of the requested spec.signerName does not indicate otherwise, the first block is the issued certificate, and subsequent blocks should be treated as intermediate certificates and presented in TLS handshakes.\n\nThe certificate is encoded in PEM format.\n\nWhen serialized as JSON or YAML, the data is additionally base64-encoded, so it consists of:\n\n    base64(\n    -----BEGIN CERTIFICATE-----\n    ...\n    -----END CERTIFICATE-----\n    )", 
          "x-kubernetes-list-type": "atomic"
        }
      }
    }, 
    "io.k8s.api.core.v1.LocalObjectReference": {
      "type": "object", 
      "x-kubernetes-map-type": "atomic", 
      "description": "LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.", 
      "properties": {
        "name": {
          "type": "string", 
          "description": "Name of the referent. This field is effectively required, but due to backwards compatibility is allowed to be empty. Instances of this type with an empty value here are almost certainly wrong. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"
        }
      }
    }, 
    "io.k8s.api.core.v1.RBDVolumeSource": {
      "required": [
        "monitors", 
        "image"
      ], 
      "type": "object", 
      "description": "Represents a Rados Block Device mount that lasts the lifetime of a pod. RBD volumes support ownership management and SELinux relabeling.", 
      "properties": {
        "secretRef": {
          "description": "secretRef is name of the authentication secret for RBDUser. If provided overrides keyring. Default is nil. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it", 
          "$ref": "#/definitions/io.k8s.api.core.v1.LocalObjectReference"
        }, 
        "image": {
          "type": "string", 
          "description": "image is the rados image name. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it"
        }, 
        "keyring": {
          "type": "string", 
          "description": "keyring is the path to key ring for RBDUser. Default is /etc/ceph/keyring. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it"
        }, 
        "fsType": {
          "type": "string", 
          "description": "fsType is the filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#rbd"
        }, 
        "readOnly": {
          "type": "boolean", 
          "description": "readOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it"
        }, 
        "user": {
          "type": "string", 
          "description": "user is the rados user name. Default is admin. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it"
        }, 
        "monitors": {
          "items": {
            "type": "string"
          }, 
          "type": "array", 
          "description": "monitors is a collection of Ceph monitors. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it", 
          "x-kubernetes-list-type": "atomic"
        }, 
        "pool": {
          "type": "string", 
          "description": "pool is the rados pool name. Default is rbd. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it"
        }
      }
    }, 
    "io.k8s.api.core.v1.WeightedPodAffinityTerm": {
      "required": [
        "weight", 
        "podAffinityTerm"
      ], 
      "type": "object", 
      "description": "The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)", 
      "properties": {
        "podAffinityTerm": {
          "description": "Required. A pod affinity term, associated with the corresponding weight.", 
          "$ref": "#/definitions/io.k8s.api.core.v1.PodAffinityTerm"
        }, 
        "weight": {
          "type": "integer", 
          "description": "weight associated with matching the corresponding podAffinityTerm, in the range 1-100.", 
          "format": "int32"
        }
      }
    }, 
    "io.k8s.api.core.v1.PodReadinessGate": {
      "required": [
        "conditionType"
      ], 
      "type": "object", 
      "description": "PodReadinessGate contains the reference to a pod condition", 
      "properties": {
        "conditionType": {
          "type": "string", 
          "description": "ConditionType refers to a condition in the pod's condition list with matching type."
        }
      }
    }, 
    "io.k8s.api.core.v1.NodeAddress": {
      "required": [
        "type", 
        "address"
      ], 
      "type": "object", 
      "description": "NodeAddress contains information for the node's address.", 
      "properties": {
        "type": {
          "type": "string", 
          "description": "Node address type, one of Hostname, ExternalIP or InternalIP."
        }, 
        "address": {
          "type": "string", 
          "description": "The node address."
        }
      }
    }, 
    "io.k8s.api.apps.v1.ReplicaSetStatus": {
      "required": [
        "replicas"
      ], 
      "type": "object", 
      "description": "ReplicaSetStatus represents the current status of a ReplicaSet.", 
      "properties": {
        "availableReplicas": {
          "type": "integer", 
          "description": "The number of available non-terminating pods (ready for at least minReadySeconds) for this replica set.", 
          "format": "int32"
        }, 
        "terminatingReplicas": {
          "type": "integer", 
          "description": "The number of terminating pods for this replica set. Terminating pods have a non-null .metadata.deletionTimestamp and have not yet reached the Failed or Succeeded .status.phase.\n\nThis is an alpha field. Enable DeploymentReplicaSetTerminatingReplicas to be able to use this field.", 
          "format": "int32"
        }, 
        "replicas": {
          "type": "integer", 
          "description": "Replicas is the most recently observed number of non-terminating pods. More info: https://kubernetes.io/docs/concepts/workloads/controllers/replicaset", 
          "format": "int32"
        }, 
        "observedGeneration": {
          "type": "integer", 
          "description": "ObservedGeneration reflects the generation of the most recently observed ReplicaSet.", 
          "format": "int64"
        }, 
        "readyReplicas": {
          "type": "integer", 
          "description": "The number of non-terminating pods targeted by this ReplicaSet with a Ready Condition.", 
          "format": "int32"
        }, 
        "conditions": {
          "description": "Represents the latest available observations of a replica set's current state.", 
          "x-kubernetes-list-map-keys": [
            "type"
          ], 
          "x-kubernetes-patch-merge-key": "type", 
          "items": {
            "$ref": "#/definitions/io.k8s.api.apps.v1.ReplicaSetCondition"
          }, 
          "type": "array", 
          "x-kubernetes-list-type": "map", 
          "x-kubernetes-patch-strategy": "merge"
        }, 
        "fullyLabeledReplicas": {
          "type": "integer", 
          "description": "The number of non-terminating pods that have labels matching the labels of the pod template of the replicaset.", 
          "format": "int32"
        }
      }
    }, 
    "io.k8s.api.core.v1.ConfigMapList": {
      "type": "object", 
      "required": [
        "items"
      ], 
      "x-kubernetes-group-version-kind": [
        {
          "kind": "ConfigMapList", 
          "version": "v1", 
          "group": ""
        }
      ], 
      "description": "ConfigMapList is a resource containing a list of ConfigMap objects.", 
      "properties": {
        "items": {
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.ConfigMap"
          }, 
          "type": "array", 
          "description": "Items is the list of ConfigMaps."
        }, 
        "kind": {
          "enum": [
            "ConfigMapList"
          ], 
          "type": "string", 
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
        }, 
        "apiVersion": {
          "type": "string", 
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources"
        }, 
        "metadata": {
          "description": "More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata", 
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      }
    }, 
    "io.k8s.api.apps.v1.DeploymentStatus": {
      "type": "object", 
      "description": "DeploymentStatus is the most recently observed status of the Deployment.", 
      "properties": {
        "collisionCount": {
          "type": "integer", 
          "description": "Count of hash collisions for the Deployment. The Deployment controller uses this field as a collision avoidance mechanism when it needs to create the name for the newest ReplicaSet.", 
          "format": "int32"
        }, 
        "replicas": {
          "type": "integer", 
          "description": "Total number of non-terminating pods targeted by this deployment (their labels match the selector).", 
          "format": "int32"
        }, 
        "observedGeneration": {
          "type": "integer", 
          "description": "The generation observed by the deployment controller.", 
          "format": "int64"
        }, 
        "updatedReplicas": {
          "type": "integer", 
          "description": "Total number of non-terminating pods targeted by this deployment that have the desired template spec.", 
          "format": "int32"
        }, 
        "availableReplicas": {
          "type": "integer", 
          "description": "Total number of available non-terminating pods (ready for at least minReadySeconds) targeted by this deployment.", 
          "format": "int32"
        }, 
        "terminatingReplicas": {
          "type": "integer", 
          "description": "Total number of terminating pods targeted by this deployment. Terminating pods have a non-null .metadata.deletionTimestamp and have not yet reached the Failed or Succeeded .status.phase.\n\nThis is an alpha field. Enable DeploymentReplicaSetTerminatingReplicas to be able to use this field.", 
          "format": "int32"
        }, 
        "unavailableReplicas": {
          "type": "integer", 
          "description": "Total number of unavailable pods targeted by this deployment. This is the total number of pods that are still required for the deployment to have 100% available capacity. They may either be pods that are running but not yet available or pods that still have not been created.", 
          "format": "int32"
        }, 
        "readyReplicas": {
          "type": "integer", 
          "description": "Total number of non-terminating pods targeted by this Deployment with a Ready Condition.", 
          "format": "int32"
        }, 
        "conditions": {
          "description": "Represents the latest available observations of a deployment's current state.", 
          "x-kubernetes-list-map-keys": [
            "type"
          ], 
          "x-kubernetes-patch-merge-key": "type", 
          "items": {
            "$ref": "#/definitions/io.k8s.api.apps.v1.DeploymentCondition"
          }, 
          "type": "array", 
          "x-kubernetes-list-type": "map", 
          "x-kubernetes-patch-strategy": "merge"
        }
      }
    }, 
    "io.k8s.api.core.v1.PersistentVolumeClaimStatus": {
      "type": "object", 
      "description": "PersistentVolumeClaimStatus is the current status of a persistent volume claim.", 
      "properties": {
        "allocatedResourceStatuses": {
          "additionalProperties": {
            "type": "string"
          }, 
          "type": "object", 
          "x-kubernetes-map-type": "granular", 
          "description": "allocatedResourceStatuses stores status of resource being resized for the given PVC. Key names follow standard Kubernetes label syntax. Valid values are either:\n\t* Un-prefixed keys:\n\t\t- storage - the capacity of the volume.\n\t* Custom resources must use implementation-defined prefixed names such as \"example.com/my-custom-resource\"\nApart from above values - keys that are unprefixed or have kubernetes.io prefix are considered reserved and hence may not be used.\n\nClaimResourceStatus can be in any of following states:\n\t- ControllerResizeInProgress:\n\t\tState set when resize controller starts resizing the volume in control-plane.\n\t- ControllerResizeFailed:\n\t\tState set when resize has failed in resize controller with a terminal error.\n\t- NodeResizePending:\n\t\tState set when resize controller has finished resizing the volume but further resizing of\n\t\tvolume is needed on the node.\n\t- NodeResizeInProgress:\n\t\tState set when kubelet starts resizing the volume.\n\t- NodeResizeFailed:\n\t\tState set when resizing has failed in kubelet with a terminal error. Transient errors don't set\n\t\tNodeResizeFailed.\nFor example: if expanding a PVC for more capacity - this field can be one of the following states:\n\t- pvc.status.allocatedResourceStatus['storage'] = \"ControllerResizeInProgress\"\n     - pvc.status.allocatedResourceStatus['storage'] = \"ControllerResizeFailed\"\n     - pvc.status.allocatedResourceStatus['storage'] = \"NodeResizePending\"\n     - pvc.status.allocatedResourceStatus['storage'] = \"NodeResizeInProgress\"\n     - pvc.status.allocatedResourceStatus['storage'] = \"NodeResizeFailed\"\nWhen this field is not set, it means that no resize operation is in progress for the given PVC.\n\nA controller that receives PVC update with previously unknown resourceName or ClaimResourceStatus should ignore the update for the purpose it was designed. For example - a controller that only is responsible for resizing capacity of the volume, should ignore PVC updates that change other valid resources associated with PVC.\n\nThis is an alpha field and requires enabling RecoverVolumeExpansionFailure feature."
        }, 
        "currentVolumeAttributesClassName": {
          "type": "string", 
          "description": "currentVolumeAttributesClassName is the current name of the VolumeAttributesClass the PVC is using. When unset, there is no VolumeAttributeClass applied to this PersistentVolumeClaim"
        }, 
        "capacity": {
          "additionalProperties": {
            "$ref": "#/definitions/io.k8s.apimachinery.pkg.api.resource.Quantity"
          }, 
          "type": "object", 
          "description": "capacity represents the actual resources of the underlying volume."
        }, 
        "allocatedResources": {
          "additionalProperties": {
            "$ref": "#/definitions/io.k8s.apimachinery.pkg.api.resource.Quantity"
          }, 
          "type": "object", 
          "description": "allocatedResources tracks the resources allocated to a PVC including its capacity. Key names follow standard Kubernetes label syntax. Valid values are either:\n\t* Un-prefixed keys:\n\t\t- storage - the capacity of the volume.\n\t* Custom resources must use implementation-defined prefixed names such as \"example.com/my-custom-resource\"\nApart from above values - keys that are unprefixed or have kubernetes.io prefix are considered reserved and hence may not be used.\n\nCapacity reported here may be larger than the actual capacity when a volume expansion operation is requested. For storage quota, the larger value from allocatedResources and PVC.spec.resources is used. If allocatedResources is not set, PVC.spec.resources alone is used for quota calculation. If a volume expansion capacity request is lowered, allocatedResources is only lowered if there are no expansion operations in progress and if the actual volume capacity is equal or lower than the requested capacity.\n\nA controller that receives PVC update with previously unknown resourceName should ignore the update for the purpose it was designed. For example - a controller that only is responsible for resizing capacity of the volume, should ignore PVC updates that change other valid resources associated with PVC.\n\nThis is an alpha field and requires enabling RecoverVolumeExpansionFailure feature."
        }, 
        "accessModes": {
          "items": {
            "type": "string"
          }, 
          "type": "array", 
          "description": "accessModes contains the actual access modes the volume backing the PVC has. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1", 
          "x-kubernetes-list-type": "atomic"
        }, 
        "phase": {
          "type": "string", 
          "description": "phase represents the current phase of PersistentVolumeClaim."
        }, 
        "modifyVolumeStatus": {
          "description": "ModifyVolumeStatus represents the status object of ControllerModifyVolume operation. When this is unset, there is no ModifyVolume operation being attempted.", 
          "$ref": "#/definitions/io.k8s.api.core.v1.ModifyVolumeStatus"
        }, 
        "conditions": {
          "description": "conditions is the current Condition of persistent volume claim. If underlying persistent volume is being resized then the Condition will be set to 'Resizing'.", 
          "x-kubernetes-list-map-keys": [
            "type"
          ], 
          "x-kubernetes-patch-merge-key": "type", 
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.PersistentVolumeClaimCondition"
          }, 
          "type": "array", 
          "x-kubernetes-list-type": "map", 
          "x-kubernetes-patch-strategy": "merge"
        }
      }
    }, 
    "io.k8s.api.flowcontrol.v1.LimitResponse": {
      "x-kubernetes-unions": [
        {
          "discriminator": "type", 
          "fields-to-discriminateBy": {
            "queuing": "Queuing"
          }
        }
      ], 
      "required": [
        "type"
      ], 
      "type": "object", 
      "description": "LimitResponse defines how to handle requests that can not be executed right now.", 
      "properties": {
        "type": {
          "type": "string", 
          "description": "`type` is \"Queue\" or \"Reject\". \"Queue\" means that requests that can not be executed upon arrival are held in a queue until they can be executed or a queuing limit is reached. \"Reject\" means that requests that can not be executed upon arrival are rejected. Required."
        }, 
        "queuing": {
          "description": "`queuing` holds the configuration parameters for queuing. This field may be non-empty only if `type` is `\"Queue\"`.", 
          "$ref": "#/definitions/io.k8s.api.flowcontrol.v1.QueuingConfiguration"
        }
      }
    }, 
    "io.k8s.api.node.v1.RuntimeClass": {
      "type": "object", 
      "required": [
        "handler"
      ], 
      "x-kubernetes-group-version-kind": [
        {
          "kind": "RuntimeClass", 
          "version": "v1", 
          "group": "node.k8s.io"
        }
      ], 
      "description": "RuntimeClass defines a class of container runtime supported in the cluster. The RuntimeClass is used to determine which container runtime is used to run all containers in a pod. RuntimeClasses are manually defined by a user or cluster provisioner, and referenced in the PodSpec. The Kubelet is responsible for resolving the RuntimeClassName reference before running the pod.  For more details, see https://kubernetes.io/docs/concepts/containers/runtime-class/", 
      "properties": {
        "kind": {
          "enum": [
            "RuntimeClass"
          ], 
          "type": "string", 
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
        }, 
        "handler": {
          "type": "string", 
          "description": "handler specifies the underlying runtime and configuration that the CRI implementation will use to handle pods of this class. The possible values are specific to the node & CRI configuration.  It is assumed that all handlers are available on every node, and handlers of the same name are equivalent on every node. For example, a handler called \"runc\" might specify that the runc OCI runtime (using native Linux containers) will be used to run the containers in a pod. The Handler must be lowercase, conform to the DNS Label (RFC 1123) requirements, and is immutable."
        }, 
        "overhead": {
          "description": "overhead represents the resource overhead associated with running a pod for a given RuntimeClass. For more details, see\n https://kubernetes.io/docs/concepts/scheduling-eviction/pod-overhead/", 
          "$ref": "#/definitions/io.k8s.api.node.v1.Overhead"
        }, 
        "scheduling": {
          "description": "scheduling holds the scheduling constraints to ensure that pods running with this RuntimeClass are scheduled to nodes that support it. If scheduling is nil, this RuntimeClass is assumed to be supported by all nodes.", 
          "$ref": "#/definitions/io.k8s.api.node.v1.Scheduling"
        }, 
        "apiVersion": {
          "type": "string", 
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources"
        }, 
        "metadata": {
          "description": "More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata", 
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        }
      }
    }, 
    "io.k8s.api.batch.v1.PodFailurePolicyRule": {
      "required": [
        "action"
      ], 
      "type": "object", 
      "description": "PodFailurePolicyRule describes how a pod failure is handled when the requirements are met. One of onExitCodes and onPodConditions, but not both, can be used in each rule.", 
      "properties": {
        "action": {
          "type": "string", 
          "description": "Specifies the action taken on a pod failure when the requirements are satisfied. Possible values are:\n\n- FailJob: indicates that the pod's job is marked as Failed and all\n  running pods are terminated.\n- FailIndex: indicates that the pod's index is marked as Failed and will\n  not be restarted.\n- Ignore: indicates that the counter towards the .backoffLimit is not\n  incremented and a replacement pod is created.\n- Count: indicates that the pod is handled in the default way - the\n  counter towards the .backoffLimit is incremented.\nAdditional values are considered to be added in the future. Clients should react to an unknown action by skipping the rule."
        }, 
        "onExitCodes": {
          "description": "Represents the requirement on the container exit codes.", 
          "$ref": "#/definitions/io.k8s.api.batch.v1.PodFailurePolicyOnExitCodesRequirement"
        }, 
        "onPodConditions": {
          "items": {
            "$ref": "#/definitions/io.k8s.api.batch.v1.PodFailurePolicyOnPodConditionsPattern"
          }, 
          "type": "array", 
          "description": "Represents the requirement on the pod conditions. The requirement is represented as a list of pod condition patterns. The requirement is satisfied if at least one pattern matches an actual pod condition. At most 20 elements are allowed.", 
          "x-kubernetes-list-type": "atomic"
        }
      }
    }, 
    "io.k8s.api.autoscaling.v2.HorizontalPodAutoscalerList": {
      "type": "object", 
      "required": [
        "items"
      ], 
      "x-kubernetes-group-version-kind": [
        {
          "kind": "HorizontalPodAutoscalerList", 
          "version": "v2", 
          "group": "autoscaling"
        }
      ], 
      "description": "HorizontalPodAutoscalerList is a list of horizontal pod autoscaler objects.", 
      "properties": {
        "items": {
          "items": {
            "$ref": "#/definitions/io.k8s.api.autoscaling.v2.HorizontalPodAutoscaler"
          }, 
          "type": "array", 
          "description": "items is the list of horizontal pod autoscaler objects."
        }, 
        "kind": {
          "enum": [
            "HorizontalPodAutoscalerList"
          ], 
          "type": "string", 
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
        }, 
        "apiVersion": {
          "type": "string", 
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources"
        }, 
        "metadata": {
          "description": "metadata is the standard list metadata.", 
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      }
    }, 
    "io.k8s.api.core.v1.FileKeySelector": {
      "type": "object", 
      "required": [
        "volumeName", 
        "path", 
        "key"
      ], 
      "x-kubernetes-map-type": "atomic", 
      "description": "FileKeySelector selects a key of the env file.", 
      "properties": {
        "path": {
          "type": "string", 
          "description": "The path within the volume from which to select the file. Must be relative and may not contain the '..' path or start with '..'."
        }, 
        "optional": {
          "type": "boolean", 
          "description": "Specify whether the file or its key must be defined. If the file or key does not exist, then the env var is not published. If optional is set to true and the specified key does not exist, the environment variable will not be set in the Pod's containers.\n\nIf optional is set to false and the specified key does not exist, an error will be returned during Pod creation."
        }, 
        "key": {
          "type": "string", 
          "description": "The key within the env file. An invalid key will prevent the pod from starting. The keys defined within a source may consist of any printable ASCII characters except '='. During Alpha stage of the EnvFiles feature gate, the key size is limited to 128 characters."
        }, 
        "volumeName": {
          "type": "string", 
          "description": "The name of the volume mount containing the env file."
        }
      }
    }, 
    "io.k8s.api.core.v1.ContainerResizePolicy": {
      "required": [
        "resourceName", 
        "restartPolicy"
      ], 
      "type": "object", 
      "description": "ContainerResizePolicy represents resource resize policy for the container.", 
      "properties": {
        "resourceName": {
          "type": "string", 
          "description": "Name of the resource to which this resource resize policy applies. Supported values: cpu, memory."
        }, 
        "restartPolicy": {
          "type": "string", 
          "description": "Restart policy to apply when specified resource is resized. If not specified, it defaults to NotRequired."
        }
      }
    }, 
    "io.k8s.api.coordination.v1.Lease": {
      "type": "object", 
      "x-kubernetes-group-version-kind": [
        {
          "kind": "Lease", 
          "version": "v1", 
          "group": "coordination.k8s.io"
        }
      ], 
      "description": "Lease defines a lease concept.", 
      "properties": {
        "kind": {
          "enum": [
            "Lease"
          ], 
          "type": "string", 
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
        }, 
        "spec": {
          "description": "spec contains the specification of the Lease. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status", 
          "$ref": "#/definitions/io.k8s.api.coordination.v1.LeaseSpec"
        }, 
        "apiVersion": {
          "type": "string", 
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources"
        }, 
        "metadata": {
          "description": "More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata", 
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        }
      }
    }, 
    "io.k8s.api.networking.v1beta1.ServiceCIDR": {
      "type": "object", 
      "x-kubernetes-group-version-kind": [
        {
          "kind": "ServiceCIDR", 
          "version": "v1beta1", 
          "group": "networking.k8s.io"
        }
      ], 
      "description": "ServiceCIDR defines a range of IP addresses using CIDR format (e.g. 192.168.0.0/24 or 2001:db2::/64). This range is used to allocate ClusterIPs to Service objects.", 
      "properties": {
        "status": {
          "description": "status represents the current state of the ServiceCIDR. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status", 
          "$ref": "#/definitions/io.k8s.api.networking.v1beta1.ServiceCIDRStatus"
        }, 
        "kind": {
          "enum": [
            "ServiceCIDR"
          ], 
          "type": "string", 
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
        }, 
        "spec": {
          "description": "spec is the desired state of the ServiceCIDR. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status", 
          "$ref": "#/definitions/io.k8s.api.networking.v1beta1.ServiceCIDRSpec"
        }, 
        "apiVersion": {
          "type": "string", 
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources"
        }, 
        "metadata": {
          "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata", 
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        }
      }
    }, 
    "io.k8s.api.authentication.v1.TokenRequestSpec": {
      "required": [
        "audiences"
      ], 
      "type": "object", 
      "description": "TokenRequestSpec contains client provided parameters of a token request.", 
      "properties": {
        "audiences": {
          "items": {
            "type": "string"
          }, 
          "type": "array", 
          "description": "Audiences are the intendend audiences of the token. A recipient of a token must identify themself with an identifier in the list of audiences of the token, and otherwise should reject the token. A token issued for multiple audiences may be used to authenticate against any of the audiences listed but implies a high degree of trust between the target audiences.", 
          "x-kubernetes-list-type": "atomic"
        }, 
        "boundObjectRef": {
          "description": "BoundObjectRef is a reference to an object that the token will be bound to. The token will only be valid for as long as the bound object exists. NOTE: The API server's TokenReview endpoint will validate the BoundObjectRef, but other audiences may not. Keep ExpirationSeconds small if you want prompt revocation.", 
          "$ref": "#/definitions/io.k8s.api.authentication.v1.BoundObjectReference"
        }, 
        "expirationSeconds": {
          "type": "integer", 
          "description": "ExpirationSeconds is the requested duration of validity of the request. The token issuer may return a token with a different validity duration so a client needs to check the 'expiration' field in a response.", 
          "format": "int64"
        }
      }
    }, 
    "io.k8s.api.networking.v1.ServiceCIDRSpec": {
      "type": "object", 
      "description": "ServiceCIDRSpec define the CIDRs the user wants to use for allocating ClusterIPs for Services.", 
      "properties": {
        "cidrs": {
          "items": {
            "type": "string"
          }, 
          "type": "array", 
          "description": "CIDRs defines the IP blocks in CIDR notation (e.g. \"192.168.0.0/24\" or \"2001:db8::/64\") from which to assign service cluster IPs. Max of two CIDRs is allowed, one of each IP family. This field is immutable.", 
          "x-kubernetes-list-type": "atomic"
        }
      }
    }, 
    "io.k8s.api.resource.v1.ResourceClaimStatus": {
      "type": "object", 
      "description": "ResourceClaimStatus tracks whether the resource has been allocated and what the result of that was.", 
      "properties": {
        "allocation": {
          "description": "Allocation is set once the claim has been allocated successfully.", 
          "$ref": "#/definitions/io.k8s.api.resource.v1.AllocationResult"
        }, 
        "reservedFor": {
          "description": "ReservedFor indicates which entities are currently allowed to use the claim. A Pod which references a ResourceClaim which is not reserved for that Pod will not be started. A claim that is in use or might be in use because it has been reserved must not get deallocated.\n\nIn a cluster with multiple scheduler instances, two pods might get scheduled concurrently by different schedulers. When they reference the same ResourceClaim which already has reached its maximum number of consumers, only one pod can be scheduled.\n\nBoth schedulers try to add their pod to the claim.status.reservedFor field, but only the update that reaches the API server first gets stored. The other one fails with an error and the scheduler which issued it knows that it must put the pod back into the queue, waiting for the ResourceClaim to become usable again.\n\nThere can be at most 256 such reservations. This may get increased in the future, but not reduced.", 
          "x-kubernetes-list-map-keys": [
            "uid"
          ], 
          "x-kubernetes-patch-merge-key": "uid", 
          "items": {
            "$ref": "#/definitions/io.k8s.api.resource.v1.ResourceClaimConsumerReference"
          }, 
          "type": "array", 
          "x-kubernetes-list-type": "map", 
          "x-kubernetes-patch-strategy": "merge"
        }, 
        "devices": {
          "items": {
            "$ref": "#/definitions/io.k8s.api.resource.v1.AllocatedDeviceStatus"
          }, 
          "type": "array", 
          "description": "Devices contains the status of each device allocated for this claim, as reported by the driver. This can include driver-specific information. Entries are owned by their respective drivers.", 
          "x-kubernetes-list-map-keys": [
            "driver", 
            "device", 
            "pool", 
            "shareID"
          ], 
          "x-kubernetes-list-type": "map"
        }
      }
    }, 
    "io.k8s.api.apps.v1.StatefulSetSpec": {
      "required": [
        "selector", 
        "template"
      ], 
      "type": "object", 
      "description": "A StatefulSetSpec is the specification of a StatefulSet.", 
      "properties": {
        "replicas": {
          "type": "integer", 
          "description": "replicas is the desired number of replicas of the given Template. These are replicas in the sense that they are instantiations of the same Template, but individual replicas also have a consistent identity. If unspecified, defaults to 1.", 
          "format": "int32"
        }, 
        "volumeClaimTemplates": {
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.PersistentVolumeClaim"
          }, 
          "type": "array", 
          "description": "volumeClaimTemplates is a list of claims that pods are allowed to reference. The StatefulSet controller is responsible for mapping network identities to claims in a way that maintains the identity of a pod. Every claim in this list must have at least one matching (by name) volumeMount in one container in the template. A claim in this list takes precedence over any volumes in the template, with the same name.", 
          "x-kubernetes-list-type": "atomic"
        }, 
        "podManagementPolicy": {
          "type": "string", 
          "description": "podManagementPolicy controls how pods are created during initial scale up, when replacing pods on nodes, or when scaling down. The default policy is `OrderedReady`, where pods are created in increasing order (pod-0, then pod-1, etc) and the controller will wait until each pod is ready before continuing. When scaling down, the pods are removed in the opposite order. The alternative policy is `Parallel` which will create pods in parallel to match the desired scale without waiting, and on scale down will delete all pods at once."
        }, 
        "ordinals": {
          "description": "ordinals controls the numbering of replica indices in a StatefulSet. The default ordinals behavior assigns a \"0\" index to the first replica and increments the index by one for each additional replica requested.", 
          "$ref": "#/definitions/io.k8s.api.apps.v1.StatefulSetOrdinals"
        }, 
        "selector": {
          "description": "selector is a label query over pods that should match the replica count. It must match the pod template's labels. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors", 
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector"
        }, 
        "serviceName": {
          "type": "string", 
          "description": "serviceName is the name of the service that governs this StatefulSet. This service must exist before the StatefulSet, and is responsible for the network identity of the set. Pods get DNS/hostnames that follow the pattern: pod-specific-string.serviceName.default.svc.cluster.local where \"pod-specific-string\" is managed by the StatefulSet controller."
        }, 
        "template": {
          "description": "template is the object that describes the pod that will be created if insufficient replicas are detected. Each pod stamped out by the StatefulSet will fulfill this Template, but have a unique identity from the rest of the StatefulSet. Each pod will be named with the format <statefulsetname>-<podindex>. For example, a pod in a StatefulSet named \"web\" with index number \"3\" would be named \"web-3\". The only allowed template.spec.restartPolicy value is \"Always\".", 
          "$ref": "#/definitions/io.k8s.api.core.v1.PodTemplateSpec"
        }, 
        "persistentVolumeClaimRetentionPolicy": {
          "description": "persistentVolumeClaimRetentionPolicy describes the lifecycle of persistent volume claims created from volumeClaimTemplates. By default, all persistent volume claims are created as needed and retained until manually deleted. This policy allows the lifecycle to be altered, for example by deleting persistent volume claims when their stateful set is deleted, or when their pod is scaled down.", 
          "$ref": "#/definitions/io.k8s.api.apps.v1.StatefulSetPersistentVolumeClaimRetentionPolicy"
        }, 
        "revisionHistoryLimit": {
          "type": "integer", 
          "description": "revisionHistoryLimit is the maximum number of revisions that will be maintained in the StatefulSet's revision history. The revision history consists of all revisions not represented by a currently applied StatefulSetSpec version. The default value is 10.", 
          "format": "int32"
        }, 
        "updateStrategy": {
          "description": "updateStrategy indicates the StatefulSetUpdateStrategy that will be employed to update Pods in the StatefulSet when a revision is made to Template.", 
          "$ref": "#/definitions/io.k8s.api.apps.v1.StatefulSetUpdateStrategy"
        }, 
        "minReadySeconds": {
          "type": "integer", 
          "description": "Minimum number of seconds for which a newly created pod should be ready without any of its container crashing for it to be considered available. Defaults to 0 (pod will be considered available as soon as it is ready)", 
          "format": "int32"
        }
      }
    }, 
    "io.k8s.api.apps.v1.ReplicaSetList": {
      "type": "object", 
      "required": [
        "items"
      ], 
      "x-kubernetes-group-version-kind": [
        {
          "kind": "ReplicaSetList", 
          "version": "v1", 
          "group": "apps"
        }
      ], 
      "description": "ReplicaSetList is a collection of ReplicaSets.", 
      "properties": {
        "items": {
          "items": {
            "$ref": "#/definitions/io.k8s.api.apps.v1.ReplicaSet"
          }, 
          "type": "array", 
          "description": "List of ReplicaSets. More info: https://kubernetes.io/docs/concepts/workloads/controllers/replicaset"
        }, 
        "kind": {
          "enum": [
            "ReplicaSetList"
          ], 
          "type": "string", 
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
        }, 
        "apiVersion": {
          "type": "string", 
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources"
        }, 
        "metadata": {
          "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds", 
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      }
    }, 
    "io.k8s.api.admissionregistration.v1.MatchResources": {
      "type": "object", 
      "x-kubernetes-map-type": "atomic", 
      "description": "MatchResources decides whether to run the admission control policy on an object based on whether it meets the match criteria. The exclude rules take precedence over include rules (if a resource matches both, it is excluded)", 
      "properties": {
        "objectSelector": {
          "description": "ObjectSelector decides whether to run the validation based on if the object has matching labels. objectSelector is evaluated against both the oldObject and newObject that would be sent to the cel validation, and is considered to match if either object matches the selector. A null object (oldObject in the case of create, or newObject in the case of delete) or an object that cannot have labels (like a DeploymentRollback or a PodProxyOptions object) is not considered to match. Use the object selector only if the webhook is opt-in, because end users may skip the admission webhook by setting the labels. Default to the empty LabelSelector, which matches everything.", 
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector"
        }, 
        "matchPolicy": {
          "type": "string", 
          "description": "matchPolicy defines how the \"MatchResources\" list is used to match incoming requests. Allowed values are \"Exact\" or \"Equivalent\".\n\n- Exact: match a request only if it exactly matches a specified rule. For example, if deployments can be modified via apps/v1, apps/v1beta1, and extensions/v1beta1, but \"rules\" only included `apiGroups:[\"apps\"], apiVersions:[\"v1\"], resources: [\"deployments\"]`, a request to apps/v1beta1 or extensions/v1beta1 would not be sent to the ValidatingAdmissionPolicy.\n\n- Equivalent: match a request if modifies a resource listed in rules, even via another API group or version. For example, if deployments can be modified via apps/v1, apps/v1beta1, and extensions/v1beta1, and \"rules\" only included `apiGroups:[\"apps\"], apiVersions:[\"v1\"], resources: [\"deployments\"]`, a request to apps/v1beta1 or extensions/v1beta1 would be converted to apps/v1 and sent to the ValidatingAdmissionPolicy.\n\nDefaults to \"Equivalent\""
        }, 
        "excludeResourceRules": {
          "items": {
            "$ref": "#/definitions/io.k8s.api.admissionregistration.v1.NamedRuleWithOperations"
          }, 
          "type": "array", 
          "description": "ExcludeResourceRules describes what operations on what resources/subresources the ValidatingAdmissionPolicy should not care about. The exclude rules take precedence over include rules (if a resource matches both, it is excluded)", 
          "x-kubernetes-list-type": "atomic"
        }, 
        "resourceRules": {
          "items": {
            "$ref": "#/definitions/io.k8s.api.admissionregistration.v1.NamedRuleWithOperations"
          }, 
          "type": "array", 
          "description": "ResourceRules describes what operations on what resources/subresources the ValidatingAdmissionPolicy matches. The policy cares about an operation if it matches _any_ Rule.", 
          "x-kubernetes-list-type": "atomic"
        }, 
        "namespaceSelector": {
          "description": "NamespaceSelector decides whether to run the admission control policy on an object based on whether the namespace for that object matches the selector. If the object itself is a namespace, the matching is performed on object.metadata.labels. If the object is another cluster scoped resource, it never skips the policy.\n\nFor example, to run the webhook on any objects whose namespace is not associated with \"runlevel\" of \"0\" or \"1\";  you will set the selector as follows: \"namespaceSelector\": {\n  \"matchExpressions\": [\n    {\n      \"key\": \"runlevel\",\n      \"operator\": \"NotIn\",\n      \"values\": [\n        \"0\",\n        \"1\"\n      ]\n    }\n  ]\n}\n\nIf instead you want to only run the policy on any objects whose namespace is associated with the \"environment\" of \"prod\" or \"staging\"; you will set the selector as follows: \"namespaceSelector\": {\n  \"matchExpressions\": [\n    {\n      \"key\": \"environment\",\n      \"operator\": \"In\",\n      \"values\": [\n        \"prod\",\n        \"staging\"\n      ]\n    }\n  ]\n}\n\nSee https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/ for more examples of label selectors.\n\nDefault to the empty LabelSelector, which matches everything.", 
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector"
        }
      }
    }, 
    "io.k8s.api.core.v1.Probe": {
      "type": "object", 
      "description": "Probe describes a health check to be performed against a container to determine whether it is alive or ready to receive traffic.", 
      "properties": {
        "httpGet": {
          "description": "HTTPGet specifies an HTTP GET request to perform.", 
          "$ref": "#/definitions/io.k8s.api.core.v1.HTTPGetAction"
        }, 
        "timeoutSeconds": {
          "type": "integer", 
          "description": "Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes", 
          "format": "int32"
        }, 
        "exec": {
          "description": "Exec specifies a command to execute in the container.", 
          "$ref": "#/definitions/io.k8s.api.core.v1.ExecAction"
        }, 
        "grpc": {
          "description": "GRPC specifies a GRPC HealthCheckRequest.", 
          "$ref": "#/definitions/io.k8s.api.core.v1.GRPCAction"
        }, 
        "initialDelaySeconds": {
          "type": "integer", 
          "description": "Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes", 
          "format": "int32"
        }, 
        "terminationGracePeriodSeconds": {
          "type": "integer", 
          "description": "Optional duration in seconds the pod needs to terminate gracefully upon probe failure. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this value overrides the value provided by the pod spec. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate. Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.", 
          "format": "int64"
        }, 
        "tcpSocket": {
          "description": "TCPSocket specifies a connection to a TCP port.", 
          "$ref": "#/definitions/io.k8s.api.core.v1.TCPSocketAction"
        }, 
        "periodSeconds": {
          "type": "integer", 
          "description": "How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.", 
          "format": "int32"
        }, 
        "successThreshold": {
          "type": "integer", 
          "description": "Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.", 
          "format": "int32"
        }, 
        "failureThreshold": {
          "type": "integer", 
          "description": "Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.", 
          "format": "int32"
        }
      }
    }, 
    "io.k8s.api.core.v1.EphemeralVolumeSource": {
      "type": "object", 
      "description": "Represents an ephemeral volume that is handled by a normal storage driver.", 
      "properties": {
        "volumeClaimTemplate": {
          "description": "Will be used to create a stand-alone PVC to provision the volume. The pod in which this EphemeralVolumeSource is embedded will be the owner of the PVC, i.e. the PVC will be deleted together with the pod.  The name of the PVC will be `<pod name>-<volume name>` where `<volume name>` is the name from the `PodSpec.Volumes` array entry. Pod validation will reject the pod if the concatenated name is not valid for a PVC (for example, too long).\n\nAn existing PVC with that name that is not owned by the pod will *not* be used for the pod to avoid using an unrelated volume by mistake. Starting the pod is then blocked until the unrelated PVC is removed. If such a pre-created PVC is meant to be used by the pod, the PVC has to updated with an owner reference to the pod once the pod exists. Normally this should not be necessary, but it may be useful when manually reconstructing a broken cluster.\n\nThis field is read-only and no changes will be made by Kubernetes to the PVC after it has been created.\n\nRequired, must not be nil.", 
          "$ref": "#/definitions/io.k8s.api.core.v1.PersistentVolumeClaimTemplate"
        }
      }
    }, 
    "io.k8s.api.rbac.v1.RoleRef": {
      "type": "object", 
      "required": [
        "apiGroup", 
        "kind", 
        "name"
      ], 
      "x-kubernetes-map-type": "atomic", 
      "description": "RoleRef contains information that points to the role being used", 
      "properties": {
        "apiGroup": {
          "type": "string", 
          "description": "APIGroup is the group for the resource being referenced"
        }, 
        "kind": {
          "type": "string", 
          "description": "Kind is the type of resource being referenced"
        }, 
        "name": {
          "type": "string", 
          "description": "Name is the name of resource being referenced"
        }
      }
    }, 
    "io.k8s.api.core.v1.PodSecurityContext": {
      "type": "object", 
      "description": "PodSecurityContext holds pod-level security attributes and common container settings. Some fields are also present in container.securityContext.  Field values of container.securityContext take precedence over field values of PodSecurityContext.", 
      "properties": {
        "appArmorProfile": {
          "description": "appArmorProfile is the AppArmor options to use by the containers in this pod. Note that this field cannot be set when spec.os.name is windows.", 
          "$ref": "#/definitions/io.k8s.api.core.v1.AppArmorProfile"
        }, 
        "seccompProfile": {
          "description": "The seccomp options to use by the containers in this pod. Note that this field cannot be set when spec.os.name is windows.", 
          "$ref": "#/definitions/io.k8s.api.core.v1.SeccompProfile"
        }, 
        "runAsGroup": {
          "type": "integer", 
          "description": "The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container. Note that this field cannot be set when spec.os.name is windows.", 
          "format": "int64"
        }, 
        "runAsUser": {
          "type": "integer", 
          "description": "The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container. Note that this field cannot be set when spec.os.name is windows.", 
          "format": "int64"
        }, 
        "supplementalGroups": {
          "items": {
            "type": "integer", 
            "format": "int64"
          }, 
          "type": "array", 
          "description": "A list of groups applied to the first process run in each container, in addition to the container's primary GID and fsGroup (if specified).  If the SupplementalGroupsPolicy feature is enabled, the supplementalGroupsPolicy field determines whether these are in addition to or instead of any group memberships defined in the container image. If unspecified, no additional groups are added, though group memberships defined in the container image may still be used, depending on the supplementalGroupsPolicy field. Note that this field cannot be set when spec.os.name is windows.", 
          "x-kubernetes-list-type": "atomic"
        }, 
        "fsGroup": {
          "type": "integer", 
          "description": "A special supplemental group that applies to all containers in a pod. Some volume types allow the Kubelet to change the ownership of that volume to be owned by the pod:\n\n1. The owning GID will be the FSGroup 2. The setgid bit is set (new files created in the volume will be owned by FSGroup) 3. The permission bits are OR'd with rw-rw----\n\nIf unset, the Kubelet will not modify the ownership and permissions of any volume. Note that this field cannot be set when spec.os.name is windows.", 
          "format": "int64"
        }, 
        "seLinuxOptions": {
          "description": "The SELinux context to be applied to all containers. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container. Note that this field cannot be set when spec.os.name is windows.", 
          "$ref": "#/definitions/io.k8s.api.core.v1.SELinuxOptions"
        }, 
        "runAsNonRoot": {
          "type": "boolean", 
          "description": "Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence."
        }, 
        "windowsOptions": {
          "description": "The Windows specific settings applied to all containers. If unspecified, the options within a container's SecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is linux.", 
          "$ref": "#/definitions/io.k8s.api.core.v1.WindowsSecurityContextOptions"
        }, 
        "sysctls": {
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.Sysctl"
          }, 
          "type": "array", 
          "description": "Sysctls hold a list of namespaced sysctls used for the pod. Pods with unsupported sysctls (by the container runtime) might fail to launch. Note that this field cannot be set when spec.os.name is windows.", 
          "x-kubernetes-list-type": "atomic"
        }, 
        "fsGroupChangePolicy": {
          "type": "string", 
          "description": "fsGroupChangePolicy defines behavior of changing ownership and permission of the volume before being exposed inside Pod. This field will only apply to volume types which support fsGroup based ownership(and permissions). It will have no effect on ephemeral volume types such as: secret, configmaps and emptydir. Valid values are \"OnRootMismatch\" and \"Always\". If not specified, \"Always\" is used. Note that this field cannot be set when spec.os.name is windows."
        }, 
        "supplementalGroupsPolicy": {
          "type": "string", 
          "description": "Defines how supplemental groups of the first container processes are calculated. Valid values are \"Merge\" and \"Strict\". If not specified, \"Merge\" is used. (Alpha) Using the field requires the SupplementalGroupsPolicy feature gate to be enabled and the container runtime must implement support for this feature. Note that this field cannot be set when spec.os.name is windows."
        }, 
        "seLinuxChangePolicy": {
          "type": "string", 
          "description": "seLinuxChangePolicy defines how the container's SELinux label is applied to all volumes used by the Pod. It has no effect on nodes that do not support SELinux or to volumes does not support SELinux. Valid values are \"MountOption\" and \"Recursive\".\n\n\"Recursive\" means relabeling of all files on all Pod volumes by the container runtime. This may be slow for large volumes, but allows mixing privileged and unprivileged Pods sharing the same volume on the same node.\n\n\"MountOption\" mounts all eligible Pod volumes with `-o context` mount option. This requires all Pods that share the same volume to use the same SELinux label. It is not possible to share the same volume among privileged and unprivileged Pods. Eligible volumes are in-tree FibreChannel and iSCSI volumes, and all CSI volumes whose CSI driver announces SELinux support by setting spec.seLinuxMount: true in their CSIDriver instance. Other volumes are always re-labelled recursively. \"MountOption\" value is allowed only when SELinuxMount feature gate is enabled.\n\nIf not specified and SELinuxMount feature gate is enabled, \"MountOption\" is used. If not specified and SELinuxMount feature gate is disabled, \"MountOption\" is used for ReadWriteOncePod volumes and \"Recursive\" for all other volumes.\n\nThis field affects only Pods that have SELinux label set, either in PodSecurityContext or in SecurityContext of all containers.\n\nAll Pods that use the same volume should use the same seLinuxChangePolicy, otherwise some pods can get stuck in ContainerCreating state. Note that this field cannot be set when spec.os.name is windows."
        }
      }
    }, 
    "io.k8s.api.networking.v1.IngressClassParametersReference": {
      "required": [
        "kind", 
        "name"
      ], 
      "type": "object", 
      "description": "IngressClassParametersReference identifies an API object. This can be used to specify a cluster or namespace-scoped resource.", 
      "properties": {
        "apiGroup": {
          "type": "string", 
          "description": "apiGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required."
        }, 
        "kind": {
          "type": "string", 
          "description": "kind is the type of resource being referenced."
        }, 
        "namespace": {
          "type": "string", 
          "description": "namespace is the namespace of the resource being referenced. This field is required when scope is set to \"Namespace\" and must be unset when scope is set to \"Cluster\"."
        }, 
        "name": {
          "type": "string", 
          "description": "name is the name of resource being referenced."
        }, 
        "scope": {
          "type": "string", 
          "description": "scope represents if this refers to a cluster or namespace scoped resource. This may be set to \"Cluster\" (default) or \"Namespace\"."
        }
      }
    }, 
    "io.k8s.api.autoscaling.v2.MetricValueStatus": {
      "type": "object", 
      "description": "MetricValueStatus holds the current value for a metric", 
      "properties": {
        "averageValue": {
          "description": "averageValue is the current value of the average of the metric across all relevant pods (as a quantity)", 
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.api.resource.Quantity"
        }, 
        "averageUtilization": {
          "type": "integer", 
          "description": "currentAverageUtilization is the current value of the average of the resource metric across all relevant pods, represented as a percentage of the requested value of the resource for the pods.", 
          "format": "int32"
        }, 
        "value": {
          "description": "value is the current value of the metric (as a quantity).", 
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.api.resource.Quantity"
        }
      }
    }, 
    "io.k8s.api.networking.v1.NetworkPolicySpec": {
      "type": "object", 
      "description": "NetworkPolicySpec provides the specification of a NetworkPolicy", 
      "properties": {
        "policyTypes": {
          "items": {
            "type": "string"
          }, 
          "type": "array", 
          "description": "policyTypes is a list of rule types that the NetworkPolicy relates to. Valid options are [\"Ingress\"], [\"Egress\"], or [\"Ingress\", \"Egress\"]. If this field is not specified, it will default based on the existence of ingress or egress rules; policies that contain an egress section are assumed to affect egress, and all policies (whether or not they contain an ingress section) are assumed to affect ingress. If you want to write an egress-only policy, you must explicitly specify policyTypes [ \"Egress\" ]. Likewise, if you want to write a policy that specifies that no egress is allowed, you must specify a policyTypes value that include \"Egress\" (since such a policy would not include an egress section and would otherwise default to just [ \"Ingress\" ]). This field is beta-level in 1.8", 
          "x-kubernetes-list-type": "atomic"
        }, 
        "egress": {
          "items": {
            "$ref": "#/definitions/io.k8s.api.networking.v1.NetworkPolicyEgressRule"
          }, 
          "type": "array", 
          "description": "egress is a list of egress rules to be applied to the selected pods. Outgoing traffic is allowed if there are no NetworkPolicies selecting the pod (and cluster policy otherwise allows the traffic), OR if the traffic matches at least one egress rule across all of the NetworkPolicy objects whose podSelector matches the pod. If this field is empty then this NetworkPolicy limits all outgoing traffic (and serves solely to ensure that the pods it selects are isolated by default). This field is beta-level in 1.8", 
          "x-kubernetes-list-type": "atomic"
        }, 
        "ingress": {
          "items": {
            "$ref": "#/definitions/io.k8s.api.networking.v1.NetworkPolicyIngressRule"
          }, 
          "type": "array", 
          "description": "ingress is a list of ingress rules to be applied to the selected pods. Traffic is allowed to a pod if there are no NetworkPolicies selecting the pod (and cluster policy otherwise allows the traffic), OR if the traffic source is the pod's local node, OR if the traffic matches at least one ingress rule across all of the NetworkPolicy objects whose podSelector matches the pod. If this field is empty then this NetworkPolicy does not allow any traffic (and serves solely to ensure that the pods it selects are isolated by default)", 
          "x-kubernetes-list-type": "atomic"
        }, 
        "podSelector": {
          "description": "podSelector selects the pods to which this NetworkPolicy object applies. The array of rules is applied to any pods selected by this field. An empty selector matches all pods in the policy's namespace. Multiple network policies can select the same set of pods. In this case, the ingress rules for each are combined additively. This field is optional. If it is not specified, it defaults to an empty selector.", 
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector"
        }
      }
    }, 
    "io.k8s.api.core.v1.ContainerStatus": {
      "required": [
        "name", 
        "ready", 
        "restartCount", 
        "image", 
        "imageID"
      ], 
      "type": "object", 
      "description": "ContainerStatus contains details for the current status of this container.", 
      "properties": {
        "restartCount": {
          "type": "integer", 
          "description": "RestartCount holds the number of times the container has been restarted. Kubelet makes an effort to always increment the value, but there are cases when the state may be lost due to node restarts and then the value may be reset to 0. The value is never negative.", 
          "format": "int32"
        }, 
        "containerID": {
          "type": "string", 
          "description": "ContainerID is the ID of the container in the format '<type>://<container_id>'. Where type is a container runtime identifier, returned from Version call of CRI API (for example \"containerd\")."
        }, 
        "name": {
          "type": "string", 
          "description": "Name is a DNS_LABEL representing the unique name of the container. Each container in a pod must have a unique name across all container types. Cannot be updated."
        }, 
        "started": {
          "type": "boolean", 
          "description": "Started indicates whether the container has finished its postStart lifecycle hook and passed its startup probe. Initialized as false, becomes true after startupProbe is considered successful. Resets to false when the container is restarted, or if kubelet loses state temporarily. In both cases, startup probes will run again. Is always true when no startupProbe is defined and container is running and has passed the postStart lifecycle hook. The null value must be treated the same as false."
        }, 
        "image": {
          "type": "string", 
          "description": "Image is the name of container image that the container is running. The container image may not match the image used in the PodSpec, as it may have been resolved by the runtime. More info: https://kubernetes.io/docs/concepts/containers/images."
        }, 
        "volumeMounts": {
          "description": "Status of volume mounts.", 
          "x-kubernetes-list-map-keys": [
            "mountPath"
          ], 
          "x-kubernetes-patch-merge-key": "mountPath", 
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.VolumeMountStatus"
          }, 
          "type": "array", 
          "x-kubernetes-list-type": "map", 
          "x-kubernetes-patch-strategy": "merge"
        }, 
        "allocatedResources": {
          "additionalProperties": {
            "$ref": "#/definitions/io.k8s.apimachinery.pkg.api.resource.Quantity"
          }, 
          "type": "object", 
          "description": "AllocatedResources represents the compute resources allocated for this container by the node. Kubelet sets this value to Container.Resources.Requests upon successful pod admission and after successfully admitting desired pod resize."
        }, 
        "stopSignal": {
          "type": "string", 
          "description": "StopSignal reports the effective stop signal for this container"
        }, 
        "imageID": {
          "type": "string", 
          "description": "ImageID is the image ID of the container's image. The image ID may not match the image ID of the image used in the PodSpec, as it may have been resolved by the runtime."
        }, 
        "allocatedResourcesStatus": {
          "description": "AllocatedResourcesStatus represents the status of various resources allocated for this Pod.", 
          "x-kubernetes-list-map-keys": [
            "name"
          ], 
          "x-kubernetes-patch-merge-key": "name", 
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.ResourceStatus"
          }, 
          "type": "array", 
          "x-kubernetes-list-type": "map", 
          "x-kubernetes-patch-strategy": "merge"
        }, 
        "state": {
          "description": "State holds details about the container's current condition.", 
          "$ref": "#/definitions/io.k8s.api.core.v1.ContainerState"
        }, 
        "user": {
          "description": "User represents user identity information initially attached to the first process of the container", 
          "$ref": "#/definitions/io.k8s.api.core.v1.ContainerUser"
        }, 
        "ready": {
          "type": "boolean", 
          "description": "Ready specifies whether the container is currently passing its readiness check. The value will change as readiness probes keep executing. If no readiness probes are specified, this field defaults to true once the container is fully started (see Started field).\n\nThe value is typically used to determine whether a container is ready to accept traffic."
        }, 
        "resources": {
          "description": "Resources represents the compute resource requests and limits that have been successfully enacted on the running container after it has been started or has been successfully resized.", 
          "$ref": "#/definitions/io.k8s.api.core.v1.ResourceRequirements"
        }, 
        "lastState": {
          "description": "LastTerminationState holds the last termination state of the container to help debug container crashes and restarts. This field is not populated if the container is still running and RestartCount is 0.", 
          "$ref": "#/definitions/io.k8s.api.core.v1.ContainerState"
        }
      }
    }, 
    "io.k8s.api.storagemigration.v1alpha1.StorageVersionMigrationStatus": {
      "type": "object", 
      "description": "Status of the storage version migration.", 
      "properties": {
        "conditions": {
          "description": "The latest available observations of the migration's current state.", 
          "x-kubernetes-list-map-keys": [
            "type"
          ], 
          "x-kubernetes-patch-merge-key": "type", 
          "items": {
            "$ref": "#/definitions/io.k8s.api.storagemigration.v1alpha1.MigrationCondition"
          }, 
          "type": "array", 
          "x-kubernetes-list-type": "map", 
          "x-kubernetes-patch-strategy": "merge"
        }, 
        "resourceVersion": {
          "type": "string", 
          "description": "ResourceVersion to compare with the GC cache for performing the migration. This is the current resource version of given group, version and resource when kube-controller-manager first observes this StorageVersionMigration resource."
        }
      }
    }, 
    "io.k8s.api.storagemigration.v1alpha1.StorageVersionMigrationList": {
      "type": "object", 
      "required": [
        "items"
      ], 
      "x-kubernetes-group-version-kind": [
        {
          "kind": "StorageVersionMigrationList", 
          "version": "v1alpha1", 
          "group": "storagemigration.k8s.io"
        }
      ], 
      "description": "StorageVersionMigrationList is a collection of storage version migrations.", 
      "properties": {
        "items": {
          "description": "Items is the list of StorageVersionMigration", 
          "x-kubernetes-list-map-keys": [
            "type"
          ], 
          "x-kubernetes-patch-merge-key": "type", 
          "items": {
            "$ref": "#/definitions/io.k8s.api.storagemigration.v1alpha1.StorageVersionMigration"
          }, 
          "type": "array", 
          "x-kubernetes-list-type": "map", 
          "x-kubernetes-patch-strategy": "merge"
        }, 
        "kind": {
          "enum": [
            "StorageVersionMigrationList"
          ], 
          "type": "string", 
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
        }, 
        "apiVersion": {
          "type": "string", 
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources"
        }, 
        "metadata": {
          "description": "Standard list metadata More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata", 
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      }
    }, 
    "io.k8s.api.admissionregistration.v1beta1.ParamKind": {
      "type": "object", 
      "x-kubernetes-map-type": "atomic", 
      "description": "ParamKind is a tuple of Group Kind and Version.", 
      "properties": {
        "kind": {
          "type": "string", 
          "description": "Kind is the API kind the resources belong to. Required."
        }, 
        "apiVersion": {
          "type": "string", 
          "description": "APIVersion is the API group version the resources belong to. In format of \"group/version\". Required."
        }
      }
    }, 
    "io.k8s.api.resource.v1.DeviceRequestAllocationResult": {
      "required": [
        "request", 
        "driver", 
        "pool", 
        "device"
      ], 
      "type": "object", 
      "description": "DeviceRequestAllocationResult contains the allocation result for one request.", 
      "properties": {
        "bindingFailureConditions": {
          "items": {
            "type": "string"
          }, 
          "type": "array", 
          "description": "BindingFailureConditions contains a copy of the BindingFailureConditions from the corresponding ResourceSlice at the time of allocation.\n\nThis is an alpha field and requires enabling the DRADeviceBindingConditions and DRAResourceClaimDeviceStatus feature gates.", 
          "x-kubernetes-list-type": "atomic"
        }, 
        "driver": {
          "type": "string", 
          "description": "Driver specifies the name of the DRA driver whose kubelet plugin should be invoked to process the allocation once the claim is needed on a node.\n\nMust be a DNS subdomain and should end with a DNS domain owned by the vendor of the driver."
        }, 
        "request": {
          "type": "string", 
          "description": "Request is the name of the request in the claim which caused this device to be allocated. If it references a subrequest in the firstAvailable list on a DeviceRequest, this field must include both the name of the main request and the subrequest using the format <main request>/<subrequest>.\n\nMultiple devices may have been allocated per request."
        }, 
        "bindingConditions": {
          "items": {
            "type": "string"
          }, 
          "type": "array", 
          "description": "BindingConditions contains a copy of the BindingConditions from the corresponding ResourceSlice at the time of allocation.\n\nThis is an alpha field and requires enabling the DRADeviceBindingConditions and DRAResourceClaimDeviceStatus feature gates.", 
          "x-kubernetes-list-type": "atomic"
        }, 
        "consumedCapacity": {
          "additionalProperties": {
            "$ref": "#/definitions/io.k8s.apimachinery.pkg.api.resource.Quantity"
          }, 
          "type": "object", 
          "description": "ConsumedCapacity tracks the amount of capacity consumed per device as part of the claim request. The consumed amount may differ from the requested amount: it is rounded up to the nearest valid value based on the device\u2019s requestPolicy if applicable (i.e., may not be less than the requested amount).\n\nThe total consumed capacity for each device must not exceed the DeviceCapacity's Value.\n\nThis field is populated only for devices that allow multiple allocations. All capacity entries are included, even if the consumed amount is zero."
        }, 
        "device": {
          "type": "string", 
          "description": "Device references one device instance via its name in the driver's resource pool. It must be a DNS label."
        }, 
        "tolerations": {
          "items": {
            "$ref": "#/definitions/io.k8s.api.resource.v1.DeviceToleration"
          }, 
          "type": "array", 
          "description": "A copy of all tolerations specified in the request at the time when the device got allocated.\n\nThe maximum number of tolerations is 16.\n\nThis is an alpha field and requires enabling the DRADeviceTaints feature gate.", 
          "x-kubernetes-list-type": "atomic"
        }, 
        "adminAccess": {
          "type": "boolean", 
          "description": "AdminAccess indicates that this device was allocated for administrative access. See the corresponding request field for a definition of mode.\n\nThis is an alpha field and requires enabling the DRAAdminAccess feature gate. Admin access is disabled if this field is unset or set to false, otherwise it is enabled."
        }, 
        "pool": {
          "type": "string", 
          "description": "This name together with the driver name and the device name field identify which device was allocated (`<driver name>/<pool name>/<device name>`).\n\nMust not be longer than 253 characters and may contain one or more DNS sub-domains separated by slashes."
        }, 
        "shareID": {
          "type": "string", 
          "description": "ShareID uniquely identifies an individual allocation share of the device, used when the device supports multiple simultaneous allocations. It serves as an additional map key to differentiate concurrent shares of the same device."
        }
      }
    }, 
    "io.k8s.api.core.v1.ScopedResourceSelectorRequirement": {
      "required": [
        "scopeName", 
        "operator"
      ], 
      "type": "object", 
      "description": "A scoped-resource selector requirement is a selector that contains values, a scope name, and an operator that relates the scope name and values.", 
      "properties": {
        "operator": {
          "type": "string", 
          "description": "Represents a scope's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist."
        }, 
        "scopeName": {
          "type": "string", 
          "description": "The name of the scope that the selector applies to."
        }, 
        "values": {
          "items": {
            "type": "string"
          }, 
          "type": "array", 
          "description": "An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.", 
          "x-kubernetes-list-type": "atomic"
        }
      }
    }, 
    "io.k8s.api.networking.v1.IngressStatus": {
      "type": "object", 
      "description": "IngressStatus describe the current state of the Ingress.", 
      "properties": {
        "loadBalancer": {
          "description": "loadBalancer contains the current status of the load-balancer.", 
          "$ref": "#/definitions/io.k8s.api.networking.v1.IngressLoadBalancerStatus"
        }
      }
    }, 
    "io.k8s.api.batch.v1.JobList": {
      "type": "object", 
      "required": [
        "items"
      ], 
      "x-kubernetes-group-version-kind": [
        {
          "kind": "JobList", 
          "version": "v1", 
          "group": "batch"
        }
      ], 
      "description": "JobList is a collection of jobs.", 
      "properties": {
        "items": {
          "items": {
            "$ref": "#/definitions/io.k8s.api.batch.v1.Job"
          }, 
          "type": "array", 
          "description": "items is the list of Jobs."
        }, 
        "kind": {
          "enum": [
            "JobList"
          ], 
          "type": "string", 
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
        }, 
        "apiVersion": {
          "type": "string", 
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources"
        }, 
        "metadata": {
          "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata", 
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      }
    }, 
    "io.k8s.api.resource.v1.DeviceClassList": {
      "type": "object", 
      "required": [
        "items"
      ], 
      "x-kubernetes-group-version-kind": [
        {
          "kind": "DeviceClassList", 
          "version": "v1", 
          "group": "resource.k8s.io"
        }
      ], 
      "description": "DeviceClassList is a collection of classes.", 
      "properties": {
        "items": {
          "items": {
            "$ref": "#/definitions/io.k8s.api.resource.v1.DeviceClass"
          }, 
          "type": "array", 
          "description": "Items is the list of resource classes."
        }, 
        "kind": {
          "enum": [
            "DeviceClassList"
          ], 
          "type": "string", 
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
        }, 
        "apiVersion": {
          "type": "string", 
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources"
        }, 
        "metadata": {
          "description": "Standard list metadata", 
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      }
    }, 
    "io.k8s.api.core.v1.NFSVolumeSource": {
      "required": [
        "server", 
        "path"
      ], 
      "type": "object", 
      "description": "Represents an NFS mount that lasts the lifetime of a pod. NFS volumes do not support ownership management or SELinux relabeling.", 
      "properties": {
        "path": {
          "type": "string", 
          "description": "path that is exported by the NFS server. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs"
        }, 
        "readOnly": {
          "type": "boolean", 
          "description": "readOnly here will force the NFS export to be mounted with read-only permissions. Defaults to false. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs"
        }, 
        "server": {
          "type": "string", 
          "description": "server is the hostname or IP address of the NFS server. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs"
        }
      }
    }, 
    "io.k8s.api.flowcontrol.v1.PriorityLevelConfigurationSpec": {
      "x-kubernetes-unions": [
        {
          "discriminator": "type", 
          "fields-to-discriminateBy": {
            "limited": "Limited", 
            "exempt": "Exempt"
          }
        }
      ], 
      "required": [
        "type"
      ], 
      "type": "object", 
      "description": "PriorityLevelConfigurationSpec specifies the configuration of a priority level.", 
      "properties": {
        "limited": {
          "description": "`limited` specifies how requests are handled for a Limited priority level. This field must be non-empty if and only if `type` is `\"Limited\"`.", 
          "$ref": "#/definitions/io.k8s.api.flowcontrol.v1.LimitedPriorityLevelConfiguration"
        }, 
        "type": {
          "type": "string", 
          "description": "`type` indicates whether this priority level is subject to limitation on request execution.  A value of `\"Exempt\"` means that requests of this priority level are not subject to a limit (and thus are never queued) and do not detract from the capacity made available to other priority levels.  A value of `\"Limited\"` means that (a) requests of this priority level _are_ subject to limits and (b) some of the server's limited capacity is made available exclusively to this priority level. Required."
        }, 
        "exempt": {
          "description": "`exempt` specifies how requests are handled for an exempt priority level. This field MUST be empty if `type` is `\"Limited\"`. This field MAY be non-empty if `type` is `\"Exempt\"`. If empty and `type` is `\"Exempt\"` then the default values for `ExemptPriorityLevelConfiguration` apply.", 
          "$ref": "#/definitions/io.k8s.api.flowcontrol.v1.ExemptPriorityLevelConfiguration"
        }
      }
    }, 
    "io.k8s.api.resource.v1beta1.ResourceClaimTemplateSpec": {
      "required": [
        "spec"
      ], 
      "type": "object", 
      "description": "ResourceClaimTemplateSpec contains the metadata and fields for a ResourceClaim.", 
      "properties": {
        "spec": {
          "description": "Spec for the ResourceClaim. The entire content is copied unchanged into the ResourceClaim that gets created from this template. The same fields as in a ResourceClaim are also valid here.", 
          "$ref": "#/definitions/io.k8s.api.resource.v1beta1.ResourceClaimSpec"
        }, 
        "metadata": {
          "description": "ObjectMeta may contain labels and annotations that will be copied into the ResourceClaim when creating it. No other fields are allowed and will be rejected during validation.", 
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        }
      }
    }, 
    "io.k8s.api.discovery.v1.EndpointSlice": {
      "type": "object", 
      "required": [
        "addressType", 
        "endpoints"
      ], 
      "x-kubernetes-group-version-kind": [
        {
          "kind": "EndpointSlice", 
          "version": "v1", 
          "group": "discovery.k8s.io"
        }
      ], 
      "description": "EndpointSlice represents a set of service endpoints. Most EndpointSlices are created by the EndpointSlice controller to represent the Pods selected by Service objects. For a given service there may be multiple EndpointSlice objects which must be joined to produce the full set of endpoints; you can find all of the slices for a given service by listing EndpointSlices in the service's namespace whose `kubernetes.io/service-name` label contains the service's name.", 
      "properties": {
        "kind": {
          "enum": [
            "EndpointSlice"
          ], 
          "type": "string", 
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
        }, 
        "addressType": {
          "type": "string", 
          "description": "addressType specifies the type of address carried by this EndpointSlice. All addresses in this slice must be the same type. This field is immutable after creation. The following address types are currently supported: * IPv4: Represents an IPv4 Address. * IPv6: Represents an IPv6 Address. * FQDN: Represents a Fully Qualified Domain Name. (Deprecated) The EndpointSlice controller only generates, and kube-proxy only processes, slices of addressType \"IPv4\" and \"IPv6\". No semantics are defined for the \"FQDN\" type."
        }, 
        "endpoints": {
          "items": {
            "$ref": "#/definitions/io.k8s.api.discovery.v1.Endpoint"
          }, 
          "type": "array", 
          "description": "endpoints is a list of unique endpoints in this slice. Each slice may include a maximum of 1000 endpoints.", 
          "x-kubernetes-list-type": "atomic"
        }, 
        "ports": {
          "items": {
            "$ref": "#/definitions/io.k8s.api.discovery.v1.EndpointPort"
          }, 
          "type": "array", 
          "description": "ports specifies the list of network ports exposed by each endpoint in this slice. Each port must have a unique name. Each slice may include a maximum of 100 ports. Services always have at least 1 port, so EndpointSlices generated by the EndpointSlice controller will likewise always have at least 1 port. EndpointSlices used for other purposes may have an empty ports list.", 
          "x-kubernetes-list-type": "atomic"
        }, 
        "apiVersion": {
          "type": "string", 
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources"
        }, 
        "metadata": {
          "description": "Standard object's metadata.", 
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        }
      }
    }, 
    "io.k8s.api.rbac.v1.AggregationRule": {
      "type": "object", 
      "description": "AggregationRule describes how to locate ClusterRoles to aggregate into the ClusterRole", 
      "properties": {
        "clusterRoleSelectors": {
          "items": {
            "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector"
          }, 
          "type": "array", 
          "description": "ClusterRoleSelectors holds a list of selectors which will be used to find ClusterRoles and create the rules. If any of the selectors match, then the ClusterRole's permissions will be added", 
          "x-kubernetes-list-type": "atomic"
        }
      }
    }, 
    "io.k8s.api.core.v1.NodeConfigStatus": {
      "type": "object", 
      "description": "NodeConfigStatus describes the status of the config assigned by Node.Spec.ConfigSource.", 
      "properties": {
        "active": {
          "description": "Active reports the checkpointed config the node is actively using. Active will represent either the current version of the Assigned config, or the current LastKnownGood config, depending on whether attempting to use the Assigned config results in an error.", 
          "$ref": "#/definitions/io.k8s.api.core.v1.NodeConfigSource"
        }, 
        "assigned": {
          "description": "Assigned reports the checkpointed config the node will try to use. When Node.Spec.ConfigSource is updated, the node checkpoints the associated config payload to local disk, along with a record indicating intended config. The node refers to this record to choose its config checkpoint, and reports this record in Assigned. Assigned only updates in the status after the record has been checkpointed to disk. When the Kubelet is restarted, it tries to make the Assigned config the Active config by loading and validating the checkpointed payload identified by Assigned.", 
          "$ref": "#/definitions/io.k8s.api.core.v1.NodeConfigSource"
        }, 
        "error": {
          "type": "string", 
          "description": "Error describes any problems reconciling the Spec.ConfigSource to the Active config. Errors may occur, for example, attempting to checkpoint Spec.ConfigSource to the local Assigned record, attempting to checkpoint the payload associated with Spec.ConfigSource, attempting to load or validate the Assigned config, etc. Errors may occur at different points while syncing config. Earlier errors (e.g. download or checkpointing errors) will not result in a rollback to LastKnownGood, and may resolve across Kubelet retries. Later errors (e.g. loading or validating a checkpointed config) will result in a rollback to LastKnownGood. In the latter case, it is usually possible to resolve the error by fixing the config assigned in Spec.ConfigSource. You can find additional information for debugging by searching the error message in the Kubelet log. Error is a human-readable description of the error state; machines can check whether or not Error is empty, but should not rely on the stability of the Error text across Kubelet versions."
        }, 
        "lastKnownGood": {
          "description": "LastKnownGood reports the checkpointed config the node will fall back to when it encounters an error attempting to use the Assigned config. The Assigned config becomes the LastKnownGood config when the node determines that the Assigned config is stable and correct. This is currently implemented as a 10-minute soak period starting when the local record of Assigned config is updated. If the Assigned config is Active at the end of this period, it becomes the LastKnownGood. Note that if Spec.ConfigSource is reset to nil (use local defaults), the LastKnownGood is also immediately reset to nil, because the local default config is always assumed good. You should not make assumptions about the node's method of determining config stability and correctness, as this may change or become configurable in the future.", 
          "$ref": "#/definitions/io.k8s.api.core.v1.NodeConfigSource"
        }
      }
    }, 
    "io.k8s.kube-aggregator.pkg.apis.apiregistration.v1.APIServiceSpec": {
      "required": [
        "groupPriorityMinimum", 
        "versionPriority"
      ], 
      "type": "object", 
      "description": "APIServiceSpec contains information for locating and communicating with a server. Only https is supported, though you are able to disable certificate verification.", 
      "properties": {
        "version": {
          "type": "string", 
          "description": "Version is the API version this server hosts.  For example, \"v1\""
        }, 
        "group": {
          "type": "string", 
          "description": "Group is the API group name this server hosts"
        }, 
        "service": {
          "description": "Service is a reference to the service for this API server.  It must communicate on port 443. If the Service is nil, that means the handling for the API groupversion is handled locally on this server. The call will simply delegate to the normal handler chain to be fulfilled.", 
          "$ref": "#/definitions/io.k8s.kube-aggregator.pkg.apis.apiregistration.v1.ServiceReference"
        }, 
        "caBundle": {
          "format": "byte", 
          "type": "string", 
          "description": "CABundle is a PEM encoded CA bundle which will be used to validate an API server's serving certificate. If unspecified, system trust roots on the apiserver are used.", 
          "x-kubernetes-list-type": "atomic"
        }, 
        "groupPriorityMinimum": {
          "type": "integer", 
          "description": "GroupPriorityMinimum is the priority this group should have at least. Higher priority means that the group is preferred by clients over lower priority ones. Note that other versions of this group might specify even higher GroupPriorityMinimum values such that the whole group gets a higher priority. The primary sort is based on GroupPriorityMinimum, ordered highest number to lowest (20 before 10). The secondary sort is based on the alphabetical comparison of the name of the object.  (v1.bar before v1.foo) We'd recommend something like: *.k8s.io (except extensions) at 18000 and PaaSes (OpenShift, Deis) are recommended to be in the 2000s", 
          "format": "int32"
        }, 
        "insecureSkipTLSVerify": {
          "type": "boolean", 
          "description": "InsecureSkipTLSVerify disables TLS certificate verification when communicating with this server. This is strongly discouraged.  You should use the CABundle instead."
        }, 
        "versionPriority": {
          "type": "integer", 
          "description": "VersionPriority controls the ordering of this API version inside of its group.  Must be greater than zero. The primary sort is based on VersionPriority, ordered highest to lowest (20 before 10). Since it's inside of a group, the number can be small, probably in the 10s. In case of equal version priorities, the version string will be used to compute the order inside a group. If the version string is \"kube-like\", it will sort above non \"kube-like\" version strings, which are ordered lexicographically. \"Kube-like\" versions start with a \"v\", then are followed by a number (the major version), then optionally the string \"alpha\" or \"beta\" and another number (the minor version). These are sorted first by GA > beta > alpha (where GA is a version with no suffix such as beta or alpha), and then by comparing major version, then minor version. An example sorted list of versions: v10, v2, v1, v11beta2, v10beta3, v3beta1, v12alpha1, v11alpha2, foo1, foo10.", 
          "format": "int32"
        }
      }
    }, 
    "io.k8s.api.resource.v1.DeviceClassSpec": {
      "type": "object", 
      "description": "DeviceClassSpec is used in a [DeviceClass] to define what can be allocated and how to configure it.", 
      "properties": {
        "extendedResourceName": {
          "type": "string", 
          "description": "ExtendedResourceName is the extended resource name for the devices of this class. The devices of this class can be used to satisfy a pod's extended resource requests. It has the same format as the name of a pod's extended resource. It should be unique among all the device classes in a cluster. If two device classes have the same name, then the class created later is picked to satisfy a pod's extended resource requests. If two classes are created at the same time, then the name of the class lexicographically sorted first is picked.\n\nThis is an alpha field."
        }, 
        "config": {
          "items": {
            "$ref": "#/definitions/io.k8s.api.resource.v1.DeviceClassConfiguration"
          }, 
          "type": "array", 
          "description": "Config defines configuration parameters that apply to each device that is claimed via this class. Some classses may potentially be satisfied by multiple drivers, so each instance of a vendor configuration applies to exactly one driver.\n\nThey are passed to the driver, but are not considered while allocating the claim.", 
          "x-kubernetes-list-type": "atomic"
        }, 
        "selectors": {
          "items": {
            "$ref": "#/definitions/io.k8s.api.resource.v1.DeviceSelector"
          }, 
          "type": "array", 
          "description": "Each selector must be satisfied by a device which is claimed via this class.", 
          "x-kubernetes-list-type": "atomic"
        }
      }
    }, 
    "io.k8s.api.core.v1.AzureFilePersistentVolumeSource": {
      "required": [
        "secretName", 
        "shareName"
      ], 
      "type": "object", 
      "description": "AzureFile represents an Azure File Service mount on the host and bind mount to the pod.", 
      "properties": {
        "shareName": {
          "type": "string", 
          "description": "shareName is the azure Share Name"
        }, 
        "readOnly": {
          "type": "boolean", 
          "description": "readOnly defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts."
        }, 
        "secretNamespace": {
          "type": "string", 
          "description": "secretNamespace is the namespace of the secret that contains Azure Storage Account Name and Key default is the same as the Pod"
        }, 
        "secretName": {
          "type": "string", 
          "description": "secretName is the name of secret that contains Azure Storage Account Name and Key"
        }
      }
    }, 
    "io.k8s.api.core.v1.LoadBalancerIngress": {
      "type": "object", 
      "description": "LoadBalancerIngress represents the status of a load-balancer ingress point: traffic intended for the service should be sent to an ingress point.", 
      "properties": {
        "ip": {
          "type": "string", 
          "description": "IP is set for load-balancer ingress points that are IP based (typically GCE or OpenStack load-balancers)"
        }, 
        "hostname": {
          "type": "string", 
          "description": "Hostname is set for load-balancer ingress points that are DNS based (typically AWS load-balancers)"
        }, 
        "ipMode": {
          "type": "string", 
          "description": "IPMode specifies how the load-balancer IP behaves, and may only be specified when the ip field is specified. Setting this to \"VIP\" indicates that traffic is delivered to the node with the destination set to the load-balancer's IP and port. Setting this to \"Proxy\" indicates that traffic is delivered to the node or pod with the destination set to the node's IP and node port or the pod's IP and port. Service implementations may use this information to adjust traffic routing."
        }, 
        "ports": {
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.PortStatus"
          }, 
          "type": "array", 
          "description": "Ports is a list of records of service ports If used, every port defined in the service should have an entry in it", 
          "x-kubernetes-list-type": "atomic"
        }
      }
    }, 
    "io.k8s.api.resource.v1beta1.DeviceClass": {
      "type": "object", 
      "required": [
        "spec"
      ], 
      "x-kubernetes-group-version-kind": [
        {
          "kind": "DeviceClass", 
          "version": "v1beta1", 
          "group": "resource.k8s.io"
        }
      ], 
      "description": "DeviceClass is a vendor- or admin-provided resource that contains device configuration and selectors. It can be referenced in the device requests of a claim to apply these presets. Cluster scoped.\n\nThis is an alpha type and requires enabling the DynamicResourceAllocation feature gate.", 
      "properties": {
        "kind": {
          "enum": [
            "DeviceClass"
          ], 
          "type": "string", 
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
        }, 
        "spec": {
          "description": "Spec defines what can be allocated and how to configure it.\n\nThis is mutable. Consumers have to be prepared for classes changing at any time, either because they get updated or replaced. Claim allocations are done once based on whatever was set in classes at the time of allocation.\n\nChanging the spec automatically increments the metadata.generation number.", 
          "$ref": "#/definitions/io.k8s.api.resource.v1beta1.DeviceClassSpec"
        }, 
        "apiVersion": {
          "type": "string", 
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources"
        }, 
        "metadata": {
          "description": "Standard object metadata", 
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        }
      }
    }, 
    "io.k8s.api.resource.v1.NetworkDeviceData": {
      "type": "object", 
      "description": "NetworkDeviceData provides network-related details for the allocated device. This information may be filled by drivers or other components to configure or identify the device within a network context.", 
      "properties": {
        "ips": {
          "items": {
            "type": "string"
          }, 
          "type": "array", 
          "description": "IPs lists the network addresses assigned to the device's network interface. This can include both IPv4 and IPv6 addresses. The IPs are in the CIDR notation, which includes both the address and the associated subnet mask. e.g.: \"192.0.2.5/24\" for IPv4 and \"2001:db8::5/64\" for IPv6.", 
          "x-kubernetes-list-type": "atomic"
        }, 
        "interfaceName": {
          "type": "string", 
          "description": "InterfaceName specifies the name of the network interface associated with the allocated device. This might be the name of a physical or virtual network interface being configured in the pod.\n\nMust not be longer than 256 characters."
        }, 
        "hardwareAddress": {
          "type": "string", 
          "description": "HardwareAddress represents the hardware address (e.g. MAC Address) of the device's network interface.\n\nMust not be longer than 128 characters."
        }
      }
    }, 
    "io.k8s.api.storage.v1.CSIDriverSpec": {
      "type": "object", 
      "description": "CSIDriverSpec is the specification of a CSIDriver.", 
      "properties": {
        "requiresRepublish": {
          "type": "boolean", 
          "description": "requiresRepublish indicates the CSI driver wants `NodePublishVolume` being periodically called to reflect any possible change in the mounted volume. This field defaults to false.\n\nNote: After a successful initial NodePublishVolume call, subsequent calls to NodePublishVolume should only update the contents of the volume. New mount points will not be seen by a running container."
        }, 
        "seLinuxMount": {
          "type": "boolean", 
          "description": "seLinuxMount specifies if the CSI driver supports \"-o context\" mount option.\n\nWhen \"true\", the CSI driver must ensure that all volumes provided by this CSI driver can be mounted separately with different `-o context` options. This is typical for storage backends that provide volumes as filesystems on block devices or as independent shared volumes. Kubernetes will call NodeStage / NodePublish with \"-o context=xyz\" mount option when mounting a ReadWriteOncePod volume used in Pod that has explicitly set SELinux context. In the future, it may be expanded to other volume AccessModes. In any case, Kubernetes will ensure that the volume is mounted only with a single SELinux context.\n\nWhen \"false\", Kubernetes won't pass any special SELinux mount options to the driver. This is typical for volumes that represent subdirectories of a bigger shared filesystem.\n\nDefault is \"false\"."
        }, 
        "nodeAllocatableUpdatePeriodSeconds": {
          "type": "integer", 
          "description": "nodeAllocatableUpdatePeriodSeconds specifies the interval between periodic updates of the CSINode allocatable capacity for this driver. When set, both periodic updates and updates triggered by capacity-related failures are enabled. If not set, no updates occur (neither periodic nor upon detecting capacity-related failures), and the allocatable.count remains static. The minimum allowed value for this field is 10 seconds.\n\nThis is a beta feature and requires the MutableCSINodeAllocatableCount feature gate to be enabled.\n\nThis field is mutable.", 
          "format": "int64"
        }, 
        "attachRequired": {
          "type": "boolean", 
          "description": "attachRequired indicates this CSI volume driver requires an attach operation (because it implements the CSI ControllerPublishVolume() method), and that the Kubernetes attach detach controller should call the attach volume interface which checks the volumeattachment status and waits until the volume is attached before proceeding to mounting. The CSI external-attacher coordinates with CSI volume driver and updates the volumeattachment status when the attach operation is complete. If the value is specified to false, the attach operation will be skipped. Otherwise the attach operation will be called.\n\nThis field is immutable."
        }, 
        "storageCapacity": {
          "type": "boolean", 
          "description": "storageCapacity indicates that the CSI volume driver wants pod scheduling to consider the storage capacity that the driver deployment will report by creating CSIStorageCapacity objects with capacity information, if set to true.\n\nThe check can be enabled immediately when deploying a driver. In that case, provisioning new volumes with late binding will pause until the driver deployment has published some suitable CSIStorageCapacity object.\n\nAlternatively, the driver can be deployed with the field unset or false and it can be flipped later when storage capacity information has been published.\n\nThis field was immutable in Kubernetes <= 1.22 and now is mutable."
        }, 
        "podInfoOnMount": {
          "type": "boolean", 
          "description": "podInfoOnMount indicates this CSI volume driver requires additional pod information (like podName, podUID, etc.) during mount operations, if set to true. If set to false, pod information will not be passed on mount. Default is false.\n\nThe CSI driver specifies podInfoOnMount as part of driver deployment. If true, Kubelet will pass pod information as VolumeContext in the CSI NodePublishVolume() calls. The CSI driver is responsible for parsing and validating the information passed in as VolumeContext.\n\nThe following VolumeContext will be passed if podInfoOnMount is set to true. This list might grow, but the prefix will be used. \"csi.storage.k8s.io/pod.name\": pod.Name \"csi.storage.k8s.io/pod.namespace\": pod.Namespace \"csi.storage.k8s.io/pod.uid\": string(pod.UID) \"csi.storage.k8s.io/ephemeral\": \"true\" if the volume is an ephemeral inline volume\n                                defined by a CSIVolumeSource, otherwise \"false\"\n\n\"csi.storage.k8s.io/ephemeral\" is a new feature in Kubernetes 1.16. It is only required for drivers which support both the \"Persistent\" and \"Ephemeral\" VolumeLifecycleMode. Other drivers can leave pod info disabled and/or ignore this field. As Kubernetes 1.15 doesn't support this field, drivers can only support one mode when deployed on such a cluster and the deployment determines which mode that is, for example via a command line parameter of the driver.\n\nThis field was immutable in Kubernetes < 1.29 and now is mutable."
        }, 
        "fsGroupPolicy": {
          "type": "string", 
          "description": "fsGroupPolicy defines if the underlying volume supports changing ownership and permission of the volume before being mounted. Refer to the specific FSGroupPolicy values for additional details.\n\nThis field was immutable in Kubernetes < 1.29 and now is mutable.\n\nDefaults to ReadWriteOnceWithFSType, which will examine each volume to determine if Kubernetes should modify ownership and permissions of the volume. With the default policy the defined fsGroup will only be applied if a fstype is defined and the volume's access mode contains ReadWriteOnce."
        }, 
        "volumeLifecycleModes": {
          "items": {
            "type": "string"
          }, 
          "type": "array", 
          "description": "volumeLifecycleModes defines what kind of volumes this CSI volume driver supports. The default if the list is empty is \"Persistent\", which is the usage defined by the CSI specification and implemented in Kubernetes via the usual PV/PVC mechanism.\n\nThe other mode is \"Ephemeral\". In this mode, volumes are defined inline inside the pod spec with CSIVolumeSource and their lifecycle is tied to the lifecycle of that pod. A driver has to be aware of this because it is only going to get a NodePublishVolume call for such a volume.\n\nFor more information about implementing this mode, see https://kubernetes-csi.github.io/docs/ephemeral-local-volumes.html A driver can support one or more of these modes and more modes may be added in the future.\n\nThis field is beta. This field is immutable.", 
          "x-kubernetes-list-type": "set"
        }, 
        "tokenRequests": {
          "items": {
            "$ref": "#/definitions/io.k8s.api.storage.v1.TokenRequest"
          }, 
          "type": "array", 
          "description": "tokenRequests indicates the CSI driver needs pods' service account tokens it is mounting volume for to do necessary authentication. Kubelet will pass the tokens in VolumeContext in the CSI NodePublishVolume calls. The CSI driver should parse and validate the following VolumeContext: \"csi.storage.k8s.io/serviceAccount.tokens\": {\n  \"<audience>\": {\n    \"token\": <token>,\n    \"expirationTimestamp\": <expiration timestamp in RFC3339>,\n  },\n  ...\n}\n\nNote: Audience in each TokenRequest should be different and at most one token is empty string. To receive a new token after expiry, RequiresRepublish can be used to trigger NodePublishVolume periodically.", 
          "x-kubernetes-list-type": "atomic"
        }
      }
    }, 
    "io.k8s.api.resource.v1beta2.ExactDeviceRequest": {
      "required": [
        "deviceClassName"
      ], 
      "type": "object", 
      "description": "ExactDeviceRequest is a request for one or more identical devices.", 
      "properties": {
        "count": {
          "type": "integer", 
          "description": "Count is used only when the count mode is \"ExactCount\". Must be greater than zero. If AllocationMode is ExactCount and this field is not specified, the default is one.", 
          "format": "int64"
        }, 
        "capacity": {
          "description": "Capacity define resource requirements against each capacity.\n\nIf this field is unset and the device supports multiple allocations, the default value will be applied to each capacity according to requestPolicy. For the capacity that has no requestPolicy, default is the full capacity value.\n\nApplies to each device allocation. If Count > 1, the request fails if there aren't enough devices that meet the requirements. If AllocationMode is set to All, the request fails if there are devices that otherwise match the request, and have this capacity, with a value >= the requested amount, but which cannot be allocated to this request.", 
          "$ref": "#/definitions/io.k8s.api.resource.v1beta2.CapacityRequirements"
        }, 
        "tolerations": {
          "items": {
            "$ref": "#/definitions/io.k8s.api.resource.v1beta2.DeviceToleration"
          }, 
          "type": "array", 
          "description": "If specified, the request's tolerations.\n\nTolerations for NoSchedule are required to allocate a device which has a taint with that effect. The same applies to NoExecute.\n\nIn addition, should any of the allocated devices get tainted with NoExecute after allocation and that effect is not tolerated, then all pods consuming the ResourceClaim get deleted to evict them. The scheduler will not let new pods reserve the claim while it has these tainted devices. Once all pods are evicted, the claim will get deallocated.\n\nThe maximum number of tolerations is 16.\n\nThis is an alpha field and requires enabling the DRADeviceTaints feature gate.", 
          "x-kubernetes-list-type": "atomic"
        }, 
        "deviceClassName": {
          "type": "string", 
          "description": "DeviceClassName references a specific DeviceClass, which can define additional configuration and selectors to be inherited by this request.\n\nA DeviceClassName is required.\n\nAdministrators may use this to restrict which devices may get requested by only installing classes with selectors for permitted devices. If users are free to request anything without restrictions, then administrators can create an empty DeviceClass for users to reference."
        }, 
        "allocationMode": {
          "type": "string", 
          "description": "AllocationMode and its related fields define how devices are allocated to satisfy this request. Supported values are:\n\n- ExactCount: This request is for a specific number of devices.\n  This is the default. The exact number is provided in the\n  count field.\n\n- All: This request is for all of the matching devices in a pool.\n  At least one device must exist on the node for the allocation to succeed.\n  Allocation will fail if some devices are already allocated,\n  unless adminAccess is requested.\n\nIf AllocationMode is not specified, the default mode is ExactCount. If the mode is ExactCount and count is not specified, the default count is one. Any other requests must specify this field.\n\nMore modes may get added in the future. Clients must refuse to handle requests with unknown modes."
        }, 
        "adminAccess": {
          "type": "boolean", 
          "description": "AdminAccess indicates that this is a claim for administrative access to the device(s). Claims with AdminAccess are expected to be used for monitoring or other management services for a device.  They ignore all ordinary claims to the device with respect to access modes and any resource allocations.\n\nThis is an alpha field and requires enabling the DRAAdminAccess feature gate. Admin access is disabled if this field is unset or set to false, otherwise it is enabled."
        }, 
        "selectors": {
          "items": {
            "$ref": "#/definitions/io.k8s.api.resource.v1beta2.DeviceSelector"
          }, 
          "type": "array", 
          "description": "Selectors define criteria which must be satisfied by a specific device in order for that device to be considered for this request. All selectors must be satisfied for a device to be considered.", 
          "x-kubernetes-list-type": "atomic"
        }
      }
    }, 
    "io.k8s.api.events.v1.EventList": {
      "type": "object", 
      "required": [
        "items"
      ], 
      "x-kubernetes-group-version-kind": [
        {
          "kind": "EventList", 
          "version": "v1", 
          "group": "events.k8s.io"
        }
      ], 
      "description": "EventList is a list of Event objects.", 
      "properties": {
        "items": {
          "items": {
            "$ref": "#/definitions/io.k8s.api.events.v1.Event"
          }, 
          "type": "array", 
          "description": "items is a list of schema objects."
        }, 
        "kind": {
          "enum": [
            "EventList"
          ], 
          "type": "string", 
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
        }, 
        "apiVersion": {
          "type": "string", 
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources"
        }, 
        "metadata": {
          "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata", 
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      }
    }, 
    "io.k8s.api.core.v1.NodeSpec": {
      "type": "object", 
      "description": "NodeSpec describes the attributes that a node is created with.", 
      "properties": {
        "unschedulable": {
          "type": "boolean", 
          "description": "Unschedulable controls node schedulability of new pods. By default, node is schedulable. More info: https://kubernetes.io/docs/concepts/nodes/node/#manual-node-administration"
        }, 
        "podCIDR": {
          "type": "string", 
          "description": "PodCIDR represents the pod IP range assigned to the node."
        }, 
        "providerID": {
          "type": "string", 
          "description": "ID of the node assigned by the cloud provider in the format: <ProviderName>://<ProviderSpecificNodeID>"
        }, 
        "externalID": {
          "type": "string", 
          "description": "Deprecated. Not all kubelets will set this field. Remove field after 1.13. see: https://issues.k8s.io/61966"
        }, 
        "configSource": {
          "description": "Deprecated: Previously used to specify the source of the node's configuration for the DynamicKubeletConfig feature. This feature is removed.", 
          "$ref": "#/definitions/io.k8s.api.core.v1.NodeConfigSource"
        }, 
        "podCIDRs": {
          "items": {
            "type": "string"
          }, 
          "type": "array", 
          "description": "podCIDRs represents the IP ranges assigned to the node for usage by Pods on that node. If this field is specified, the 0th entry must match the podCIDR field. It may contain at most 1 value for each of IPv4 and IPv6.", 
          "x-kubernetes-list-type": "set", 
          "x-kubernetes-patch-strategy": "merge"
        }, 
        "taints": {
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.Taint"
          }, 
          "type": "array", 
          "description": "If specified, the node's taints.", 
          "x-kubernetes-list-type": "atomic"
        }
      }
    }, 
    "io.k8s.api.apps.v1.StatefulSetStatus": {
      "required": [
        "replicas"
      ], 
      "type": "object", 
      "description": "StatefulSetStatus represents the current state of a StatefulSet.", 
      "properties": {
        "updateRevision": {
          "type": "string", 
          "description": "updateRevision, if not empty, indicates the version of the StatefulSet used to generate Pods in the sequence [replicas-updatedReplicas,replicas)"
        }, 
        "collisionCount": {
          "type": "integer", 
          "description": "collisionCount is the count of hash collisions for the StatefulSet. The StatefulSet controller uses this field as a collision avoidance mechanism when it needs to create the name for the newest ControllerRevision.", 
          "format": "int32"
        }, 
        "replicas": {
          "type": "integer", 
          "description": "replicas is the number of Pods created by the StatefulSet controller.", 
          "format": "int32"
        }, 
        "observedGeneration": {
          "type": "integer", 
          "description": "observedGeneration is the most recent generation observed for this StatefulSet. It corresponds to the StatefulSet's generation, which is updated on mutation by the API Server.", 
          "format": "int64"
        }, 
        "currentReplicas": {
          "type": "integer", 
          "description": "currentReplicas is the number of Pods created by the StatefulSet controller from the StatefulSet version indicated by currentRevision.", 
          "format": "int32"
        }, 
        "updatedReplicas": {
          "type": "integer", 
          "description": "updatedReplicas is the number of Pods created by the StatefulSet controller from the StatefulSet version indicated by updateRevision.", 
          "format": "int32"
        }, 
        "availableReplicas": {
          "type": "integer", 
          "description": "Total number of available pods (ready for at least minReadySeconds) targeted by this statefulset.", 
          "format": "int32"
        }, 
        "currentRevision": {
          "type": "string", 
          "description": "currentRevision, if not empty, indicates the version of the StatefulSet used to generate Pods in the sequence [0,currentReplicas)."
        }, 
        "readyReplicas": {
          "type": "integer", 
          "description": "readyReplicas is the number of pods created for this StatefulSet with a Ready Condition.", 
          "format": "int32"
        }, 
        "conditions": {
          "description": "Represents the latest available observations of a statefulset's current state.", 
          "x-kubernetes-list-map-keys": [
            "type"
          ], 
          "x-kubernetes-patch-merge-key": "type", 
          "items": {
            "$ref": "#/definitions/io.k8s.api.apps.v1.StatefulSetCondition"
          }, 
          "type": "array", 
          "x-kubernetes-list-type": "map", 
          "x-kubernetes-patch-strategy": "merge"
        }
      }
    }, 
    "io.k8s.api.networking.v1.IngressLoadBalancerStatus": {
      "type": "object", 
      "description": "IngressLoadBalancerStatus represents the status of a load-balancer.", 
      "properties": {
        "ingress": {
          "items": {
            "$ref": "#/definitions/io.k8s.api.networking.v1.IngressLoadBalancerIngress"
          }, 
          "type": "array", 
          "description": "ingress is a list containing ingress points for the load-balancer.", 
          "x-kubernetes-list-type": "atomic"
        }
      }
    }, 
    "io.k8s.api.autoscaling.v1.HorizontalPodAutoscaler": {
      "type": "object", 
      "x-kubernetes-group-version-kind": [
        {
          "kind": "HorizontalPodAutoscaler", 
          "version": "v1", 
          "group": "autoscaling"
        }
      ], 
      "description": "configuration of a horizontal pod autoscaler.", 
      "properties": {
        "status": {
          "description": "status is the current information about the autoscaler.", 
          "$ref": "#/definitions/io.k8s.api.autoscaling.v1.HorizontalPodAutoscalerStatus"
        }, 
        "kind": {
          "enum": [
            "HorizontalPodAutoscaler"
          ], 
          "type": "string", 
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
        }, 
        "spec": {
          "description": "spec defines the behaviour of autoscaler. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status.", 
          "$ref": "#/definitions/io.k8s.api.autoscaling.v1.HorizontalPodAutoscalerSpec"
        }, 
        "apiVersion": {
          "type": "string", 
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources"
        }, 
        "metadata": {
          "description": "Standard object metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata", 
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        }
      }
    }, 
    "io.k8s.api.rbac.v1.Subject": {
      "type": "object", 
      "required": [
        "kind", 
        "name"
      ], 
      "x-kubernetes-map-type": "atomic", 
      "description": "Subject contains a reference to the object or user identities a role binding applies to.  This can either hold a direct API object reference, or a value for non-objects such as user and group names.", 
      "properties": {
        "apiGroup": {
          "type": "string", 
          "description": "APIGroup holds the API group of the referenced subject. Defaults to \"\" for ServiceAccount subjects. Defaults to \"rbac.authorization.k8s.io\" for User and Group subjects."
        }, 
        "kind": {
          "type": "string", 
          "description": "Kind of object being referenced. Values defined by this API group are \"User\", \"Group\", and \"ServiceAccount\". If the Authorizer does not recognized the kind value, the Authorizer should report an error."
        }, 
        "namespace": {
          "type": "string", 
          "description": "Namespace of the referenced object.  If the object kind is non-namespace, such as \"User\" or \"Group\", and this value is not empty the Authorizer should report an error."
        }, 
        "name": {
          "type": "string", 
          "description": "Name of the object being referenced."
        }
      }
    }, 
    "io.k8s.api.resource.v1beta1.DeviceAttribute": {
      "type": "object", 
      "description": "DeviceAttribute must have exactly one field set.", 
      "properties": {
        "int": {
          "type": "integer", 
          "description": "IntValue is a number.", 
          "format": "int64"
        }, 
        "version": {
          "type": "string", 
          "description": "VersionValue is a semantic version according to semver.org spec 2.0.0. Must not be longer than 64 characters."
        }, 
        "bool": {
          "type": "boolean", 
          "description": "BoolValue is a true/false value."
        }, 
        "string": {
          "type": "string", 
          "description": "StringValue is a string. Must not be longer than 64 characters."
        }
      }
    }, 
    "io.k8s.apimachinery.pkg.apis.meta.v1.APIVersions": {
      "type": "object", 
      "required": [
        "versions", 
        "serverAddressByClientCIDRs"
      ], 
      "x-kubernetes-group-version-kind": [
        {
          "kind": "APIVersions", 
          "version": "v1", 
          "group": ""
        }
      ], 
      "description": "APIVersions lists the versions that are available, to allow clients to discover the API at /api, which is the root path of the legacy v1 API.", 
      "properties": {
        "serverAddressByClientCIDRs": {
          "items": {
            "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ServerAddressByClientCIDR"
          }, 
          "type": "array", 
          "description": "a map of client CIDR to server address that is serving this group. This is to help clients reach servers in the most network-efficient way possible. Clients can use the appropriate server address as per the CIDR that they match. In case of multiple matches, clients should use the longest matching CIDR. The server returns only those CIDRs that it thinks that the client can match. For example: the master will return an internal IP CIDR only, if the client reaches the server using an internal IP. Server looks at X-Forwarded-For header or X-Real-Ip header or request.RemoteAddr (in that order) to get the client IP.", 
          "x-kubernetes-list-type": "atomic"
        }, 
        "kind": {
          "enum": [
            "APIVersions"
          ], 
          "type": "string", 
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
        }, 
        "apiVersion": {
          "type": "string", 
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources"
        }, 
        "versions": {
          "items": {
            "type": "string"
          }, 
          "type": "array", 
          "description": "versions are the api versions that are available.", 
          "x-kubernetes-list-type": "atomic"
        }
      }
    }, 
    "io.k8s.api.admissionregistration.v1.MutatingWebhookConfiguration": {
      "type": "object", 
      "x-kubernetes-group-version-kind": [
        {
          "kind": "MutatingWebhookConfiguration", 
          "version": "v1", 
          "group": "admissionregistration.k8s.io"
        }
      ], 
      "description": "MutatingWebhookConfiguration describes the configuration of and admission webhook that accept or reject and may change the object.", 
      "properties": {
        "kind": {
          "enum": [
            "MutatingWebhookConfiguration"
          ], 
          "type": "string", 
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
        }, 
        "webhooks": {
          "description": "Webhooks is a list of webhooks and the affected resources and operations.", 
          "x-kubernetes-list-map-keys": [
            "name"
          ], 
          "x-kubernetes-patch-merge-key": "name", 
          "items": {
            "$ref": "#/definitions/io.k8s.api.admissionregistration.v1.MutatingWebhook"
          }, 
          "type": "array", 
          "x-kubernetes-list-type": "map", 
          "x-kubernetes-patch-strategy": "merge"
        }, 
        "apiVersion": {
          "type": "string", 
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources"
        }, 
        "metadata": {
          "description": "Standard object metadata; More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata.", 
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        }
      }
    }, 
    "io.k8s.api.core.v1.ContainerRestartRuleOnExitCodes": {
      "required": [
        "operator"
      ], 
      "type": "object", 
      "description": "ContainerRestartRuleOnExitCodes describes the condition for handling an exited container based on its exit codes.", 
      "properties": {
        "operator": {
          "type": "string", 
          "description": "Represents the relationship between the container exit code(s) and the specified values. Possible values are: - In: the requirement is satisfied if the container exit code is in the\n  set of specified values.\n- NotIn: the requirement is satisfied if the container exit code is\n  not in the set of specified values."
        }, 
        "values": {
          "items": {
            "type": "integer", 
            "format": "int32"
          }, 
          "type": "array", 
          "description": "Specifies the set of values to check for container exit codes. At most 255 elements are allowed.", 
          "x-kubernetes-list-type": "set"
        }
      }
    }, 
    "io.k8s.api.core.v1.ProjectedVolumeSource": {
      "type": "object", 
      "description": "Represents a projected volume source", 
      "properties": {
        "sources": {
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.VolumeProjection"
          }, 
          "type": "array", 
          "description": "sources is the list of volume projections. Each entry in this list handles one source.", 
          "x-kubernetes-list-type": "atomic"
        }, 
        "defaultMode": {
          "type": "integer", 
          "description": "defaultMode are the mode bits used to set permissions on created files by default. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.", 
          "format": "int32"
        }
      }
    }, 
    "io.k8s.api.networking.v1.IPAddressSpec": {
      "required": [
        "parentRef"
      ], 
      "type": "object", 
      "description": "IPAddressSpec describe the attributes in an IP Address.", 
      "properties": {
        "parentRef": {
          "description": "ParentRef references the resource that an IPAddress is attached to. An IPAddress must reference a parent object.", 
          "$ref": "#/definitions/io.k8s.api.networking.v1.ParentReference"
        }
      }
    }, 
    "io.k8s.api.core.v1.SecretProjection": {
      "type": "object", 
      "description": "Adapts a secret into a projected volume.\n\nThe contents of the target Secret's Data field will be presented in a projected volume as files using the keys in the Data field as the file names. Note that this is identical to a secret volume source without the default mode.", 
      "properties": {
        "items": {
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.KeyToPath"
          }, 
          "type": "array", 
          "description": "items if unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the Secret, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.", 
          "x-kubernetes-list-type": "atomic"
        }, 
        "optional": {
          "type": "boolean", 
          "description": "optional field specify whether the Secret or its key must be defined"
        }, 
        "name": {
          "type": "string", 
          "description": "Name of the referent. This field is effectively required, but due to backwards compatibility is allowed to be empty. Instances of this type with an empty value here are almost certainly wrong. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"
        }
      }
    }, 
    "io.k8s.api.core.v1.PersistentVolumeSpec": {
      "type": "object", 
      "description": "PersistentVolumeSpec is the specification of a persistent volume.", 
      "properties": {
        "photonPersistentDisk": {
          "description": "photonPersistentDisk represents a PhotonController persistent disk attached and mounted on kubelets host machine. Deprecated: PhotonPersistentDisk is deprecated and the in-tree photonPersistentDisk type is no longer supported.", 
          "$ref": "#/definitions/io.k8s.api.core.v1.PhotonPersistentDiskVolumeSource"
        }, 
        "volumeMode": {
          "type": "string", 
          "description": "volumeMode defines if a volume is intended to be used with a formatted filesystem or to remain in raw block state. Value of Filesystem is implied when not included in spec."
        }, 
        "azureDisk": {
          "description": "azureDisk represents an Azure Data Disk mount on the host and bind mount to the pod. Deprecated: AzureDisk is deprecated. All operations for the in-tree azureDisk type are redirected to the disk.csi.azure.com CSI driver.", 
          "$ref": "#/definitions/io.k8s.api.core.v1.AzureDiskVolumeSource"
        }, 
        "fc": {
          "description": "fc represents a Fibre Channel resource that is attached to a kubelet's host machine and then exposed to the pod.", 
          "$ref": "#/definitions/io.k8s.api.core.v1.FCVolumeSource"
        }, 
        "portworxVolume": {
          "description": "portworxVolume represents a portworx volume attached and mounted on kubelets host machine. Deprecated: PortworxVolume is deprecated. All operations for the in-tree portworxVolume type are redirected to the pxd.portworx.com CSI driver when the CSIMigrationPortworx feature-gate is on.", 
          "$ref": "#/definitions/io.k8s.api.core.v1.PortworxVolumeSource"
        }, 
        "glusterfs": {
          "description": "glusterfs represents a Glusterfs volume that is attached to a host and exposed to the pod. Provisioned by an admin. Deprecated: Glusterfs is deprecated and the in-tree glusterfs type is no longer supported. More info: https://examples.k8s.io/volumes/glusterfs/README.md", 
          "$ref": "#/definitions/io.k8s.api.core.v1.GlusterfsPersistentVolumeSource"
        }, 
        "mountOptions": {
          "items": {
            "type": "string"
          }, 
          "type": "array", 
          "description": "mountOptions is the list of mount options, e.g. [\"ro\", \"soft\"]. Not validated - mount will simply fail if one is invalid. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes/#mount-options", 
          "x-kubernetes-list-type": "atomic"
        }, 
        "scaleIO": {
          "description": "scaleIO represents a ScaleIO persistent volume attached and mounted on Kubernetes nodes. Deprecated: ScaleIO is deprecated and the in-tree scaleIO type is no longer supported.", 
          "$ref": "#/definitions/io.k8s.api.core.v1.ScaleIOPersistentVolumeSource"
        }, 
        "csi": {
          "description": "csi represents storage that is handled by an external CSI driver.", 
          "$ref": "#/definitions/io.k8s.api.core.v1.CSIPersistentVolumeSource"
        }, 
        "cinder": {
          "description": "cinder represents a cinder volume attached and mounted on kubelets host machine. Deprecated: Cinder is deprecated. All operations for the in-tree cinder type are redirected to the cinder.csi.openstack.org CSI driver. More info: https://examples.k8s.io/mysql-cinder-pd/README.md", 
          "$ref": "#/definitions/io.k8s.api.core.v1.CinderPersistentVolumeSource"
        }, 
        "nodeAffinity": {
          "description": "nodeAffinity defines constraints that limit what nodes this volume can be accessed from. This field influences the scheduling of pods that use this volume.", 
          "$ref": "#/definitions/io.k8s.api.core.v1.VolumeNodeAffinity"
        }, 
        "flocker": {
          "description": "flocker represents a Flocker volume attached to a kubelet's host machine and exposed to the pod for its usage. This depends on the Flocker control service being running. Deprecated: Flocker is deprecated and the in-tree flocker type is no longer supported.", 
          "$ref": "#/definitions/io.k8s.api.core.v1.FlockerVolumeSource"
        }, 
        "volumeAttributesClassName": {
          "type": "string", 
          "description": "Name of VolumeAttributesClass to which this persistent volume belongs. Empty value is not allowed. When this field is not set, it indicates that this volume does not belong to any VolumeAttributesClass. This field is mutable and can be changed by the CSI driver after a volume has been updated successfully to a new class. For an unbound PersistentVolume, the volumeAttributesClassName will be matched with unbound PersistentVolumeClaims during the binding process."
        }, 
        "storageClassName": {
          "type": "string", 
          "description": "storageClassName is the name of StorageClass to which this persistent volume belongs. Empty value means that this volume does not belong to any StorageClass."
        }, 
        "quobyte": {
          "description": "quobyte represents a Quobyte mount on the host that shares a pod's lifetime. Deprecated: Quobyte is deprecated and the in-tree quobyte type is no longer supported.", 
          "$ref": "#/definitions/io.k8s.api.core.v1.QuobyteVolumeSource"
        }, 
        "cephfs": {
          "description": "cephFS represents a Ceph FS mount on the host that shares a pod's lifetime. Deprecated: CephFS is deprecated and the in-tree cephfs type is no longer supported.", 
          "$ref": "#/definitions/io.k8s.api.core.v1.CephFSPersistentVolumeSource"
        }, 
        "capacity": {
          "additionalProperties": {
            "$ref": "#/definitions/io.k8s.apimachinery.pkg.api.resource.Quantity"
          }, 
          "type": "object", 
          "description": "capacity is the description of the persistent volume's resources and capacity. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#capacity"
        }, 
        "accessModes": {
          "items": {
            "type": "string"
          }, 
          "type": "array", 
          "description": "accessModes contains all ways the volume can be mounted. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes", 
          "x-kubernetes-list-type": "atomic"
        }, 
        "iscsi": {
          "description": "iscsi represents an ISCSI Disk resource that is attached to a kubelet's host machine and then exposed to the pod. Provisioned by an admin.", 
          "$ref": "#/definitions/io.k8s.api.core.v1.ISCSIPersistentVolumeSource"
        }, 
        "hostPath": {
          "description": "hostPath represents a directory on the host. Provisioned by a developer or tester. This is useful for single-node development and testing only! On-host storage is not supported in any way and WILL NOT WORK in a multi-node cluster. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath", 
          "$ref": "#/definitions/io.k8s.api.core.v1.HostPathVolumeSource"
        }, 
        "storageos": {
          "description": "storageOS represents a StorageOS volume that is attached to the kubelet's host machine and mounted into the pod. Deprecated: StorageOS is deprecated and the in-tree storageos type is no longer supported. More info: https://examples.k8s.io/volumes/storageos/README.md", 
          "$ref": "#/definitions/io.k8s.api.core.v1.StorageOSPersistentVolumeSource"
        }, 
        "claimRef": {
          "x-kubernetes-map-type": "granular", 
          "description": "claimRef is part of a bi-directional binding between PersistentVolume and PersistentVolumeClaim. Expected to be non-nil when bound. claim.VolumeName is the authoritative bind between PV and PVC. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#binding", 
          "$ref": "#/definitions/io.k8s.api.core.v1.ObjectReference"
        }, 
        "nfs": {
          "description": "nfs represents an NFS mount on the host. Provisioned by an admin. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs", 
          "$ref": "#/definitions/io.k8s.api.core.v1.NFSVolumeSource"
        }, 
        "gcePersistentDisk": {
          "description": "gcePersistentDisk represents a GCE Disk resource that is attached to a kubelet's host machine and then exposed to the pod. Provisioned by an admin. Deprecated: GCEPersistentDisk is deprecated. All operations for the in-tree gcePersistentDisk type are redirected to the pd.csi.storage.gke.io CSI driver. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk", 
          "$ref": "#/definitions/io.k8s.api.core.v1.GCEPersistentDiskVolumeSource"
        }, 
        "persistentVolumeReclaimPolicy": {
          "type": "string", 
          "description": "persistentVolumeReclaimPolicy defines what happens to a persistent volume when released from its claim. Valid options are Retain (default for manually created PersistentVolumes), Delete (default for dynamically provisioned PersistentVolumes), and Recycle (deprecated). Recycle must be supported by the volume plugin underlying this PersistentVolume. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#reclaiming"
        }, 
        "flexVolume": {
          "description": "flexVolume represents a generic volume resource that is provisioned/attached using an exec based plugin. Deprecated: FlexVolume is deprecated. Consider using a CSIDriver instead.", 
          "$ref": "#/definitions/io.k8s.api.core.v1.FlexPersistentVolumeSource"
        }, 
        "awsElasticBlockStore": {
          "description": "awsElasticBlockStore represents an AWS Disk resource that is attached to a kubelet's host machine and then exposed to the pod. Deprecated: AWSElasticBlockStore is deprecated. All operations for the in-tree awsElasticBlockStore type are redirected to the ebs.csi.aws.com CSI driver. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore", 
          "$ref": "#/definitions/io.k8s.api.core.v1.AWSElasticBlockStoreVolumeSource"
        }, 
        "rbd": {
          "description": "rbd represents a Rados Block Device mount on the host that shares a pod's lifetime. Deprecated: RBD is deprecated and the in-tree rbd type is no longer supported. More info: https://examples.k8s.io/volumes/rbd/README.md", 
          "$ref": "#/definitions/io.k8s.api.core.v1.RBDPersistentVolumeSource"
        }, 
        "local": {
          "description": "local represents directly-attached storage with node affinity", 
          "$ref": "#/definitions/io.k8s.api.core.v1.LocalVolumeSource"
        }, 
        "azureFile": {
          "description": "azureFile represents an Azure File Service mount on the host and bind mount to the pod. Deprecated: AzureFile is deprecated. All operations for the in-tree azureFile type are redirected to the file.csi.azure.com CSI driver.", 
          "$ref": "#/definitions/io.k8s.api.core.v1.AzureFilePersistentVolumeSource"
        }, 
        "vsphereVolume": {
          "description": "vsphereVolume represents a vSphere volume attached and mounted on kubelets host machine. Deprecated: VsphereVolume is deprecated. All operations for the in-tree vsphereVolume type are redirected to the csi.vsphere.vmware.com CSI driver.", 
          "$ref": "#/definitions/io.k8s.api.core.v1.VsphereVirtualDiskVolumeSource"
        }
      }
    }, 
    "io.k8s.api.flowcontrol.v1.PriorityLevelConfigurationList": {
      "type": "object", 
      "required": [
        "items"
      ], 
      "x-kubernetes-group-version-kind": [
        {
          "kind": "PriorityLevelConfigurationList", 
          "version": "v1", 
          "group": "flowcontrol.apiserver.k8s.io"
        }
      ], 
      "description": "PriorityLevelConfigurationList is a list of PriorityLevelConfiguration objects.", 
      "properties": {
        "items": {
          "items": {
            "$ref": "#/definitions/io.k8s.api.flowcontrol.v1.PriorityLevelConfiguration"
          }, 
          "type": "array", 
          "description": "`items` is a list of request-priorities."
        }, 
        "kind": {
          "enum": [
            "PriorityLevelConfigurationList"
          ], 
          "type": "string", 
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
        }, 
        "apiVersion": {
          "type": "string", 
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources"
        }, 
        "metadata": {
          "description": "`metadata` is the standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata", 
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      }
    }, 
    "io.k8s.api.resource.v1beta1.ResourceClaimSpec": {
      "type": "object", 
      "description": "ResourceClaimSpec defines what is being requested in a ResourceClaim and how to configure it.", 
      "properties": {
        "devices": {
          "description": "Devices defines how to request devices.", 
          "$ref": "#/definitions/io.k8s.api.resource.v1beta1.DeviceClaim"
        }
      }
    }, 
    "io.k8s.api.core.v1.ConfigMapVolumeSource": {
      "type": "object", 
      "description": "Adapts a ConfigMap into a volume.\n\nThe contents of the target ConfigMap's Data field will be presented in a volume as files using the keys in the Data field as the file names, unless the items element is populated with specific mappings of keys to paths. ConfigMap volumes support ownership management and SELinux relabeling.", 
      "properties": {
        "items": {
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.KeyToPath"
          }, 
          "type": "array", 
          "description": "items if unspecified, each key-value pair in the Data field of the referenced ConfigMap will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the ConfigMap, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.", 
          "x-kubernetes-list-type": "atomic"
        }, 
        "optional": {
          "type": "boolean", 
          "description": "optional specify whether the ConfigMap or its keys must be defined"
        }, 
        "defaultMode": {
          "type": "integer", 
          "description": "defaultMode is optional: mode bits used to set permissions on created files by default. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.", 
          "format": "int32"
        }, 
        "name": {
          "type": "string", 
          "description": "Name of the referent. This field is effectively required, but due to backwards compatibility is allowed to be empty. Instances of this type with an empty value here are almost certainly wrong. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"
        }
      }
    }, 
    "io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.WebhookClientConfig": {
      "type": "object", 
      "description": "WebhookClientConfig contains the information to make a TLS connection with the webhook.", 
      "properties": {
        "caBundle": {
          "type": "string", 
          "description": "caBundle is a PEM encoded CA bundle which will be used to validate the webhook's server certificate. If unspecified, system trust roots on the apiserver are used.", 
          "format": "byte"
        }, 
        "url": {
          "type": "string", 
          "description": "url gives the location of the webhook, in standard URL form (`scheme://host:port/path`). Exactly one of `url` or `service` must be specified.\n\nThe `host` should not refer to a service running in the cluster; use the `service` field instead. The host might be resolved via external DNS in some apiservers (e.g., `kube-apiserver` cannot resolve in-cluster DNS as that would be a layering violation). `host` may also be an IP address.\n\nPlease note that using `localhost` or `127.0.0.1` as a `host` is risky unless you take great care to run this webhook on all hosts which run an apiserver which might need to make calls to this webhook. Such installs are likely to be non-portable, i.e., not easy to turn up in a new cluster.\n\nThe scheme must be \"https\"; the URL must begin with \"https://\".\n\nA path is optional, and if present may be any string permissible in a URL. You may use the path to pass an arbitrary string to the webhook, for example, a cluster identifier.\n\nAttempting to use a user or basic auth e.g. \"user:password@\" is not allowed. Fragments (\"#...\") and query parameters (\"?...\") are not allowed, either."
        }, 
        "service": {
          "description": "service is a reference to the service for this webhook. Either service or url must be specified.\n\nIf the webhook is running within the cluster, then you should use `service`.", 
          "$ref": "#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.ServiceReference"
        }
      }
    }, 
    "io.k8s.apimachinery.pkg.apis.meta.v1.APIResourceList": {
      "type": "object", 
      "required": [
        "groupVersion", 
        "resources"
      ], 
      "x-kubernetes-group-version-kind": [
        {
          "kind": "APIResourceList", 
          "version": "v1", 
          "group": ""
        }
      ], 
      "description": "APIResourceList is a list of APIResource, it is used to expose the name of the resources supported in a specific group and version, and if the resource is namespaced.", 
      "properties": {
        "kind": {
          "enum": [
            "APIResourceList"
          ], 
          "type": "string", 
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
        }, 
        "groupVersion": {
          "type": "string", 
          "description": "groupVersion is the group and version this APIResourceList is for."
        }, 
        "apiVersion": {
          "type": "string", 
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources"
        }, 
        "resources": {
          "items": {
            "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.APIResource"
          }, 
          "type": "array", 
          "description": "resources contains the name of the resources and if they are namespaced.", 
          "x-kubernetes-list-type": "atomic"
        }
      }
    }, 
    "io.k8s.apimachinery.pkg.apis.meta.v1.FieldSelectorRequirement": {
      "required": [
        "key", 
        "operator"
      ], 
      "type": "object", 
      "description": "FieldSelectorRequirement is a selector that contains values, a key, and an operator that relates the key and values.", 
      "properties": {
        "operator": {
          "type": "string", 
          "description": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. The list of operators may grow in the future."
        }, 
        "values": {
          "items": {
            "type": "string"
          }, 
          "type": "array", 
          "description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty.", 
          "x-kubernetes-list-type": "atomic"
        }, 
        "key": {
          "type": "string", 
          "description": "key is the field selector key that the requirement applies to."
        }
      }
    }, 
    "io.k8s.api.apps.v1.StatefulSetPersistentVolumeClaimRetentionPolicy": {
      "type": "object", 
      "description": "StatefulSetPersistentVolumeClaimRetentionPolicy describes the policy used for PVCs created from the StatefulSet VolumeClaimTemplates.", 
      "properties": {
        "whenDeleted": {
          "type": "string", 
          "description": "WhenDeleted specifies what happens to PVCs created from StatefulSet VolumeClaimTemplates when the StatefulSet is deleted. The default policy of `Retain` causes PVCs to not be affected by StatefulSet deletion. The `Delete` policy causes those PVCs to be deleted."
        }, 
        "whenScaled": {
          "type": "string", 
          "description": "WhenScaled specifies what happens to PVCs created from StatefulSet VolumeClaimTemplates when the StatefulSet is scaled down. The default policy of `Retain` causes PVCs to not be affected by a scaledown. The `Delete` policy causes the associated PVCs for any excess pods above the replica count to be deleted."
        }
      }
    }, 
    "io.k8s.api.events.v1.EventSeries": {
      "required": [
        "count", 
        "lastObservedTime"
      ], 
      "type": "object", 
      "description": "EventSeries contain information on series of events, i.e. thing that was/is happening continuously for some time. How often to update the EventSeries is up to the event reporters. The default event reporter in \"k8s.io/client-go/tools/events/event_broadcaster.go\" shows how this struct is updated on heartbeats and can guide customized reporter implementations.", 
      "properties": {
        "count": {
          "type": "integer", 
          "description": "count is the number of occurrences in this series up to the last heartbeat time.", 
          "format": "int32"
        }, 
        "lastObservedTime": {
          "description": "lastObservedTime is the time when last Event from the series was seen before last heartbeat.", 
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.MicroTime"
        }
      }
    }, 
    "io.k8s.api.resource.v1beta2.DeviceToleration": {
      "type": "object", 
      "description": "The ResourceClaim this DeviceToleration is attached to tolerates any taint that matches the triple <key,value,effect> using the matching operator <operator>.", 
      "properties": {
        "operator": {
          "type": "string", 
          "description": "Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a ResourceClaim can tolerate all taints of a particular category."
        }, 
        "key": {
          "type": "string", 
          "description": "Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys. Must be a label name."
        }, 
        "tolerationSeconds": {
          "type": "integer", 
          "description": "TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system. If larger than zero, the time when the pod needs to be evicted is calculated as <time when taint was adedd> + <toleration seconds>.", 
          "format": "int64"
        }, 
        "effect": {
          "type": "string", 
          "description": "Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule and NoExecute."
        }, 
        "value": {
          "type": "string", 
          "description": "Value is the taint value the toleration matches to. If the operator is Exists, the value must be empty, otherwise just a regular string. Must be a label value."
        }
      }
    }, 
    "io.k8s.api.resource.v1beta1.DeviceAllocationResult": {
      "type": "object", 
      "description": "DeviceAllocationResult is the result of allocating devices.", 
      "properties": {
        "config": {
          "items": {
            "$ref": "#/definitions/io.k8s.api.resource.v1beta1.DeviceAllocationConfiguration"
          }, 
          "type": "array", 
          "description": "This field is a combination of all the claim and class configuration parameters. Drivers can distinguish between those based on a flag.\n\nThis includes configuration parameters for drivers which have no allocated devices in the result because it is up to the drivers which configuration parameters they support. They can silently ignore unknown configuration parameters.", 
          "x-kubernetes-list-type": "atomic"
        }, 
        "results": {
          "items": {
            "$ref": "#/definitions/io.k8s.api.resource.v1beta1.DeviceRequestAllocationResult"
          }, 
          "type": "array", 
          "description": "Results lists all allocated devices.", 
          "x-kubernetes-list-type": "atomic"
        }
      }
    }, 
    "io.k8s.api.core.v1.VsphereVirtualDiskVolumeSource": {
      "required": [
        "volumePath"
      ], 
      "type": "object", 
      "description": "Represents a vSphere volume resource.", 
      "properties": {
        "storagePolicyName": {
          "type": "string", 
          "description": "storagePolicyName is the storage Policy Based Management (SPBM) profile name."
        }, 
        "fsType": {
          "type": "string", 
          "description": "fsType is filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified."
        }, 
        "storagePolicyID": {
          "type": "string", 
          "description": "storagePolicyID is the storage Policy Based Management (SPBM) profile ID associated with the StoragePolicyName."
        }, 
        "volumePath": {
          "type": "string", 
          "description": "volumePath is the path that identifies vSphere volume vmdk"
        }
      }
    }, 
    "io.k8s.api.resource.v1.DeviceRequest": {
      "required": [
        "name"
      ], 
      "type": "object", 
      "description": "DeviceRequest is a request for devices required for a claim. This is typically a request for a single resource like a device, but can also ask for several identical devices. With FirstAvailable it is also possible to provide a prioritized list of requests.", 
      "properties": {
        "firstAvailable": {
          "items": {
            "$ref": "#/definitions/io.k8s.api.resource.v1.DeviceSubRequest"
          }, 
          "type": "array", 
          "description": "FirstAvailable contains subrequests, of which exactly one will be selected by the scheduler. It tries to satisfy them in the order in which they are listed here. So if there are two entries in the list, the scheduler will only check the second one if it determines that the first one can not be used.\n\nDRA does not yet implement scoring, so the scheduler will select the first set of devices that satisfies all the requests in the claim. And if the requirements can be satisfied on more than one node, other scheduling features will determine which node is chosen. This means that the set of devices allocated to a claim might not be the optimal set available to the cluster. Scoring will be implemented later.", 
          "x-kubernetes-list-type": "atomic"
        }, 
        "exactly": {
          "description": "Exactly specifies the details for a single request that must be met exactly for the request to be satisfied.\n\nOne of Exactly or FirstAvailable must be set.", 
          "$ref": "#/definitions/io.k8s.api.resource.v1.ExactDeviceRequest"
        }, 
        "name": {
          "type": "string", 
          "description": "Name can be used to reference this request in a pod.spec.containers[].resources.claims entry and in a constraint of the claim.\n\nReferences using the name in the DeviceRequest will uniquely identify a request when the Exactly field is set. When the FirstAvailable field is set, a reference to the name of the DeviceRequest will match whatever subrequest is chosen by the scheduler.\n\nMust be a DNS label."
        }
      }
    }, 
    "io.k8s.api.authentication.v1.BoundObjectReference": {
      "type": "object", 
      "description": "BoundObjectReference is a reference to an object that a token is bound to.", 
      "properties": {
        "kind": {
          "type": "string", 
          "description": "Kind of the referent. Valid kinds are 'Pod' and 'Secret'."
        }, 
        "name": {
          "type": "string", 
          "description": "Name of the referent."
        }, 
        "apiVersion": {
          "type": "string", 
          "description": "API version of the referent."
        }, 
        "uid": {
          "type": "string", 
          "description": "UID of the referent."
        }
      }
    }, 
    "io.k8s.api.discovery.v1.EndpointSliceList": {
      "type": "object", 
      "required": [
        "items"
      ], 
      "x-kubernetes-group-version-kind": [
        {
          "kind": "EndpointSliceList", 
          "version": "v1", 
          "group": "discovery.k8s.io"
        }
      ], 
      "description": "EndpointSliceList represents a list of endpoint slices", 
      "properties": {
        "items": {
          "items": {
            "$ref": "#/definitions/io.k8s.api.discovery.v1.EndpointSlice"
          }, 
          "type": "array", 
          "description": "items is the list of endpoint slices"
        }, 
        "kind": {
          "enum": [
            "EndpointSliceList"
          ], 
          "type": "string", 
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
        }, 
        "apiVersion": {
          "type": "string", 
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources"
        }, 
        "metadata": {
          "description": "Standard list metadata.", 
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      }
    }, 
    "io.k8s.api.admissionregistration.v1alpha1.Mutation": {
      "required": [
        "patchType"
      ], 
      "type": "object", 
      "description": "Mutation specifies the CEL expression which is used to apply the Mutation.", 
      "properties": {
        "applyConfiguration": {
          "description": "applyConfiguration defines the desired configuration values of an object. The configuration is applied to the admission object using [structured merge diff](https://github.com/kubernetes-sigs/structured-merge-diff). A CEL expression is used to create apply configuration.", 
          "$ref": "#/definitions/io.k8s.api.admissionregistration.v1alpha1.ApplyConfiguration"
        }, 
        "jsonPatch": {
          "description": "jsonPatch defines a [JSON patch](https://jsonpatch.com/) operation to perform a mutation to the object. A CEL expression is used to create the JSON patch.", 
          "$ref": "#/definitions/io.k8s.api.admissionregistration.v1alpha1.JSONPatch"
        }, 
        "patchType": {
          "type": "string", 
          "description": "patchType indicates the patch strategy used. Allowed values are \"ApplyConfiguration\" and \"JSONPatch\". Required."
        }
      }
    }, 
    "io.k8s.api.certificates.v1beta1.ClusterTrustBundle": {
      "type": "object", 
      "required": [
        "spec"
      ], 
      "x-kubernetes-group-version-kind": [
        {
          "kind": "ClusterTrustBundle", 
          "version": "v1beta1", 
          "group": "certificates.k8s.io"
        }
      ], 
      "description": "ClusterTrustBundle is a cluster-scoped container for X.509 trust anchors (root certificates).\n\nClusterTrustBundle objects are considered to be readable by any authenticated user in the cluster, because they can be mounted by pods using the `clusterTrustBundle` projection.  All service accounts have read access to ClusterTrustBundles by default.  Users who only have namespace-level access to a cluster can read ClusterTrustBundles by impersonating a serviceaccount that they have access to.\n\nIt can be optionally associated with a particular assigner, in which case it contains one valid set of trust anchors for that signer. Signers may have multiple associated ClusterTrustBundles; each is an independent set of trust anchors for that signer. Admission control is used to enforce that only users with permissions on the signer can create or modify the corresponding bundle.", 
      "properties": {
        "kind": {
          "enum": [
            "ClusterTrustBundle"
          ], 
          "type": "string", 
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
        }, 
        "spec": {
          "description": "spec contains the signer (if any) and trust anchors.", 
          "$ref": "#/definitions/io.k8s.api.certificates.v1beta1.ClusterTrustBundleSpec"
        }, 
        "apiVersion": {
          "type": "string", 
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources"
        }, 
        "metadata": {
          "description": "metadata contains the object metadata.", 
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        }
      }
    }, 
    "io.k8s.api.core.v1.ContainerState": {
      "type": "object", 
      "description": "ContainerState holds a possible state of container. Only one of its members may be specified. If none of them is specified, the default one is ContainerStateWaiting.", 
      "properties": {
        "terminated": {
          "description": "Details about a terminated container", 
          "$ref": "#/definitions/io.k8s.api.core.v1.ContainerStateTerminated"
        }, 
        "running": {
          "description": "Details about a running container", 
          "$ref": "#/definitions/io.k8s.api.core.v1.ContainerStateRunning"
        }, 
        "waiting": {
          "description": "Details about a waiting container", 
          "$ref": "#/definitions/io.k8s.api.core.v1.ContainerStateWaiting"
        }
      }
    }, 
    "io.k8s.api.admissionregistration.v1alpha1.ParamKind": {
      "type": "object", 
      "x-kubernetes-map-type": "atomic", 
      "description": "ParamKind is a tuple of Group Kind and Version.", 
      "properties": {
        "kind": {
          "type": "string", 
          "description": "Kind is the API kind the resources belong to. Required."
        }, 
        "apiVersion": {
          "type": "string", 
          "description": "APIVersion is the API group version the resources belong to. In format of \"group/version\". Required."
        }
      }
    }, 
    "io.k8s.api.networking.v1beta1.IPAddressList": {
      "type": "object", 
      "required": [
        "items"
      ], 
      "x-kubernetes-group-version-kind": [
        {
          "kind": "IPAddressList", 
          "version": "v1beta1", 
          "group": "networking.k8s.io"
        }
      ], 
      "description": "IPAddressList contains a list of IPAddress.", 
      "properties": {
        "items": {
          "items": {
            "$ref": "#/definitions/io.k8s.api.networking.v1beta1.IPAddress"
          }, 
          "type": "array", 
          "description": "items is the list of IPAddresses."
        }, 
        "kind": {
          "enum": [
            "IPAddressList"
          ], 
          "type": "string", 
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
        }, 
        "apiVersion": {
          "type": "string", 
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources"
        }, 
        "metadata": {
          "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata", 
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      }
    }, 
    "io.k8s.api.resource.v1beta1.NetworkDeviceData": {
      "type": "object", 
      "description": "NetworkDeviceData provides network-related details for the allocated device. This information may be filled by drivers or other components to configure or identify the device within a network context.", 
      "properties": {
        "ips": {
          "items": {
            "type": "string"
          }, 
          "type": "array", 
          "description": "IPs lists the network addresses assigned to the device's network interface. This can include both IPv4 and IPv6 addresses. The IPs are in the CIDR notation, which includes both the address and the associated subnet mask. e.g.: \"192.0.2.5/24\" for IPv4 and \"2001:db8::5/64\" for IPv6.\n\nMust not contain more than 16 entries.", 
          "x-kubernetes-list-type": "atomic"
        }, 
        "interfaceName": {
          "type": "string", 
          "description": "InterfaceName specifies the name of the network interface associated with the allocated device. This might be the name of a physical or virtual network interface being configured in the pod.\n\nMust not be longer than 256 characters."
        }, 
        "hardwareAddress": {
          "type": "string", 
          "description": "HardwareAddress represents the hardware address (e.g. MAC Address) of the device's network interface.\n\nMust not be longer than 128 characters."
        }
      }
    }, 
    "io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.CustomResourceSubresourceScale": {
      "required": [
        "specReplicasPath", 
        "statusReplicasPath"
      ], 
      "type": "object", 
      "description": "CustomResourceSubresourceScale defines how to serve the scale subresource for CustomResources.", 
      "properties": {
        "labelSelectorPath": {
          "type": "string", 
          "description": "labelSelectorPath defines the JSON path inside of a custom resource that corresponds to Scale `status.selector`. Only JSON paths without the array notation are allowed. Must be a JSON Path under `.status` or `.spec`. Must be set to work with HorizontalPodAutoscaler. The field pointed by this JSON path must be a string field (not a complex selector struct) which contains a serialized label selector in string form. More info: https://kubernetes.io/docs/tasks/access-kubernetes-api/custom-resources/custom-resource-definitions#scale-subresource If there is no value under the given path in the custom resource, the `status.selector` value in the `/scale` subresource will default to the empty string."
        }, 
        "statusReplicasPath": {
          "type": "string", 
          "description": "statusReplicasPath defines the JSON path inside of a custom resource that corresponds to Scale `status.replicas`. Only JSON paths without the array notation are allowed. Must be a JSON Path under `.status`. If there is no value under the given path in the custom resource, the `status.replicas` value in the `/scale` subresource will default to 0."
        }, 
        "specReplicasPath": {
          "type": "string", 
          "description": "specReplicasPath defines the JSON path inside of a custom resource that corresponds to Scale `spec.replicas`. Only JSON paths without the array notation are allowed. Must be a JSON Path under `.spec`. If there is no value under the given path in the custom resource, the `/scale` subresource will return an error on GET."
        }
      }
    }, 
    "io.k8s.api.core.v1.DownwardAPIVolumeSource": {
      "type": "object", 
      "description": "DownwardAPIVolumeSource represents a volume containing downward API info. Downward API volumes support ownership management and SELinux relabeling.", 
      "properties": {
        "items": {
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.DownwardAPIVolumeFile"
          }, 
          "type": "array", 
          "description": "Items is a list of downward API volume file", 
          "x-kubernetes-list-type": "atomic"
        }, 
        "defaultMode": {
          "type": "integer", 
          "description": "Optional: mode bits to use on created files by default. Must be a Optional: mode bits used to set permissions on created files by default. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.", 
          "format": "int32"
        }
      }
    }, 
    "io.k8s.api.resource.v1beta2.ResourceSliceList": {
      "type": "object", 
      "required": [
        "items"
      ], 
      "x-kubernetes-group-version-kind": [
        {
          "kind": "ResourceSliceList", 
          "version": "v1beta2", 
          "group": "resource.k8s.io"
        }
      ], 
      "description": "ResourceSliceList is a collection of ResourceSlices.", 
      "properties": {
        "items": {
          "items": {
            "$ref": "#/definitions/io.k8s.api.resource.v1beta2.ResourceSlice"
          }, 
          "type": "array", 
          "description": "Items is the list of resource ResourceSlices."
        }, 
        "kind": {
          "enum": [
            "ResourceSliceList"
          ], 
          "type": "string", 
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
        }, 
        "apiVersion": {
          "type": "string", 
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources"
        }, 
        "metadata": {
          "description": "Standard list metadata", 
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      }
    }, 
    "io.k8s.apimachinery.pkg.apis.meta.v1.StatusCause": {
      "type": "object", 
      "description": "StatusCause provides more information about an api.Status failure, including cases when multiple errors are encountered.", 
      "properties": {
        "field": {
          "type": "string", 
          "description": "The field of the resource that has caused this error, as named by its JSON serialization. May include dot and postfix notation for nested attributes. Arrays are zero-indexed.  Fields may appear more than once in an array of causes due to fields having multiple errors. Optional.\n\nExamples:\n  \"name\" - the field \"name\" on the current resource\n  \"items[0].name\" - the field \"name\" on the first array entry in \"items\""
        }, 
        "message": {
          "type": "string", 
          "description": "A human-readable description of the cause of the error.  This field may be presented as-is to a reader."
        }, 
        "reason": {
          "type": "string", 
          "description": "A machine-readable description of the cause of the error. If this value is empty there is no information available."
        }
      }
    }, 
    "io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelectorRequirement": {
      "required": [
        "key", 
        "operator"
      ], 
      "type": "object", 
      "description": "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.", 
      "properties": {
        "operator": {
          "type": "string", 
          "description": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist."
        }, 
        "values": {
          "items": {
            "type": "string"
          }, 
          "type": "array", 
          "description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.", 
          "x-kubernetes-list-type": "atomic"
        }, 
        "key": {
          "type": "string", 
          "description": "key is the label key that the selector applies to."
        }
      }
    }, 
    "io.k8s.api.resource.v1beta2.DeviceAllocationResult": {
      "type": "object", 
      "description": "DeviceAllocationResult is the result of allocating devices.", 
      "properties": {
        "config": {
          "items": {
            "$ref": "#/definitions/io.k8s.api.resource.v1beta2.DeviceAllocationConfiguration"
          }, 
          "type": "array", 
          "description": "This field is a combination of all the claim and class configuration parameters. Drivers can distinguish between those based on a flag.\n\nThis includes configuration parameters for drivers which have no allocated devices in the result because it is up to the drivers which configuration parameters they support. They can silently ignore unknown configuration parameters.", 
          "x-kubernetes-list-type": "atomic"
        }, 
        "results": {
          "items": {
            "$ref": "#/definitions/io.k8s.api.resource.v1beta2.DeviceRequestAllocationResult"
          }, 
          "type": "array", 
          "description": "Results lists all allocated devices.", 
          "x-kubernetes-list-type": "atomic"
        }
      }
    }, 
    "io.k8s.api.storage.v1alpha1.VolumeAttributesClass": {
      "type": "object", 
      "required": [
        "driverName"
      ], 
      "x-kubernetes-group-version-kind": [
        {
          "kind": "VolumeAttributesClass", 
          "version": "v1alpha1", 
          "group": "storage.k8s.io"
        }
      ], 
      "description": "VolumeAttributesClass represents a specification of mutable volume attributes defined by the CSI driver. The class can be specified during dynamic provisioning of PersistentVolumeClaims, and changed in the PersistentVolumeClaim spec after provisioning.", 
      "properties": {
        "apiVersion": {
          "type": "string", 
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources"
        }, 
        "kind": {
          "enum": [
            "VolumeAttributesClass"
          ], 
          "type": "string", 
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
        }, 
        "driverName": {
          "type": "string", 
          "description": "Name of the CSI driver This field is immutable."
        }, 
        "parameters": {
          "additionalProperties": {
            "type": "string"
          }, 
          "type": "object", 
          "description": "parameters hold volume attributes defined by the CSI driver. These values are opaque to the Kubernetes and are passed directly to the CSI driver. The underlying storage provider supports changing these attributes on an existing volume, however the parameters field itself is immutable. To invoke a volume update, a new VolumeAttributesClass should be created with new parameters, and the PersistentVolumeClaim should be updated to reference the new VolumeAttributesClass.\n\nThis field is required and must contain at least one key/value pair. The keys cannot be empty, and the maximum number of parameters is 512, with a cumulative max size of 256K. If the CSI driver rejects invalid parameters, the target PersistentVolumeClaim will be set to an \"Infeasible\" state in the modifyVolumeStatus field."
        }, 
        "metadata": {
          "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata", 
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        }
      }
    }, 
    "io.k8s.api.core.v1.TopologySpreadConstraint": {
      "required": [
        "maxSkew", 
        "topologyKey", 
        "whenUnsatisfiable"
      ], 
      "type": "object", 
      "description": "TopologySpreadConstraint specifies how to spread matching pods among the given topology.", 
      "properties": {
        "minDomains": {
          "type": "integer", 
          "description": "MinDomains indicates a minimum number of eligible domains. When the number of eligible domains with matching topology keys is less than minDomains, Pod Topology Spread treats \"global minimum\" as 0, and then the calculation of Skew is performed. And when the number of eligible domains with matching topology keys equals or greater than minDomains, this value has no effect on scheduling. As a result, when the number of eligible domains is less than minDomains, scheduler won't schedule more than maxSkew Pods to those domains. If value is nil, the constraint behaves as if MinDomains is equal to 1. Valid values are integers greater than 0. When value is not nil, WhenUnsatisfiable must be DoNotSchedule.\n\nFor example, in a 3-zone cluster, MaxSkew is set to 2, MinDomains is set to 5 and pods with the same labelSelector spread as 2/2/2: | zone1 | zone2 | zone3 | |  P P  |  P P  |  P P  | The number of domains is less than 5(MinDomains), so \"global minimum\" is treated as 0. In this situation, new pod with the same labelSelector cannot be scheduled, because computed skew will be 3(3 - 0) if new Pod is scheduled to any of the three zones, it will violate MaxSkew.", 
          "format": "int32"
        }, 
        "labelSelector": {
          "description": "LabelSelector is used to find matching pods. Pods that match this label selector are counted to determine the number of pods in their corresponding topology domain.", 
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector"
        }, 
        "nodeTaintsPolicy": {
          "type": "string", 
          "description": "NodeTaintsPolicy indicates how we will treat node taints when calculating pod topology spread skew. Options are: - Honor: nodes without taints, along with tainted nodes for which the incoming pod has a toleration, are included. - Ignore: node taints are ignored. All nodes are included.\n\nIf this value is nil, the behavior is equivalent to the Ignore policy."
        }, 
        "matchLabelKeys": {
          "items": {
            "type": "string"
          }, 
          "type": "array", 
          "description": "MatchLabelKeys is a set of pod label keys to select the pods over which spreading will be calculated. The keys are used to lookup values from the incoming pod labels, those key-value labels are ANDed with labelSelector to select the group of existing pods over which spreading will be calculated for the incoming pod. The same key is forbidden to exist in both MatchLabelKeys and LabelSelector. MatchLabelKeys cannot be set when LabelSelector isn't set. Keys that don't exist in the incoming pod labels will be ignored. A null or empty list means only match against labelSelector.\n\nThis is a beta field and requires the MatchLabelKeysInPodTopologySpread feature gate to be enabled (enabled by default).", 
          "x-kubernetes-list-type": "atomic"
        }, 
        "whenUnsatisfiable": {
          "type": "string", 
          "description": "WhenUnsatisfiable indicates how to deal with a pod if it doesn't satisfy the spread constraint. - DoNotSchedule (default) tells the scheduler not to schedule it. - ScheduleAnyway tells the scheduler to schedule the pod in any location,\n  but giving higher precedence to topologies that would help reduce the\n  skew.\nA constraint is considered \"Unsatisfiable\" for an incoming pod if and only if every possible node assignment for that pod would violate \"MaxSkew\" on some topology. For example, in a 3-zone cluster, MaxSkew is set to 1, and pods with the same labelSelector spread as 3/1/1: | zone1 | zone2 | zone3 | | P P P |   P   |   P   | If WhenUnsatisfiable is set to DoNotSchedule, incoming pod can only be scheduled to zone2(zone3) to become 3/2/1(3/1/2) as ActualSkew(2-1) on zone2(zone3) satisfies MaxSkew(1). In other words, the cluster can still be imbalanced, but scheduler won't make it *more* imbalanced. It's a required field."
        }, 
        "maxSkew": {
          "type": "integer", 
          "description": "MaxSkew describes the degree to which pods may be unevenly distributed. When `whenUnsatisfiable=DoNotSchedule`, it is the maximum permitted difference between the number of matching pods in the target topology and the global minimum. The global minimum is the minimum number of matching pods in an eligible domain or zero if the number of eligible domains is less than MinDomains. For example, in a 3-zone cluster, MaxSkew is set to 1, and pods with the same labelSelector spread as 2/2/1: In this case, the global minimum is 1. | zone1 | zone2 | zone3 | |  P P  |  P P  |   P   | - if MaxSkew is 1, incoming pod can only be scheduled to zone3 to become 2/2/2; scheduling it onto zone1(zone2) would make the ActualSkew(3-1) on zone1(zone2) violate MaxSkew(1). - if MaxSkew is 2, incoming pod can be scheduled onto any zone. When `whenUnsatisfiable=ScheduleAnyway`, it is used to give higher precedence to topologies that satisfy it. It's a required field. Default value is 1 and 0 is not allowed.", 
          "format": "int32"
        }, 
        "nodeAffinityPolicy": {
          "type": "string", 
          "description": "NodeAffinityPolicy indicates how we will treat Pod's nodeAffinity/nodeSelector when calculating pod topology spread skew. Options are: - Honor: only nodes matching nodeAffinity/nodeSelector are included in the calculations. - Ignore: nodeAffinity/nodeSelector are ignored. All nodes are included in the calculations.\n\nIf this value is nil, the behavior is equivalent to the Honor policy."
        }, 
        "topologyKey": {
          "type": "string", 
          "description": "TopologyKey is the key of node labels. Nodes that have a label with this key and identical values are considered to be in the same topology. We consider each <key, value> as a \"bucket\", and try to put balanced number of pods into each bucket. We define a domain as a particular instance of a topology. Also, we define an eligible domain as a domain whose nodes meet the requirements of nodeAffinityPolicy and nodeTaintsPolicy. e.g. If TopologyKey is \"kubernetes.io/hostname\", each Node is a domain of that topology. And, if TopologyKey is \"topology.kubernetes.io/zone\", each zone is a domain of that topology. It's a required field."
        }
      }
    }, 
    "io.k8s.api.core.v1.ResourceHealth": {
      "required": [
        "resourceID"
      ], 
      "type": "object", 
      "description": "ResourceHealth represents the health of a resource. It has the latest device health information. This is a part of KEP https://kep.k8s.io/4680.", 
      "properties": {
        "resourceID": {
          "type": "string", 
          "description": "ResourceID is the unique identifier of the resource. See the ResourceID type for more information."
        }, 
        "health": {
          "type": "string", 
          "description": "Health of the resource. can be one of:\n - Healthy: operates as normal\n - Unhealthy: reported unhealthy. We consider this a temporary health issue\n              since we do not have a mechanism today to distinguish\n              temporary and permanent issues.\n - Unknown: The status cannot be determined.\n            For example, Device Plugin got unregistered and hasn't been re-registered since.\n\nIn future we may want to introduce the PermanentlyUnhealthy Status."
        }
      }
    }, 
    "io.k8s.api.autoscaling.v2.HPAScalingRules": {
      "type": "object", 
      "description": "HPAScalingRules configures the scaling behavior for one direction via scaling Policy Rules and a configurable metric tolerance.\n\nScaling Policy Rules are applied after calculating DesiredReplicas from metrics for the HPA. They can limit the scaling velocity by specifying scaling policies. They can prevent flapping by specifying the stabilization window, so that the number of replicas is not set instantly, instead, the safest value from the stabilization window is chosen.\n\nThe tolerance is applied to the metric values and prevents scaling too eagerly for small metric variations. (Note that setting a tolerance requires enabling the alpha HPAConfigurableTolerance feature gate.)", 
      "properties": {
        "selectPolicy": {
          "type": "string", 
          "description": "selectPolicy is used to specify which policy should be used. If not set, the default value Max is used."
        }, 
        "tolerance": {
          "description": "tolerance is the tolerance on the ratio between the current and desired metric value under which no updates are made to the desired number of replicas (e.g. 0.01 for 1%). Must be greater than or equal to zero. If not set, the default cluster-wide tolerance is applied (by default 10%).\n\nFor example, if autoscaling is configured with a memory consumption target of 100Mi, and scale-down and scale-up tolerances of 5% and 1% respectively, scaling will be triggered when the actual consumption falls below 95Mi or exceeds 101Mi.\n\nThis is an alpha field and requires enabling the HPAConfigurableTolerance feature gate.", 
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.api.resource.Quantity"
        }, 
        "stabilizationWindowSeconds": {
          "type": "integer", 
          "description": "stabilizationWindowSeconds is the number of seconds for which past recommendations should be considered while scaling up or scaling down. StabilizationWindowSeconds must be greater than or equal to zero and less than or equal to 3600 (one hour). If not set, use the default values: - For scale up: 0 (i.e. no stabilization is done). - For scale down: 300 (i.e. the stabilization window is 300 seconds long).", 
          "format": "int32"
        }, 
        "policies": {
          "items": {
            "$ref": "#/definitions/io.k8s.api.autoscaling.v2.HPAScalingPolicy"
          }, 
          "type": "array", 
          "description": "policies is a list of potential scaling polices which can be used during scaling. If not set, use the default values: - For scale up: allow doubling the number of pods, or an absolute change of 4 pods in a 15s window. - For scale down: allow all pods to be removed in a 15s window.", 
          "x-kubernetes-list-type": "atomic"
        }
      }
    }, 
    "io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.CustomResourceColumnDefinition": {
      "required": [
        "name", 
        "type", 
        "jsonPath"
      ], 
      "type": "object", 
      "description": "CustomResourceColumnDefinition specifies a column for server side printing.", 
      "properties": {
        "priority": {
          "type": "integer", 
          "description": "priority is an integer defining the relative importance of this column compared to others. Lower numbers are considered higher priority. Columns that may be omitted in limited space scenarios should be given a priority greater than 0.", 
          "format": "int32"
        }, 
        "jsonPath": {
          "type": "string", 
          "description": "jsonPath is a simple JSON path (i.e. with array notation) which is evaluated against each custom resource to produce the value for this column."
        }, 
        "description": {
          "type": "string", 
          "description": "description is a human readable description of this column."
        }, 
        "format": {
          "type": "string", 
          "description": "format is an optional OpenAPI type definition for this column. The 'name' format is applied to the primary identifier column to assist in clients identifying column is the resource name. See https://github.com/OAI/OpenAPI-Specification/blob/master/versions/2.0.md#data-types for details."
        }, 
        "type": {
          "type": "string", 
          "description": "type is an OpenAPI type definition for this column. See https://github.com/OAI/OpenAPI-Specification/blob/master/versions/2.0.md#data-types for details."
        }, 
        "name": {
          "type": "string", 
          "description": "name is a human readable name for the column."
        }
      }
    }, 
    "io.k8s.api.networking.v1beta1.IPAddressSpec": {
      "required": [
        "parentRef"
      ], 
      "type": "object", 
      "description": "IPAddressSpec describe the attributes in an IP Address.", 
      "properties": {
        "parentRef": {
          "description": "ParentRef references the resource that an IPAddress is attached to. An IPAddress must reference a parent object.", 
          "$ref": "#/definitions/io.k8s.api.networking.v1beta1.ParentReference"
        }
      }
    }, 
    "io.k8s.api.storage.v1.CSINode": {
      "type": "object", 
      "required": [
        "spec"
      ], 
      "x-kubernetes-group-version-kind": [
        {
          "kind": "CSINode", 
          "version": "v1", 
          "group": "storage.k8s.io"
        }
      ], 
      "description": "CSINode holds information about all CSI drivers installed on a node. CSI drivers do not need to create the CSINode object directly. As long as they use the node-driver-registrar sidecar container, the kubelet will automatically populate the CSINode object for the CSI driver as part of kubelet plugin registration. CSINode has the same name as a node. If the object is missing, it means either there are no CSI Drivers available on the node, or the Kubelet version is low enough that it doesn't create this object. CSINode has an OwnerReference that points to the corresponding node object.", 
      "properties": {
        "kind": {
          "enum": [
            "CSINode"
          ], 
          "type": "string", 
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
        }, 
        "spec": {
          "description": "spec is the specification of CSINode", 
          "$ref": "#/definitions/io.k8s.api.storage.v1.CSINodeSpec"
        }, 
        "apiVersion": {
          "type": "string", 
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources"
        }, 
        "metadata": {
          "description": "Standard object's metadata. metadata.name must be the Kubernetes node name.", 
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        }
      }
    }, 
    "io.k8s.api.storage.v1beta1.VolumeAttributesClass": {
      "type": "object", 
      "required": [
        "driverName"
      ], 
      "x-kubernetes-group-version-kind": [
        {
          "kind": "VolumeAttributesClass", 
          "version": "v1beta1", 
          "group": "storage.k8s.io"
        }
      ], 
      "description": "VolumeAttributesClass represents a specification of mutable volume attributes defined by the CSI driver. The class can be specified during dynamic provisioning of PersistentVolumeClaims, and changed in the PersistentVolumeClaim spec after provisioning.", 
      "properties": {
        "apiVersion": {
          "type": "string", 
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources"
        }, 
        "kind": {
          "enum": [
            "VolumeAttributesClass"
          ], 
          "type": "string", 
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
        }, 
        "driverName": {
          "type": "string", 
          "description": "Name of the CSI driver This field is immutable."
        }, 
        "parameters": {
          "additionalProperties": {
            "type": "string"
          }, 
          "type": "object", 
          "description": "parameters hold volume attributes defined by the CSI driver. These values are opaque to the Kubernetes and are passed directly to the CSI driver. The underlying storage provider supports changing these attributes on an existing volume, however the parameters field itself is immutable. To invoke a volume update, a new VolumeAttributesClass should be created with new parameters, and the PersistentVolumeClaim should be updated to reference the new VolumeAttributesClass.\n\nThis field is required and must contain at least one key/value pair. The keys cannot be empty, and the maximum number of parameters is 512, with a cumulative max size of 256K. If the CSI driver rejects invalid parameters, the target PersistentVolumeClaim will be set to an \"Infeasible\" state in the modifyVolumeStatus field."
        }, 
        "metadata": {
          "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata", 
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        }
      }
    }, 
    "io.k8s.api.networking.v1.IngressServiceBackend": {
      "required": [
        "name"
      ], 
      "type": "object", 
      "description": "IngressServiceBackend references a Kubernetes Service as a Backend.", 
      "properties": {
        "name": {
          "type": "string", 
          "description": "name is the referenced service. The service must exist in the same namespace as the Ingress object."
        }, 
        "port": {
          "description": "port of the referenced service. A port name or port number is required for a IngressServiceBackend.", 
          "$ref": "#/definitions/io.k8s.api.networking.v1.ServiceBackendPort"
        }
      }
    }, 
    "io.k8s.api.resource.v1beta1.DeviceRequestAllocationResult": {
      "required": [
        "request", 
        "driver", 
        "pool", 
        "device"
      ], 
      "type": "object", 
      "description": "DeviceRequestAllocationResult contains the allocation result for one request.", 
      "properties": {
        "bindingFailureConditions": {
          "items": {
            "type": "string"
          }, 
          "type": "array", 
          "description": "BindingFailureConditions contains a copy of the BindingFailureConditions from the corresponding ResourceSlice at the time of allocation.\n\nThis is an alpha field and requires enabling the DRADeviceBindingConditions and DRAResourceClaimDeviceStatus feature gates.", 
          "x-kubernetes-list-type": "atomic"
        }, 
        "driver": {
          "type": "string", 
          "description": "Driver specifies the name of the DRA driver whose kubelet plugin should be invoked to process the allocation once the claim is needed on a node.\n\nMust be a DNS subdomain and should end with a DNS domain owned by the vendor of the driver."
        }, 
        "request": {
          "type": "string", 
          "description": "Request is the name of the request in the claim which caused this device to be allocated. If it references a subrequest in the firstAvailable list on a DeviceRequest, this field must include both the name of the main request and the subrequest using the format <main request>/<subrequest>.\n\nMultiple devices may have been allocated per request."
        }, 
        "bindingConditions": {
          "items": {
            "type": "string"
          }, 
          "type": "array", 
          "description": "BindingConditions contains a copy of the BindingConditions from the corresponding ResourceSlice at the time of allocation.\n\nThis is an alpha field and requires enabling the DRADeviceBindingConditions and DRAResourceClaimDeviceStatus feature gates.", 
          "x-kubernetes-list-type": "atomic"
        }, 
        "consumedCapacity": {
          "additionalProperties": {
            "$ref": "#/definitions/io.k8s.apimachinery.pkg.api.resource.Quantity"
          }, 
          "type": "object", 
          "description": "ConsumedCapacity tracks the amount of capacity consumed per device as part of the claim request. The consumed amount may differ from the requested amount: it is rounded up to the nearest valid value based on the device\u2019s requestPolicy if applicable (i.e., may not be less than the requested amount).\n\nThe total consumed capacity for each device must not exceed the DeviceCapacity's Value.\n\nThis field is populated only for devices that allow multiple allocations. All capacity entries are included, even if the consumed amount is zero."
        }, 
        "device": {
          "type": "string", 
          "description": "Device references one device instance via its name in the driver's resource pool. It must be a DNS label."
        }, 
        "tolerations": {
          "items": {
            "$ref": "#/definitions/io.k8s.api.resource.v1beta1.DeviceToleration"
          }, 
          "type": "array", 
          "description": "A copy of all tolerations specified in the request at the time when the device got allocated.\n\nThe maximum number of tolerations is 16.\n\nThis is an alpha field and requires enabling the DRADeviceTaints feature gate.", 
          "x-kubernetes-list-type": "atomic"
        }, 
        "adminAccess": {
          "type": "boolean", 
          "description": "AdminAccess indicates that this device was allocated for administrative access. See the corresponding request field for a definition of mode.\n\nThis is an alpha field and requires enabling the DRAAdminAccess feature gate. Admin access is disabled if this field is unset or set to false, otherwise it is enabled."
        }, 
        "pool": {
          "type": "string", 
          "description": "This name together with the driver name and the device name field identify which device was allocated (`<driver name>/<pool name>/<device name>`).\n\nMust not be longer than 253 characters and may contain one or more DNS sub-domains separated by slashes."
        }, 
        "shareID": {
          "type": "string", 
          "description": "ShareID uniquely identifies an individual allocation share of the device, used when the device supports multiple simultaneous allocations. It serves as an additional map key to differentiate concurrent shares of the same device."
        }
      }
    }, 
    "io.k8s.api.resource.v1.DeviceClaimConfiguration": {
      "type": "object", 
      "description": "DeviceClaimConfiguration is used for configuration parameters in DeviceClaim.", 
      "properties": {
        "requests": {
          "items": {
            "type": "string"
          }, 
          "type": "array", 
          "description": "Requests lists the names of requests where the configuration applies. If empty, it applies to all requests.\n\nReferences to subrequests must include the name of the main request and may include the subrequest using the format <main request>[/<subrequest>]. If just the main request is given, the configuration applies to all subrequests.", 
          "x-kubernetes-list-type": "atomic"
        }, 
        "opaque": {
          "description": "Opaque provides driver-specific configuration parameters.", 
          "$ref": "#/definitions/io.k8s.api.resource.v1.OpaqueDeviceConfiguration"
        }
      }
    }, 
    "io.k8s.api.resource.v1beta2.Counter": {
      "required": [
        "value"
      ], 
      "type": "object", 
      "description": "Counter describes a quantity associated with a device.", 
      "properties": {
        "value": {
          "description": "Value defines how much of a certain device counter is available.", 
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.api.resource.Quantity"
        }
      }
    }, 
    "io.k8s.api.storagemigration.v1alpha1.GroupVersionResource": {
      "type": "object", 
      "description": "The names of the group, the version, and the resource.", 
      "properties": {
        "group": {
          "type": "string", 
          "description": "The name of the group."
        }, 
        "version": {
          "type": "string", 
          "description": "The name of the version."
        }, 
        "resource": {
          "type": "string", 
          "description": "The name of the resource."
        }
      }
    }, 
    "io.k8s.api.storage.v1.VolumeAttachmentSource": {
      "type": "object", 
      "description": "VolumeAttachmentSource represents a volume that should be attached. Right now only PersistentVolumes can be attached via external attacher, in the future we may allow also inline volumes in pods. Exactly one member can be set.", 
      "properties": {
        "inlineVolumeSpec": {
          "description": "inlineVolumeSpec contains all the information necessary to attach a persistent volume defined by a pod's inline VolumeSource. This field is populated only for the CSIMigration feature. It contains translated fields from a pod's inline VolumeSource to a PersistentVolumeSpec. This field is beta-level and is only honored by servers that enabled the CSIMigration feature.", 
          "$ref": "#/definitions/io.k8s.api.core.v1.PersistentVolumeSpec"
        }, 
        "persistentVolumeName": {
          "type": "string", 
          "description": "persistentVolumeName represents the name of the persistent volume to attach."
        }
      }
    }, 
    "io.k8s.apimachinery.pkg.apis.meta.v1.APIResource": {
      "required": [
        "name", 
        "singularName", 
        "namespaced", 
        "kind", 
        "verbs"
      ], 
      "type": "object", 
      "description": "APIResource specifies the name of a resource and whether it is namespaced.", 
      "properties": {
        "shortNames": {
          "items": {
            "type": "string"
          }, 
          "type": "array", 
          "description": "shortNames is a list of suggested short names of the resource.", 
          "x-kubernetes-list-type": "atomic"
        }, 
        "namespaced": {
          "type": "boolean", 
          "description": "namespaced indicates if a resource is namespaced or not."
        }, 
        "kind": {
          "type": "string", 
          "description": "kind is the kind for the resource (e.g. 'Foo' is the kind for a resource 'foo')"
        }, 
        "group": {
          "type": "string", 
          "description": "group is the preferred group of the resource.  Empty implies the group of the containing resource list. For subresources, this may have a different value, for example: Scale\"."
        }, 
        "name": {
          "type": "string", 
          "description": "name is the plural name of the resource."
        }, 
        "version": {
          "type": "string", 
          "description": "version is the preferred version of the resource.  Empty implies the version of the containing resource list For subresources, this may have a different value, for example: v1 (while inside a v1beta1 version of the core resource's group)\"."
        }, 
        "singularName": {
          "type": "string", 
          "description": "singularName is the singular name of the resource.  This allows clients to handle plural and singular opaquely. The singularName is more correct for reporting status on a single item and both singular and plural are allowed from the kubectl CLI interface."
        }, 
        "storageVersionHash": {
          "type": "string", 
          "description": "The hash value of the storage version, the version this resource is converted to when written to the data store. Value must be treated as opaque by clients. Only equality comparison on the value is valid. This is an alpha feature and may change or be removed in the future. The field is populated by the apiserver only if the StorageVersionHash feature gate is enabled. This field will remain optional even if it graduates."
        }, 
        "categories": {
          "items": {
            "type": "string"
          }, 
          "type": "array", 
          "description": "categories is a list of the grouped resources this resource belongs to (e.g. 'all')", 
          "x-kubernetes-list-type": "atomic"
        }, 
        "verbs": {
          "items": {
            "type": "string"
          }, 
          "type": "array", 
          "description": "verbs is a list of supported kube verbs (this includes get, list, watch, create, update, patch, delete, deletecollection, and proxy)"
        }
      }
    }, 
    "io.k8s.api.admissionregistration.v1alpha1.MutatingAdmissionPolicyBinding": {
      "type": "object", 
      "x-kubernetes-group-version-kind": [
        {
          "kind": "MutatingAdmissionPolicyBinding", 
          "version": "v1alpha1", 
          "group": "admissionregistration.k8s.io"
        }
      ], 
      "description": "MutatingAdmissionPolicyBinding binds the MutatingAdmissionPolicy with parametrized resources. MutatingAdmissionPolicyBinding and the optional parameter resource together define how cluster administrators configure policies for clusters.\n\nFor a given admission request, each binding will cause its policy to be evaluated N times, where N is 1 for policies/bindings that don't use params, otherwise N is the number of parameters selected by the binding. Each evaluation is constrained by a [runtime cost budget](https://kubernetes.io/docs/reference/using-api/cel/#runtime-cost-budget).\n\nAdding/removing policies, bindings, or params can not affect whether a given (policy, binding, param) combination is within its own CEL budget.", 
      "properties": {
        "kind": {
          "enum": [
            "MutatingAdmissionPolicyBinding"
          ], 
          "type": "string", 
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
        }, 
        "spec": {
          "description": "Specification of the desired behavior of the MutatingAdmissionPolicyBinding.", 
          "$ref": "#/definitions/io.k8s.api.admissionregistration.v1alpha1.MutatingAdmissionPolicyBindingSpec"
        }, 
        "apiVersion": {
          "type": "string", 
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources"
        }, 
        "metadata": {
          "description": "Standard object metadata; More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata.", 
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        }
      }
    }, 
    "io.k8s.api.core.v1.Sysctl": {
      "required": [
        "name", 
        "value"
      ], 
      "type": "object", 
      "description": "Sysctl defines a kernel parameter to be set", 
      "properties": {
        "name": {
          "type": "string", 
          "description": "Name of a property to set"
        }, 
        "value": {
          "type": "string", 
          "description": "Value of a property to set"
        }
      }
    }, 
    "io.k8s.api.core.v1.SecretReference": {
      "type": "object", 
      "x-kubernetes-map-type": "atomic", 
      "description": "SecretReference represents a Secret Reference. It has enough information to retrieve secret in any namespace", 
      "properties": {
        "namespace": {
          "type": "string", 
          "description": "namespace defines the space within which the secret name must be unique."
        }, 
        "name": {
          "type": "string", 
          "description": "name is unique within a namespace to reference a secret resource."
        }
      }
    }, 
    "io.k8s.api.resource.v1.ResourceClaimTemplate": {
      "type": "object", 
      "required": [
        "spec"
      ], 
      "x-kubernetes-group-version-kind": [
        {
          "kind": "ResourceClaimTemplate", 
          "version": "v1", 
          "group": "resource.k8s.io"
        }
      ], 
      "description": "ResourceClaimTemplate is used to produce ResourceClaim objects.\n\nThis is an alpha type and requires enabling the DynamicResourceAllocation feature gate.", 
      "properties": {
        "kind": {
          "enum": [
            "ResourceClaimTemplate"
          ], 
          "type": "string", 
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
        }, 
        "spec": {
          "description": "Describes the ResourceClaim that is to be generated.\n\nThis field is immutable. A ResourceClaim will get created by the control plane for a Pod when needed and then not get updated anymore.", 
          "$ref": "#/definitions/io.k8s.api.resource.v1.ResourceClaimTemplateSpec"
        }, 
        "apiVersion": {
          "type": "string", 
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources"
        }, 
        "metadata": {
          "description": "Standard object metadata", 
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        }
      }
    }, 
    "io.k8s.api.resource.v1beta2.CapacityRequirements": {
      "type": "object", 
      "description": "CapacityRequirements defines the capacity requirements for a specific device request.", 
      "properties": {
        "requests": {
          "additionalProperties": {
            "$ref": "#/definitions/io.k8s.apimachinery.pkg.api.resource.Quantity"
          }, 
          "type": "object", 
          "description": "Requests represent individual device resource requests for distinct resources, all of which must be provided by the device.\n\nThis value is used as an additional filtering condition against the available capacity on the device. This is semantically equivalent to a CEL selector with `device.capacity[<domain>].<name>.compareTo(quantity(<request quantity>)) >= 0`. For example, device.capacity['test-driver.cdi.k8s.io'].counters.compareTo(quantity('2')) >= 0.\n\nWhen a requestPolicy is defined, the requested amount is adjusted upward to the nearest valid value based on the policy. If the requested amount cannot be adjusted to a valid value\u2014because it exceeds what the requestPolicy allows\u2014 the device is considered ineligible for allocation.\n\nFor any capacity that is not explicitly requested: - If no requestPolicy is set, the default consumed capacity is equal to the full device capacity\n  (i.e., the whole device is claimed).\n- If a requestPolicy is set, the default consumed capacity is determined according to that policy.\n\nIf the device allows multiple allocation, the aggregated amount across all requests must not exceed the capacity value. The consumed capacity, which may be adjusted based on the requestPolicy if defined, is recorded in the resource claim\u2019s status.devices[*].consumedCapacity field."
        }
      }
    }, 
    "io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.CustomResourceDefinitionStatus": {
      "type": "object", 
      "description": "CustomResourceDefinitionStatus indicates the state of the CustomResourceDefinition", 
      "properties": {
        "storedVersions": {
          "items": {
            "type": "string"
          }, 
          "type": "array", 
          "description": "storedVersions lists all versions of CustomResources that were ever persisted. Tracking these versions allows a migration path for stored versions in etcd. The field is mutable so a migration controller can finish a migration to another version (ensuring no old objects are left in storage), and then remove the rest of the versions from this list. Versions may not be removed from `spec.versions` while they exist in this list.", 
          "x-kubernetes-list-type": "atomic"
        }, 
        "acceptedNames": {
          "description": "acceptedNames are the names that are actually being used to serve discovery. They may be different than the names in spec.", 
          "$ref": "#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.CustomResourceDefinitionNames"
        }, 
        "conditions": {
          "items": {
            "$ref": "#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.CustomResourceDefinitionCondition"
          }, 
          "type": "array", 
          "description": "conditions indicate state for particular aspects of a CustomResourceDefinition", 
          "x-kubernetes-list-map-keys": [
            "type"
          ], 
          "x-kubernetes-list-type": "map"
        }
      }
    }, 
    "io.k8s.api.resource.v1beta1.DeviceClassList": {
      "type": "object", 
      "required": [
        "items"
      ], 
      "x-kubernetes-group-version-kind": [
        {
          "kind": "DeviceClassList", 
          "version": "v1beta1", 
          "group": "resource.k8s.io"
        }
      ], 
      "description": "DeviceClassList is a collection of classes.", 
      "properties": {
        "items": {
          "items": {
            "$ref": "#/definitions/io.k8s.api.resource.v1beta1.DeviceClass"
          }, 
          "type": "array", 
          "description": "Items is the list of resource classes."
        }, 
        "kind": {
          "enum": [
            "DeviceClassList"
          ], 
          "type": "string", 
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
        }, 
        "apiVersion": {
          "type": "string", 
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources"
        }, 
        "metadata": {
          "description": "Standard list metadata", 
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      }
    }, 
    "io.k8s.api.authentication.v1.TokenReview": {
      "type": "object", 
      "required": [
        "spec"
      ], 
      "x-kubernetes-group-version-kind": [
        {
          "kind": "TokenReview", 
          "version": "v1", 
          "group": "authentication.k8s.io"
        }
      ], 
      "description": "TokenReview attempts to authenticate a token to a known user. Note: TokenReview requests may be cached by the webhook token authenticator plugin in the kube-apiserver.", 
      "properties": {
        "status": {
          "description": "Status is filled in by the server and indicates whether the request can be authenticated.", 
          "$ref": "#/definitions/io.k8s.api.authentication.v1.TokenReviewStatus"
        }, 
        "kind": {
          "enum": [
            "TokenReview"
          ], 
          "type": "string", 
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
        }, 
        "spec": {
          "description": "Spec holds information about the request being evaluated", 
          "$ref": "#/definitions/io.k8s.api.authentication.v1.TokenReviewSpec"
        }, 
        "apiVersion": {
          "type": "string", 
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources"
        }, 
        "metadata": {
          "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata", 
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        }
      }
    }, 
    "io.k8s.api.apps.v1.DeploymentCondition": {
      "required": [
        "type", 
        "status"
      ], 
      "type": "object", 
      "description": "DeploymentCondition describes the state of a deployment at a certain point.", 
      "properties": {
        "status": {
          "type": "string", 
          "description": "Status of the condition, one of True, False, Unknown."
        }, 
        "reason": {
          "type": "string", 
          "description": "The reason for the condition's last transition."
        }, 
        "lastUpdateTime": {
          "description": "The last time this condition was updated.", 
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
        }, 
        "type": {
          "type": "string", 
          "description": "Type of deployment condition."
        }, 
        "message": {
          "type": "string", 
          "description": "A human readable message indicating details about the transition."
        }, 
        "lastTransitionTime": {
          "description": "Last time the condition transitioned from one status to another.", 
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
        }
      }
    }, 
    "io.k8s.api.apps.v1.DeploymentList": {
      "type": "object", 
      "required": [
        "items"
      ], 
      "x-kubernetes-group-version-kind": [
        {
          "kind": "DeploymentList", 
          "version": "v1", 
          "group": "apps"
        }
      ], 
      "description": "DeploymentList is a list of Deployments.", 
      "properties": {
        "items": {
          "items": {
            "$ref": "#/definitions/io.k8s.api.apps.v1.Deployment"
          }, 
          "type": "array", 
          "description": "Items is the list of Deployments."
        }, 
        "kind": {
          "enum": [
            "DeploymentList"
          ], 
          "type": "string", 
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
        }, 
        "apiVersion": {
          "type": "string", 
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources"
        }, 
        "metadata": {
          "description": "Standard list metadata.", 
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      }
    }, 
    "io.k8s.api.core.v1.EphemeralContainer": {
      "required": [
        "name"
      ], 
      "type": "object", 
      "description": "An EphemeralContainer is a temporary container that you may add to an existing Pod for user-initiated activities such as debugging. Ephemeral containers have no resource or scheduling guarantees, and they will not be restarted when they exit or when a Pod is removed or restarted. The kubelet may evict a Pod if an ephemeral container causes the Pod to exceed its resource allocation.\n\nTo add an ephemeral container, use the ephemeralcontainers subresource of an existing Pod. Ephemeral containers may not be removed or restarted.", 
      "properties": {
        "livenessProbe": {
          "description": "Probes are not allowed for ephemeral containers.", 
          "$ref": "#/definitions/io.k8s.api.core.v1.Probe"
        }, 
        "terminationMessagePath": {
          "type": "string", 
          "description": "Optional: Path at which the file to which the container's termination message will be written is mounted into the container's filesystem. Message written is intended to be brief final status, such as an assertion failure message. Will be truncated by the node if greater than 4096 bytes. The total message length across all containers will be limited to 12kb. Defaults to /dev/termination-log. Cannot be updated."
        }, 
        "stdinOnce": {
          "type": "boolean", 
          "description": "Whether the container runtime should close the stdin channel after it has been opened by a single attach. When stdin is true the stdin stream will remain open across multiple attach sessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the first client attaches to stdin, and then remains open and accepts data until the client disconnects, at which time stdin is closed and remains closed until the container is restarted. If this flag is false, a container processes that reads from stdin will never receive an EOF. Default is false"
        }, 
        "image": {
          "type": "string", 
          "description": "Container image name. More info: https://kubernetes.io/docs/concepts/containers/images"
        }, 
        "args": {
          "items": {
            "type": "string"
          }, 
          "type": "array", 
          "description": "Arguments to the entrypoint. The image's CMD is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. \"$$(VAR_NAME)\" will produce the string literal \"$(VAR_NAME)\". Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell", 
          "x-kubernetes-list-type": "atomic"
        }, 
        "volumeMounts": {
          "description": "Pod volumes to mount into the container's filesystem. Subpath mounts are not allowed for ephemeral containers. Cannot be updated.", 
          "x-kubernetes-list-map-keys": [
            "mountPath"
          ], 
          "x-kubernetes-patch-merge-key": "mountPath", 
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.VolumeMount"
          }, 
          "type": "array", 
          "x-kubernetes-list-type": "map", 
          "x-kubernetes-patch-strategy": "merge"
        }, 
        "tty": {
          "type": "boolean", 
          "description": "Whether this container should allocate a TTY for itself, also requires 'stdin' to be true. Default is false."
        }, 
        "restartPolicy": {
          "type": "string", 
          "description": "Restart policy for the container to manage the restart behavior of each container within a pod. You cannot set this field on ephemeral containers."
        }, 
        "lifecycle": {
          "description": "Lifecycle is not allowed for ephemeral containers.", 
          "$ref": "#/definitions/io.k8s.api.core.v1.Lifecycle"
        }, 
        "securityContext": {
          "description": "Optional: SecurityContext defines the security options the ephemeral container should be run with. If set, the fields of SecurityContext override the equivalent fields of PodSecurityContext.", 
          "$ref": "#/definitions/io.k8s.api.core.v1.SecurityContext"
        }, 
        "name": {
          "type": "string", 
          "description": "Name of the ephemeral container specified as a DNS_LABEL. This name must be unique among all containers, init containers and ephemeral containers."
        }, 
        "envFrom": {
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.EnvFromSource"
          }, 
          "type": "array", 
          "description": "List of sources to populate environment variables in the container. The keys defined within a source may consist of any printable ASCII characters except '='. When a key exists in multiple sources, the value associated with the last source will take precedence. Values defined by an Env with a duplicate key will take precedence. Cannot be updated.", 
          "x-kubernetes-list-type": "atomic"
        }, 
        "volumeDevices": {
          "description": "volumeDevices is the list of block devices to be used by the container.", 
          "x-kubernetes-list-map-keys": [
            "devicePath"
          ], 
          "x-kubernetes-patch-merge-key": "devicePath", 
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.VolumeDevice"
          }, 
          "type": "array", 
          "x-kubernetes-list-type": "map", 
          "x-kubernetes-patch-strategy": "merge"
        }, 
        "stdin": {
          "type": "boolean", 
          "description": "Whether this container should allocate a buffer for stdin in the container runtime. If this is not set, reads from stdin in the container will always result in EOF. Default is false."
        }, 
        "workingDir": {
          "type": "string", 
          "description": "Container's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image. Cannot be updated."
        }, 
        "terminationMessagePolicy": {
          "type": "string", 
          "description": "Indicate how the termination message should be populated. File will use the contents of terminationMessagePath to populate the container status message on both success and failure. FallbackToLogsOnError will use the last chunk of container log output if the termination message file is empty and the container exited with an error. The log output is limited to 2048 bytes or 80 lines, whichever is smaller. Defaults to File. Cannot be updated."
        }, 
        "command": {
          "items": {
            "type": "string"
          }, 
          "type": "array", 
          "description": "Entrypoint array. Not executed within a shell. The image's ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. \"$$(VAR_NAME)\" will produce the string literal \"$(VAR_NAME)\". Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell", 
          "x-kubernetes-list-type": "atomic"
        }, 
        "targetContainerName": {
          "type": "string", 
          "description": "If set, the name of the container from PodSpec that this ephemeral container targets. The ephemeral container will be run in the namespaces (IPC, PID, etc) of this container. If not set then the ephemeral container uses the namespaces configured in the Pod spec.\n\nThe container runtime must implement support for this feature. If the runtime does not support namespace targeting then the result of setting this field is undefined."
        }, 
        "env": {
          "description": "List of environment variables to set in the container. Cannot be updated.", 
          "x-kubernetes-list-map-keys": [
            "name"
          ], 
          "x-kubernetes-patch-merge-key": "name", 
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.EnvVar"
          }, 
          "type": "array", 
          "x-kubernetes-list-type": "map", 
          "x-kubernetes-patch-strategy": "merge"
        }, 
        "imagePullPolicy": {
          "type": "string", 
          "description": "Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More info: https://kubernetes.io/docs/concepts/containers/images#updating-images"
        }, 
        "readinessProbe": {
          "description": "Probes are not allowed for ephemeral containers.", 
          "$ref": "#/definitions/io.k8s.api.core.v1.Probe"
        }, 
        "resizePolicy": {
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.ContainerResizePolicy"
          }, 
          "type": "array", 
          "description": "Resources resize policy for the container.", 
          "x-kubernetes-list-type": "atomic"
        }, 
        "startupProbe": {
          "description": "Probes are not allowed for ephemeral containers.", 
          "$ref": "#/definitions/io.k8s.api.core.v1.Probe"
        }, 
        "restartPolicyRules": {
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.ContainerRestartRule"
          }, 
          "type": "array", 
          "description": "Represents a list of rules to be checked to determine if the container should be restarted on exit. You cannot set this field on ephemeral containers.", 
          "x-kubernetes-list-type": "atomic"
        }, 
        "ports": {
          "description": "Ports are not allowed for ephemeral containers.", 
          "x-kubernetes-list-map-keys": [
            "containerPort", 
            "protocol"
          ], 
          "x-kubernetes-patch-merge-key": "containerPort", 
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.ContainerPort"
          }, 
          "type": "array", 
          "x-kubernetes-list-type": "map", 
          "x-kubernetes-patch-strategy": "merge"
        }, 
        "resources": {
          "description": "Resources are not allowed for ephemeral containers. Ephemeral containers use spare resources already allocated to the pod.", 
          "$ref": "#/definitions/io.k8s.api.core.v1.ResourceRequirements"
        }
      }
    }, 
    "io.k8s.api.coordination.v1.LeaseList": {
      "type": "object", 
      "required": [
        "items"
      ], 
      "x-kubernetes-group-version-kind": [
        {
          "kind": "LeaseList", 
          "version": "v1", 
          "group": "coordination.k8s.io"
        }
      ], 
      "description": "LeaseList is a list of Lease objects.", 
      "properties": {
        "items": {
          "items": {
            "$ref": "#/definitions/io.k8s.api.coordination.v1.Lease"
          }, 
          "type": "array", 
          "description": "items is a list of schema objects."
        }, 
        "kind": {
          "enum": [
            "LeaseList"
          ], 
          "type": "string", 
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
        }, 
        "apiVersion": {
          "type": "string", 
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources"
        }, 
        "metadata": {
          "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata", 
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      }
    }, 
    "io.k8s.api.flowcontrol.v1.PriorityLevelConfigurationCondition": {
      "type": "object", 
      "description": "PriorityLevelConfigurationCondition defines the condition of priority level.", 
      "properties": {
        "status": {
          "type": "string", 
          "description": "`status` is the status of the condition. Can be True, False, Unknown. Required."
        }, 
        "lastTransitionTime": {
          "description": "`lastTransitionTime` is the last time the condition transitioned from one status to another.", 
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
        }, 
        "message": {
          "type": "string", 
          "description": "`message` is a human-readable message indicating details about last transition."
        }, 
        "type": {
          "type": "string", 
          "description": "`type` is the type of the condition. Required."
        }, 
        "reason": {
          "type": "string", 
          "description": "`reason` is a unique, one-word, CamelCase reason for the condition's last transition."
        }
      }
    }, 
    "io.k8s.api.authorization.v1.SelfSubjectRulesReviewSpec": {
      "type": "object", 
      "description": "SelfSubjectRulesReviewSpec defines the specification for SelfSubjectRulesReview.", 
      "properties": {
        "namespace": {
          "type": "string", 
          "description": "Namespace to evaluate rules for. Required."
        }
      }
    }, 
    "io.k8s.api.resource.v1beta2.ResourceSliceSpec": {
      "required": [
        "driver", 
        "pool"
      ], 
      "type": "object", 
      "description": "ResourceSliceSpec contains the information published by the driver in one ResourceSlice.", 
      "properties": {
        "nodeName": {
          "type": "string", 
          "description": "NodeName identifies the node which provides the resources in this pool. A field selector can be used to list only ResourceSlice objects belonging to a certain node.\n\nThis field can be used to limit access from nodes to ResourceSlices with the same node name. It also indicates to autoscalers that adding new nodes of the same type as some old node might also make new resources available.\n\nExactly one of NodeName, NodeSelector, AllNodes, and PerDeviceNodeSelection must be set. This field is immutable."
        }, 
        "sharedCounters": {
          "items": {
            "$ref": "#/definitions/io.k8s.api.resource.v1beta2.CounterSet"
          }, 
          "type": "array", 
          "description": "SharedCounters defines a list of counter sets, each of which has a name and a list of counters available.\n\nThe names of the SharedCounters must be unique in the ResourceSlice.\n\nThe maximum number of counters in all sets is 32.", 
          "x-kubernetes-list-type": "atomic"
        }, 
        "allNodes": {
          "type": "boolean", 
          "description": "AllNodes indicates that all nodes have access to the resources in the pool.\n\nExactly one of NodeName, NodeSelector, AllNodes, and PerDeviceNodeSelection must be set."
        }, 
        "driver": {
          "type": "string", 
          "description": "Driver identifies the DRA driver providing the capacity information. A field selector can be used to list only ResourceSlice objects with a certain driver name.\n\nMust be a DNS subdomain and should end with a DNS domain owned by the vendor of the driver. This field is immutable."
        }, 
        "devices": {
          "items": {
            "$ref": "#/definitions/io.k8s.api.resource.v1beta2.Device"
          }, 
          "type": "array", 
          "description": "Devices lists some or all of the devices in this pool.\n\nMust not have more than 128 entries.", 
          "x-kubernetes-list-type": "atomic"
        }, 
        "nodeSelector": {
          "description": "NodeSelector defines which nodes have access to the resources in the pool, when that pool is not limited to a single node.\n\nMust use exactly one term.\n\nExactly one of NodeName, NodeSelector, AllNodes, and PerDeviceNodeSelection must be set.", 
          "$ref": "#/definitions/io.k8s.api.core.v1.NodeSelector"
        }, 
        "perDeviceNodeSelection": {
          "type": "boolean", 
          "description": "PerDeviceNodeSelection defines whether the access from nodes to resources in the pool is set on the ResourceSlice level or on each device. If it is set to true, every device defined the ResourceSlice must specify this individually.\n\nExactly one of NodeName, NodeSelector, AllNodes, and PerDeviceNodeSelection must be set."
        }, 
        "pool": {
          "description": "Pool describes the pool that this ResourceSlice belongs to.", 
          "$ref": "#/definitions/io.k8s.api.resource.v1beta2.ResourcePool"
        }
      }
    }, 
    "io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.JSON": {
      "description": "JSON represents any valid JSON value. These types are supported: bool, int64, float64, string, []interface{}, map[string]interface{} and nil."
    }, 
    "io.k8s.api.core.v1.ResourceClaim": {
      "required": [
        "name"
      ], 
      "type": "object", 
      "description": "ResourceClaim references one entry in PodSpec.ResourceClaims.", 
      "properties": {
        "request": {
          "type": "string", 
          "description": "Request is the name chosen for a request in the referenced claim. If empty, everything from the claim is made available, otherwise only the result of this request."
        }, 
        "name": {
          "type": "string", 
          "description": "Name must match the name of one entry in pod.spec.resourceClaims of the Pod where this field is used. It makes that resource available inside a container."
        }
      }
    }, 
    "io.k8s.api.admissionregistration.v1beta1.MutatingAdmissionPolicy": {
      "type": "object", 
      "x-kubernetes-group-version-kind": [
        {
          "kind": "MutatingAdmissionPolicy", 
          "version": "v1beta1", 
          "group": "admissionregistration.k8s.io"
        }
      ], 
      "description": "MutatingAdmissionPolicy describes the definition of an admission mutation policy that mutates the object coming into admission chain.", 
      "properties": {
        "kind": {
          "enum": [
            "MutatingAdmissionPolicy"
          ], 
          "type": "string", 
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
        }, 
        "spec": {
          "description": "Specification of the desired behavior of the MutatingAdmissionPolicy.", 
          "$ref": "#/definitions/io.k8s.api.admissionregistration.v1beta1.MutatingAdmissionPolicySpec"
        }, 
        "apiVersion": {
          "type": "string", 
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources"
        }, 
        "metadata": {
          "description": "Standard object metadata; More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata.", 
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        }
      }
    }, 
    "io.k8s.api.core.v1.SecretList": {
      "type": "object", 
      "required": [
        "items"
      ], 
      "x-kubernetes-group-version-kind": [
        {
          "kind": "SecretList", 
          "version": "v1", 
          "group": ""
        }
      ], 
      "description": "SecretList is a list of Secret.", 
      "properties": {
        "items": {
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.Secret"
          }, 
          "type": "array", 
          "description": "Items is a list of secret objects. More info: https://kubernetes.io/docs/concepts/configuration/secret"
        }, 
        "kind": {
          "enum": [
            "SecretList"
          ], 
          "type": "string", 
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
        }, 
        "apiVersion": {
          "type": "string", 
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources"
        }, 
        "metadata": {
          "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds", 
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      }
    }, 
    "io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.SelectableField": {
      "required": [
        "jsonPath"
      ], 
      "type": "object", 
      "description": "SelectableField specifies the JSON path of a field that may be used with field selectors.", 
      "properties": {
        "jsonPath": {
          "type": "string", 
          "description": "jsonPath is a simple JSON path which is evaluated against each custom resource to produce a field selector value. Only JSON paths without the array notation are allowed. Must point to a field of type string, boolean or integer. Types with enum values and strings with formats are allowed. If jsonPath refers to absent field in a resource, the jsonPath evaluates to an empty string. Must not point to metdata fields. Required."
        }
      }
    }, 
    "io.k8s.api.networking.v1.IngressLoadBalancerIngress": {
      "type": "object", 
      "description": "IngressLoadBalancerIngress represents the status of a load-balancer ingress point.", 
      "properties": {
        "ip": {
          "type": "string", 
          "description": "ip is set for load-balancer ingress points that are IP based."
        }, 
        "hostname": {
          "type": "string", 
          "description": "hostname is set for load-balancer ingress points that are DNS based."
        }, 
        "ports": {
          "items": {
            "$ref": "#/definitions/io.k8s.api.networking.v1.IngressPortStatus"
          }, 
          "type": "array", 
          "description": "ports provides information about the ports exposed by this LoadBalancer.", 
          "x-kubernetes-list-type": "atomic"
        }
      }
    }, 
    "io.k8s.api.admissionregistration.v1alpha1.JSONPatch": {
      "type": "object", 
      "description": "JSONPatch defines a JSON Patch.", 
      "properties": {
        "expression": {
          "type": "string", 
          "description": "expression will be evaluated by CEL to create a [JSON patch](https://jsonpatch.com/). ref: https://github.com/google/cel-spec\n\nexpression must return an array of JSONPatch values.\n\nFor example, this CEL expression returns a JSON patch to conditionally modify a value:\n\n\t  [\n\t    JSONPatch{op: \"test\", path: \"/spec/example\", value: \"Red\"},\n\t    JSONPatch{op: \"replace\", path: \"/spec/example\", value: \"Green\"}\n\t  ]\n\nTo define an object for the patch value, use Object types. For example:\n\n\t  [\n\t    JSONPatch{\n\t      op: \"add\",\n\t      path: \"/spec/selector\",\n\t      value: Object.spec.selector{matchLabels: {\"environment\": \"test\"}}\n\t    }\n\t  ]\n\nTo use strings containing '/' and '~' as JSONPatch path keys, use \"jsonpatch.escapeKey\". For example:\n\n\t  [\n\t    JSONPatch{\n\t      op: \"add\",\n\t      path: \"/metadata/labels/\" + jsonpatch.escapeKey(\"example.com/environment\"),\n\t      value: \"test\"\n\t    },\n\t  ]\n\nCEL expressions have access to the types needed to create JSON patches and objects:\n\n- 'JSONPatch' - CEL type of JSON Patch operations. JSONPatch has the fields 'op', 'from', 'path' and 'value'.\n  See [JSON patch](https://jsonpatch.com/) for more details. The 'value' field may be set to any of: string,\n  integer, array, map or object.  If set, the 'path' and 'from' fields must be set to a\n  [JSON pointer](https://datatracker.ietf.org/doc/html/rfc6901/) string, where the 'jsonpatch.escapeKey()' CEL\n  function may be used to escape path keys containing '/' and '~'.\n- 'Object' - CEL type of the resource object. - 'Object.<fieldName>' - CEL type of object field (such as 'Object.spec') - 'Object.<fieldName1>.<fieldName2>...<fieldNameN>` - CEL type of nested field (such as 'Object.spec.containers')\n\nCEL expressions have access to the contents of the API request, organized into CEL variables as well as some other useful variables:\n\n- 'object' - The object from the incoming request. The value is null for DELETE requests. - 'oldObject' - The existing object. The value is null for CREATE requests. - 'request' - Attributes of the API request([ref](/pkg/apis/admission/types.go#AdmissionRequest)). - 'params' - Parameter resource referred to by the policy binding being evaluated. Only populated if the policy has a ParamKind. - 'namespaceObject' - The namespace object that the incoming object belongs to. The value is null for cluster-scoped resources. - 'variables' - Map of composited variables, from its name to its lazily evaluated value.\n  For example, a variable named 'foo' can be accessed as 'variables.foo'.\n- 'authorizer' - A CEL Authorizer. May be used to perform authorization checks for the principal (user or service account) of the request.\n  See https://pkg.go.dev/k8s.io/apiserver/pkg/cel/library#Authz\n- 'authorizer.requestResource' - A CEL ResourceCheck constructed from the 'authorizer' and configured with the\n  request resource.\n\nCEL expressions have access to [Kubernetes CEL function libraries](https://kubernetes.io/docs/reference/using-api/cel/#cel-options-language-features-and-libraries) as well as:\n\n- 'jsonpatch.escapeKey' - Performs JSONPatch key escaping. '~' and  '/' are escaped as '~0' and `~1' respectively).\n\nOnly property names of the form `[a-zA-Z_.-/][a-zA-Z0-9_.-/]*` are accessible. Required."
        }
      }
    }, 
    "io.k8s.api.resource.v1beta1.DeviceTaint": {
      "required": [
        "key", 
        "effect"
      ], 
      "type": "object", 
      "description": "The device this taint is attached to has the \"effect\" on any claim which does not tolerate the taint and, through the claim, to pods using the claim.", 
      "properties": {
        "key": {
          "type": "string", 
          "description": "The taint key to be applied to a device. Must be a label name."
        }, 
        "timeAdded": {
          "description": "TimeAdded represents the time at which the taint was added. Added automatically during create or update if not set.", 
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
        }, 
        "effect": {
          "type": "string", 
          "description": "The effect of the taint on claims that do not tolerate the taint and through such claims on the pods using them. Valid effects are NoSchedule and NoExecute. PreferNoSchedule as used for nodes is not valid here."
        }, 
        "value": {
          "type": "string", 
          "description": "The taint value corresponding to the taint key. Must be a label value."
        }
      }
    }, 
    "io.k8s.api.resource.v1beta1.DeviceCounterConsumption": {
      "required": [
        "counterSet", 
        "counters"
      ], 
      "type": "object", 
      "description": "DeviceCounterConsumption defines a set of counters that a device will consume from a CounterSet.", 
      "properties": {
        "counterSet": {
          "type": "string", 
          "description": "CounterSet is the name of the set from which the counters defined will be consumed."
        }, 
        "counters": {
          "additionalProperties": {
            "$ref": "#/definitions/io.k8s.api.resource.v1beta1.Counter"
          }, 
          "type": "object", 
          "description": "Counters defines the counters that will be consumed by the device.\n\nThe maximum number counters in a device is 32. In addition, the maximum number of all counters in all devices is 1024 (for example, 64 devices with 16 counters each)."
        }
      }
    }, 
    "io.k8s.api.resource.v1.OpaqueDeviceConfiguration": {
      "required": [
        "driver", 
        "parameters"
      ], 
      "type": "object", 
      "description": "OpaqueDeviceConfiguration contains configuration parameters for a driver in a format defined by the driver vendor.", 
      "properties": {
        "driver": {
          "type": "string", 
          "description": "Driver is used to determine which kubelet plugin needs to be passed these configuration parameters.\n\nAn admission policy provided by the driver developer could use this to decide whether it needs to validate them.\n\nMust be a DNS subdomain and should end with a DNS domain owned by the vendor of the driver."
        }, 
        "parameters": {
          "description": "Parameters can contain arbitrary data. It is the responsibility of the driver developer to handle validation and versioning. Typically this includes self-identification and a version (\"kind\" + \"apiVersion\" for Kubernetes types), with conversion between different versions.\n\nThe length of the raw data must be smaller or equal to 10 Ki.", 
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.runtime.RawExtension"
        }
      }
    }, 
    "io.k8s.api.authentication.v1.TokenRequest": {
      "type": "object", 
      "required": [
        "spec"
      ], 
      "x-kubernetes-group-version-kind": [
        {
          "kind": "TokenRequest", 
          "version": "v1", 
          "group": "authentication.k8s.io"
        }
      ], 
      "description": "TokenRequest requests a token for a given service account.", 
      "properties": {
        "status": {
          "description": "Status is filled in by the server and indicates whether the token can be authenticated.", 
          "$ref": "#/definitions/io.k8s.api.authentication.v1.TokenRequestStatus"
        }, 
        "kind": {
          "enum": [
            "TokenRequest"
          ], 
          "type": "string", 
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
        }, 
        "spec": {
          "description": "Spec holds information about the request being evaluated", 
          "$ref": "#/definitions/io.k8s.api.authentication.v1.TokenRequestSpec"
        }, 
        "apiVersion": {
          "type": "string", 
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources"
        }, 
        "metadata": {
          "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata", 
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        }
      }
    }, 
    "io.k8s.api.resource.v1beta1.ResourceClaimList": {
      "type": "object", 
      "required": [
        "items"
      ], 
      "x-kubernetes-group-version-kind": [
        {
          "kind": "ResourceClaimList", 
          "version": "v1beta1", 
          "group": "resource.k8s.io"
        }
      ], 
      "description": "ResourceClaimList is a collection of claims.", 
      "properties": {
        "items": {
          "items": {
            "$ref": "#/definitions/io.k8s.api.resource.v1beta1.ResourceClaim"
          }, 
          "type": "array", 
          "description": "Items is the list of resource claims."
        }, 
        "kind": {
          "enum": [
            "ResourceClaimList"
          ], 
          "type": "string", 
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
        }, 
        "apiVersion": {
          "type": "string", 
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources"
        }, 
        "metadata": {
          "description": "Standard list metadata", 
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      }
    }, 
    "io.k8s.api.core.v1.PodAffinity": {
      "type": "object", 
      "description": "Pod affinity is a group of inter pod affinity scheduling rules.", 
      "properties": {
        "requiredDuringSchedulingIgnoredDuringExecution": {
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.PodAffinityTerm"
          }, 
          "type": "array", 
          "description": "If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.", 
          "x-kubernetes-list-type": "atomic"
        }, 
        "preferredDuringSchedulingIgnoredDuringExecution": {
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.WeightedPodAffinityTerm"
          }, 
          "type": "array", 
          "description": "The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding \"weight\" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.", 
          "x-kubernetes-list-type": "atomic"
        }
      }
    }, 
    "io.k8s.api.core.v1.Service": {
      "type": "object", 
      "x-kubernetes-group-version-kind": [
        {
          "kind": "Service", 
          "version": "v1", 
          "group": ""
        }
      ], 
      "description": "Service is a named abstraction of software service (for example, mysql) consisting of local port (for example 3306) that the proxy listens on, and the selector that determines which pods will answer requests sent through the proxy.", 
      "properties": {
        "status": {
          "description": "Most recently observed status of the service. Populated by the system. Read-only. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status", 
          "$ref": "#/definitions/io.k8s.api.core.v1.ServiceStatus"
        }, 
        "kind": {
          "enum": [
            "Service"
          ], 
          "type": "string", 
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
        }, 
        "spec": {
          "description": "Spec defines the behavior of a service. https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status", 
          "$ref": "#/definitions/io.k8s.api.core.v1.ServiceSpec"
        }, 
        "apiVersion": {
          "type": "string", 
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources"
        }, 
        "metadata": {
          "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata", 
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        }
      }
    }, 
    "io.k8s.api.admissionregistration.v1alpha1.ParamRef": {
      "type": "object", 
      "x-kubernetes-map-type": "atomic", 
      "description": "ParamRef describes how to locate the params to be used as input to expressions of rules applied by a policy binding.", 
      "properties": {
        "namespace": {
          "type": "string", 
          "description": "namespace is the namespace of the referenced resource. Allows limiting the search for params to a specific namespace. Applies to both `name` and `selector` fields.\n\nA per-namespace parameter may be used by specifying a namespace-scoped `paramKind` in the policy and leaving this field empty.\n\n- If `paramKind` is cluster-scoped, this field MUST be unset. Setting this field results in a configuration error.\n\n- If `paramKind` is namespace-scoped, the namespace of the object being evaluated for admission will be used when this field is left unset. Take care that if this is left empty the binding must not match any cluster-scoped resources, which will result in an error."
        }, 
        "name": {
          "type": "string", 
          "description": "`name` is the name of the resource being referenced.\n\n`name` and `selector` are mutually exclusive properties. If one is set, the other must be unset."
        }, 
        "parameterNotFoundAction": {
          "type": "string", 
          "description": "`parameterNotFoundAction` controls the behavior of the binding when the resource exists, and name or selector is valid, but there are no parameters matched by the binding. If the value is set to `Allow`, then no matched parameters will be treated as successful validation by the binding. If set to `Deny`, then no matched parameters will be subject to the `failurePolicy` of the policy.\n\nAllowed values are `Allow` or `Deny` Default to `Deny`"
        }, 
        "selector": {
          "description": "selector can be used to match multiple param objects based on their labels. Supply selector: {} to match all resources of the ParamKind.\n\nIf multiple params are found, they are all evaluated with the policy expressions and the results are ANDed together.\n\nOne of `name` or `selector` must be set, but `name` and `selector` are mutually exclusive properties. If one is set, the other must be unset.", 
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector"
        }
      }
    }, 
    "io.k8s.api.resource.v1beta2.DeviceAttribute": {
      "type": "object", 
      "description": "DeviceAttribute must have exactly one field set.", 
      "properties": {
        "int": {
          "type": "integer", 
          "description": "IntValue is a number.", 
          "format": "int64"
        }, 
        "version": {
          "type": "string", 
          "description": "VersionValue is a semantic version according to semver.org spec 2.0.0. Must not be longer than 64 characters."
        }, 
        "bool": {
          "type": "boolean", 
          "description": "BoolValue is a true/false value."
        }, 
        "string": {
          "type": "string", 
          "description": "StringValue is a string. Must not be longer than 64 characters."
        }
      }
    }, 
    "io.k8s.api.core.v1.PortStatus": {
      "required": [
        "port", 
        "protocol"
      ], 
      "type": "object", 
      "description": "PortStatus represents the error condition of a service port", 
      "properties": {
        "protocol": {
          "type": "string", 
          "description": "Protocol is the protocol of the service port of which status is recorded here The supported values are: \"TCP\", \"UDP\", \"SCTP\""
        }, 
        "port": {
          "type": "integer", 
          "description": "Port is the port number of the service port of which status is recorded here", 
          "format": "int32"
        }, 
        "error": {
          "type": "string", 
          "description": "Error is to record the problem with the service port The format of the error shall comply with the following rules: - built-in error values shall be specified in this file and those shall use\n  CamelCase names\n- cloud provider specific error values must have names that comply with the\n  format foo.example.com/CamelCase."
        }
      }
    }, 
    "io.k8s.api.admissionregistration.v1.ValidatingWebhookConfigurationList": {
      "type": "object", 
      "required": [
        "items"
      ], 
      "x-kubernetes-group-version-kind": [
        {
          "kind": "ValidatingWebhookConfigurationList", 
          "version": "v1", 
          "group": "admissionregistration.k8s.io"
        }
      ], 
      "description": "ValidatingWebhookConfigurationList is a list of ValidatingWebhookConfiguration.", 
      "properties": {
        "items": {
          "items": {
            "$ref": "#/definitions/io.k8s.api.admissionregistration.v1.ValidatingWebhookConfiguration"
          }, 
          "type": "array", 
          "description": "List of ValidatingWebhookConfiguration."
        }, 
        "kind": {
          "enum": [
            "ValidatingWebhookConfigurationList"
          ], 
          "type": "string", 
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
        }, 
        "apiVersion": {
          "type": "string", 
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources"
        }, 
        "metadata": {
          "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds", 
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      }
    }, 
    "io.k8s.api.core.v1.Volume": {
      "required": [
        "name"
      ], 
      "type": "object", 
      "description": "Volume represents a named volume in a pod that may be accessed by any container in the pod.", 
      "properties": {
        "photonPersistentDisk": {
          "description": "photonPersistentDisk represents a PhotonController persistent disk attached and mounted on kubelets host machine. Deprecated: PhotonPersistentDisk is deprecated and the in-tree photonPersistentDisk type is no longer supported.", 
          "$ref": "#/definitions/io.k8s.api.core.v1.PhotonPersistentDiskVolumeSource"
        }, 
        "quobyte": {
          "description": "quobyte represents a Quobyte mount on the host that shares a pod's lifetime. Deprecated: Quobyte is deprecated and the in-tree quobyte type is no longer supported.", 
          "$ref": "#/definitions/io.k8s.api.core.v1.QuobyteVolumeSource"
        }, 
        "image": {
          "description": "image represents an OCI object (a container image or artifact) pulled and mounted on the kubelet's host machine. The volume is resolved at pod startup depending on which PullPolicy value is provided:\n\n- Always: the kubelet always attempts to pull the reference. Container creation will fail If the pull fails. - Never: the kubelet never pulls the reference and only uses a local image or artifact. Container creation will fail if the reference isn't present. - IfNotPresent: the kubelet pulls if the reference isn't already present on disk. Container creation will fail if the reference isn't present and the pull fails.\n\nThe volume gets re-resolved if the pod gets deleted and recreated, which means that new remote content will become available on pod recreation. A failure to resolve or pull the image during pod startup will block containers from starting and may add significant latency. Failures will be retried using normal volume backoff and will be reported on the pod reason and message. The types of objects that may be mounted by this volume are defined by the container runtime implementation on a host machine and at minimum must include all valid types supported by the container image field. The OCI object gets mounted in a single directory (spec.containers[*].volumeMounts.mountPath) by merging the manifest layers in the same way as for container images. The volume will be mounted read-only (ro) and non-executable files (noexec). Sub path mounts for containers are not supported (spec.containers[*].volumeMounts.subpath) before 1.33. The field spec.securityContext.fsGroupChangePolicy has no effect on this volume type.", 
          "$ref": "#/definitions/io.k8s.api.core.v1.ImageVolumeSource"
        }, 
        "azureDisk": {
          "description": "azureDisk represents an Azure Data Disk mount on the host and bind mount to the pod. Deprecated: AzureDisk is deprecated. All operations for the in-tree azureDisk type are redirected to the disk.csi.azure.com CSI driver.", 
          "$ref": "#/definitions/io.k8s.api.core.v1.AzureDiskVolumeSource"
        }, 
        "portworxVolume": {
          "description": "portworxVolume represents a portworx volume attached and mounted on kubelets host machine. Deprecated: PortworxVolume is deprecated. All operations for the in-tree portworxVolume type are redirected to the pxd.portworx.com CSI driver when the CSIMigrationPortworx feature-gate is on.", 
          "$ref": "#/definitions/io.k8s.api.core.v1.PortworxVolumeSource"
        }, 
        "glusterfs": {
          "description": "glusterfs represents a Glusterfs mount on the host that shares a pod's lifetime. Deprecated: Glusterfs is deprecated and the in-tree glusterfs type is no longer supported.", 
          "$ref": "#/definitions/io.k8s.api.core.v1.GlusterfsVolumeSource"
        }, 
        "gitRepo": {
          "description": "gitRepo represents a git repository at a particular revision. Deprecated: GitRepo is deprecated. To provision a container with a git repo, mount an EmptyDir into an InitContainer that clones the repo using git, then mount the EmptyDir into the Pod's container.", 
          "$ref": "#/definitions/io.k8s.api.core.v1.GitRepoVolumeSource"
        }, 
        "scaleIO": {
          "description": "scaleIO represents a ScaleIO persistent volume attached and mounted on Kubernetes nodes. Deprecated: ScaleIO is deprecated and the in-tree scaleIO type is no longer supported.", 
          "$ref": "#/definitions/io.k8s.api.core.v1.ScaleIOVolumeSource"
        }, 
        "emptyDir": {
          "description": "emptyDir represents a temporary directory that shares a pod's lifetime. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir", 
          "$ref": "#/definitions/io.k8s.api.core.v1.EmptyDirVolumeSource"
        }, 
        "cinder": {
          "description": "cinder represents a cinder volume attached and mounted on kubelets host machine. Deprecated: Cinder is deprecated. All operations for the in-tree cinder type are redirected to the cinder.csi.openstack.org CSI driver. More info: https://examples.k8s.io/mysql-cinder-pd/README.md", 
          "$ref": "#/definitions/io.k8s.api.core.v1.CinderVolumeSource"
        }, 
        "flocker": {
          "description": "flocker represents a Flocker volume attached to a kubelet's host machine. This depends on the Flocker control service being running. Deprecated: Flocker is deprecated and the in-tree flocker type is no longer supported.", 
          "$ref": "#/definitions/io.k8s.api.core.v1.FlockerVolumeSource"
        }, 
        "persistentVolumeClaim": {
          "description": "persistentVolumeClaimVolumeSource represents a reference to a PersistentVolumeClaim in the same namespace. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims", 
          "$ref": "#/definitions/io.k8s.api.core.v1.PersistentVolumeClaimVolumeSource"
        }, 
        "configMap": {
          "description": "configMap represents a configMap that should populate this volume", 
          "$ref": "#/definitions/io.k8s.api.core.v1.ConfigMapVolumeSource"
        }, 
        "cephfs": {
          "description": "cephFS represents a Ceph FS mount on the host that shares a pod's lifetime. Deprecated: CephFS is deprecated and the in-tree cephfs type is no longer supported.", 
          "$ref": "#/definitions/io.k8s.api.core.v1.CephFSVolumeSource"
        }, 
        "csi": {
          "description": "csi (Container Storage Interface) represents ephemeral storage that is handled by certain external CSI drivers.", 
          "$ref": "#/definitions/io.k8s.api.core.v1.CSIVolumeSource"
        }, 
        "name": {
          "type": "string", 
          "description": "name of the volume. Must be a DNS_LABEL and unique within the pod. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"
        }, 
        "iscsi": {
          "description": "iscsi represents an ISCSI Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes/#iscsi", 
          "$ref": "#/definitions/io.k8s.api.core.v1.ISCSIVolumeSource"
        }, 
        "ephemeral": {
          "description": "ephemeral represents a volume that is handled by a cluster storage driver. The volume's lifecycle is tied to the pod that defines it - it will be created before the pod starts, and deleted when the pod is removed.\n\nUse this if: a) the volume is only needed while the pod runs, b) features of normal volumes like restoring from snapshot or capacity\n   tracking are needed,\nc) the storage driver is specified through a storage class, and d) the storage driver supports dynamic volume provisioning through\n   a PersistentVolumeClaim (see EphemeralVolumeSource for more\n   information on the connection between this volume type\n   and PersistentVolumeClaim).\n\nUse PersistentVolumeClaim or one of the vendor-specific APIs for volumes that persist for longer than the lifecycle of an individual pod.\n\nUse CSI for light-weight local ephemeral volumes if the CSI driver is meant to be used that way - see the documentation of the driver for more information.\n\nA pod can use both types of ephemeral volumes and persistent volumes at the same time.", 
          "$ref": "#/definitions/io.k8s.api.core.v1.EphemeralVolumeSource"
        }, 
        "projected": {
          "description": "projected items for all in one resources secrets, configmaps, and downward API", 
          "$ref": "#/definitions/io.k8s.api.core.v1.ProjectedVolumeSource"
        }, 
        "downwardAPI": {
          "description": "downwardAPI represents downward API about the pod that should populate this volume", 
          "$ref": "#/definitions/io.k8s.api.core.v1.DownwardAPIVolumeSource"
        }, 
        "storageos": {
          "description": "storageOS represents a StorageOS volume attached and mounted on Kubernetes nodes. Deprecated: StorageOS is deprecated and the in-tree storageos type is no longer supported.", 
          "$ref": "#/definitions/io.k8s.api.core.v1.StorageOSVolumeSource"
        }, 
        "secret": {
          "description": "secret represents a secret that should populate this volume. More info: https://kubernetes.io/docs/concepts/storage/volumes#secret", 
          "$ref": "#/definitions/io.k8s.api.core.v1.SecretVolumeSource"
        }, 
        "fc": {
          "description": "fc represents a Fibre Channel resource that is attached to a kubelet's host machine and then exposed to the pod.", 
          "$ref": "#/definitions/io.k8s.api.core.v1.FCVolumeSource"
        }, 
        "nfs": {
          "description": "nfs represents an NFS mount on the host that shares a pod's lifetime More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs", 
          "$ref": "#/definitions/io.k8s.api.core.v1.NFSVolumeSource"
        }, 
        "gcePersistentDisk": {
          "description": "gcePersistentDisk represents a GCE Disk resource that is attached to a kubelet's host machine and then exposed to the pod. Deprecated: GCEPersistentDisk is deprecated. All operations for the in-tree gcePersistentDisk type are redirected to the pd.csi.storage.gke.io CSI driver. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk", 
          "$ref": "#/definitions/io.k8s.api.core.v1.GCEPersistentDiskVolumeSource"
        }, 
        "hostPath": {
          "description": "hostPath represents a pre-existing file or directory on the host machine that is directly exposed to the container. This is generally used for system agents or other privileged things that are allowed to see the host machine. Most containers will NOT need this. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath", 
          "$ref": "#/definitions/io.k8s.api.core.v1.HostPathVolumeSource"
        }, 
        "flexVolume": {
          "description": "flexVolume represents a generic volume resource that is provisioned/attached using an exec based plugin. Deprecated: FlexVolume is deprecated. Consider using a CSIDriver instead.", 
          "$ref": "#/definitions/io.k8s.api.core.v1.FlexVolumeSource"
        }, 
        "awsElasticBlockStore": {
          "description": "awsElasticBlockStore represents an AWS Disk resource that is attached to a kubelet's host machine and then exposed to the pod. Deprecated: AWSElasticBlockStore is deprecated. All operations for the in-tree awsElasticBlockStore type are redirected to the ebs.csi.aws.com CSI driver. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore", 
          "$ref": "#/definitions/io.k8s.api.core.v1.AWSElasticBlockStoreVolumeSource"
        }, 
        "rbd": {
          "description": "rbd represents a Rados Block Device mount on the host that shares a pod's lifetime. Deprecated: RBD is deprecated and the in-tree rbd type is no longer supported.", 
          "$ref": "#/definitions/io.k8s.api.core.v1.RBDVolumeSource"
        }, 
        "azureFile": {
          "description": "azureFile represents an Azure File Service mount on the host and bind mount to the pod. Deprecated: AzureFile is deprecated. All operations for the in-tree azureFile type are redirected to the file.csi.azure.com CSI driver.", 
          "$ref": "#/definitions/io.k8s.api.core.v1.AzureFileVolumeSource"
        }, 
        "vsphereVolume": {
          "description": "vsphereVolume represents a vSphere volume attached and mounted on kubelets host machine. Deprecated: VsphereVolume is deprecated. All operations for the in-tree vsphereVolume type are redirected to the csi.vsphere.vmware.com CSI driver.", 
          "$ref": "#/definitions/io.k8s.api.core.v1.VsphereVirtualDiskVolumeSource"
        }
      }
    }, 
    "io.k8s.api.storage.v1.CSINodeList": {
      "type": "object", 
      "required": [
        "items"
      ], 
      "x-kubernetes-group-version-kind": [
        {
          "kind": "CSINodeList", 
          "version": "v1", 
          "group": "storage.k8s.io"
        }
      ], 
      "description": "CSINodeList is a collection of CSINode objects.", 
      "properties": {
        "items": {
          "items": {
            "$ref": "#/definitions/io.k8s.api.storage.v1.CSINode"
          }, 
          "type": "array", 
          "description": "items is the list of CSINode"
        }, 
        "kind": {
          "enum": [
            "CSINodeList"
          ], 
          "type": "string", 
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
        }, 
        "apiVersion": {
          "type": "string", 
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources"
        }, 
        "metadata": {
          "description": "Standard list metadata More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata", 
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      }
    }, 
    "io.k8s.api.networking.v1.IngressSpec": {
      "type": "object", 
      "description": "IngressSpec describes the Ingress the user wishes to exist.", 
      "properties": {
        "rules": {
          "items": {
            "$ref": "#/definitions/io.k8s.api.networking.v1.IngressRule"
          }, 
          "type": "array", 
          "description": "rules is a list of host rules used to configure the Ingress. If unspecified, or no rule matches, all traffic is sent to the default backend.", 
          "x-kubernetes-list-type": "atomic"
        }, 
        "tls": {
          "items": {
            "$ref": "#/definitions/io.k8s.api.networking.v1.IngressTLS"
          }, 
          "type": "array", 
          "description": "tls represents the TLS configuration. Currently the Ingress only supports a single TLS port, 443. If multiple members of this list specify different hosts, they will be multiplexed on the same port according to the hostname specified through the SNI TLS extension, if the ingress controller fulfilling the ingress supports SNI.", 
          "x-kubernetes-list-type": "atomic"
        }, 
        "defaultBackend": {
          "description": "defaultBackend is the backend that should handle requests that don't match any rule. If Rules are not specified, DefaultBackend must be specified. If DefaultBackend is not set, the handling of requests that do not match any of the rules will be up to the Ingress controller.", 
          "$ref": "#/definitions/io.k8s.api.networking.v1.IngressBackend"
        }, 
        "ingressClassName": {
          "type": "string", 
          "description": "ingressClassName is the name of an IngressClass cluster resource. Ingress controller implementations use this field to know whether they should be serving this Ingress resource, by a transitive connection (controller -> IngressClass -> Ingress resource). Although the `kubernetes.io/ingress.class` annotation (simple constant name) was never formally defined, it was widely supported by Ingress controllers to create a direct binding between Ingress controller and Ingress resources. Newly created Ingress resources should prefer using the field. However, even though the annotation is officially deprecated, for backwards compatibility reasons, ingress controllers should still honor that annotation if present."
        }
      }
    }, 
    "io.k8s.api.core.v1.GRPCAction": {
      "required": [
        "port"
      ], 
      "type": "object", 
      "description": "GRPCAction specifies an action involving a GRPC service.", 
      "properties": {
        "port": {
          "type": "integer", 
          "description": "Port number of the gRPC service. Number must be in the range 1 to 65535.", 
          "format": "int32"
        }, 
        "service": {
          "type": "string", 
          "description": "Service is the name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md).\n\nIf this is not specified, the default behavior is defined by gRPC."
        }
      }
    }, 
    "io.k8s.api.admissionregistration.v1.Validation": {
      "required": [
        "expression"
      ], 
      "type": "object", 
      "description": "Validation specifies the CEL expression which is used to apply the validation.", 
      "properties": {
        "reason": {
          "type": "string", 
          "description": "Reason represents a machine-readable description of why this validation failed. If this is the first validation in the list to fail, this reason, as well as the corresponding HTTP response code, are used in the HTTP response to the client. The currently supported reasons are: \"Unauthorized\", \"Forbidden\", \"Invalid\", \"RequestEntityTooLarge\". If not set, StatusReasonInvalid is used in the response to the client."
        }, 
        "expression": {
          "type": "string", 
          "description": "Expression represents the expression which will be evaluated by CEL. ref: https://github.com/google/cel-spec CEL expressions have access to the contents of the API request/response, organized into CEL variables as well as some other useful variables:\n\n- 'object' - The object from the incoming request. The value is null for DELETE requests. - 'oldObject' - The existing object. The value is null for CREATE requests. - 'request' - Attributes of the API request([ref](/pkg/apis/admission/types.go#AdmissionRequest)). - 'params' - Parameter resource referred to by the policy binding being evaluated. Only populated if the policy has a ParamKind. - 'namespaceObject' - The namespace object that the incoming object belongs to. The value is null for cluster-scoped resources. - 'variables' - Map of composited variables, from its name to its lazily evaluated value.\n  For example, a variable named 'foo' can be accessed as 'variables.foo'.\n- 'authorizer' - A CEL Authorizer. May be used to perform authorization checks for the principal (user or service account) of the request.\n  See https://pkg.go.dev/k8s.io/apiserver/pkg/cel/library#Authz\n- 'authorizer.requestResource' - A CEL ResourceCheck constructed from the 'authorizer' and configured with the\n  request resource.\n\nThe `apiVersion`, `kind`, `metadata.name` and `metadata.generateName` are always accessible from the root of the object. No other metadata properties are accessible.\n\nOnly property names of the form `[a-zA-Z_.-/][a-zA-Z0-9_.-/]*` are accessible. Accessible property names are escaped according to the following rules when accessed in the expression: - '__' escapes to '__underscores__' - '.' escapes to '__dot__' - '-' escapes to '__dash__' - '/' escapes to '__slash__' - Property names that exactly match a CEL RESERVED keyword escape to '__{keyword}__'. The keywords are:\n\t  \"true\", \"false\", \"null\", \"in\", \"as\", \"break\", \"const\", \"continue\", \"else\", \"for\", \"function\", \"if\",\n\t  \"import\", \"let\", \"loop\", \"package\", \"namespace\", \"return\".\nExamples:\n  - Expression accessing a property named \"namespace\": {\"Expression\": \"object.__namespace__ > 0\"}\n  - Expression accessing a property named \"x-prop\": {\"Expression\": \"object.x__dash__prop > 0\"}\n  - Expression accessing a property named \"redact__d\": {\"Expression\": \"object.redact__underscores__d > 0\"}\n\nEquality on arrays with list type of 'set' or 'map' ignores element order, i.e. [1, 2] == [2, 1]. Concatenation on arrays with x-kubernetes-list-type use the semantics of the list type:\n  - 'set': `X + Y` performs a union where the array positions of all elements in `X` are preserved and\n    non-intersecting elements in `Y` are appended, retaining their partial order.\n  - 'map': `X + Y` performs a merge where the array positions of all keys in `X` are preserved but the values\n    are overwritten by values in `Y` when the key sets of `X` and `Y` intersect. Elements in `Y` with\n    non-intersecting keys are appended, retaining their partial order.\nRequired."
        }, 
        "message": {
          "type": "string", 
          "description": "Message represents the message displayed when validation fails. The message is required if the Expression contains line breaks. The message must not contain line breaks. If unset, the message is \"failed rule: {Rule}\". e.g. \"must be a URL with the host matching spec.host\" If the Expression contains line breaks. Message is required. The message must not contain line breaks. If unset, the message is \"failed Expression: {Expression}\"."
        }, 
        "messageExpression": {
          "type": "string", 
          "description": "messageExpression declares a CEL expression that evaluates to the validation failure message that is returned when this rule fails. Since messageExpression is used as a failure message, it must evaluate to a string. If both message and messageExpression are present on a validation, then messageExpression will be used if validation fails. If messageExpression results in a runtime error, the runtime error is logged, and the validation failure message is produced as if the messageExpression field were unset. If messageExpression evaluates to an empty string, a string with only spaces, or a string that contains line breaks, then the validation failure message will also be produced as if the messageExpression field were unset, and the fact that messageExpression produced an empty string/string with only spaces/string with line breaks will be logged. messageExpression has access to all the same variables as the `expression` except for 'authorizer' and 'authorizer.requestResource'. Example: \"object.x must be less than max (\"+string(params.max)+\")\""
        }
      }
    }, 
    "io.k8s.apimachinery.pkg.apis.meta.v1.Patch": {
      "type": "object", 
      "description": "Patch is provided to give a concrete name and type to the Kubernetes PATCH request body."
    }, 
    "io.k8s.api.core.v1.ScaleIOPersistentVolumeSource": {
      "required": [
        "gateway", 
        "system", 
        "secretRef"
      ], 
      "type": "object", 
      "description": "ScaleIOPersistentVolumeSource represents a persistent ScaleIO volume", 
      "properties": {
        "storageMode": {
          "type": "string", 
          "description": "storageMode indicates whether the storage for a volume should be ThickProvisioned or ThinProvisioned. Default is ThinProvisioned."
        }, 
        "secretRef": {
          "description": "secretRef references to the secret for ScaleIO user and other sensitive information. If this is not provided, Login operation will fail.", 
          "$ref": "#/definitions/io.k8s.api.core.v1.SecretReference"
        }, 
        "protectionDomain": {
          "type": "string", 
          "description": "protectionDomain is the name of the ScaleIO Protection Domain for the configured storage."
        }, 
        "volumeName": {
          "type": "string", 
          "description": "volumeName is the name of a volume already created in the ScaleIO system that is associated with this volume source."
        }, 
        "sslEnabled": {
          "type": "boolean", 
          "description": "sslEnabled is the flag to enable/disable SSL communication with Gateway, default false"
        }, 
        "system": {
          "type": "string", 
          "description": "system is the name of the storage system as configured in ScaleIO."
        }, 
        "fsType": {
          "type": "string", 
          "description": "fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". Default is \"xfs\""
        }, 
        "readOnly": {
          "type": "boolean", 
          "description": "readOnly defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts."
        }, 
        "storagePool": {
          "type": "string", 
          "description": "storagePool is the ScaleIO Storage Pool associated with the protection domain."
        }, 
        "gateway": {
          "type": "string", 
          "description": "gateway is the host address of the ScaleIO API Gateway."
        }
      }
    }, 
    "io.k8s.api.core.v1.NodeConfigSource": {
      "type": "object", 
      "description": "NodeConfigSource specifies a source of node configuration. Exactly one subfield (excluding metadata) must be non-nil. This API is deprecated since 1.22", 
      "properties": {
        "configMap": {
          "description": "ConfigMap is a reference to a Node's ConfigMap", 
          "$ref": "#/definitions/io.k8s.api.core.v1.ConfigMapNodeConfigSource"
        }
      }
    }, 
    "io.k8s.api.resource.v1alpha3.DeviceTaintRule": {
      "type": "object", 
      "required": [
        "spec"
      ], 
      "x-kubernetes-group-version-kind": [
        {
          "kind": "DeviceTaintRule", 
          "version": "v1alpha3", 
          "group": "resource.k8s.io"
        }
      ], 
      "description": "DeviceTaintRule adds one taint to all devices which match the selector. This has the same effect as if the taint was specified directly in the ResourceSlice by the DRA driver.", 
      "properties": {
        "kind": {
          "enum": [
            "DeviceTaintRule"
          ], 
          "type": "string", 
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
        }, 
        "spec": {
          "description": "Spec specifies the selector and one taint.\n\nChanging the spec automatically increments the metadata.generation number.", 
          "$ref": "#/definitions/io.k8s.api.resource.v1alpha3.DeviceTaintRuleSpec"
        }, 
        "apiVersion": {
          "type": "string", 
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources"
        }, 
        "metadata": {
          "description": "Standard object metadata", 
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        }
      }
    }, 
    "io.k8s.api.core.v1.ScopeSelector": {
      "type": "object", 
      "x-kubernetes-map-type": "atomic", 
      "description": "A scope selector represents the AND of the selectors represented by the scoped-resource selector requirements.", 
      "properties": {
        "matchExpressions": {
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.ScopedResourceSelectorRequirement"
          }, 
          "type": "array", 
          "description": "A list of scope selector requirements by scope of the resources.", 
          "x-kubernetes-list-type": "atomic"
        }
      }
    }, 
    "io.k8s.api.core.v1.EndpointSubset": {
      "type": "object", 
      "description": "EndpointSubset is a group of addresses with a common set of ports. The expanded set of endpoints is the Cartesian product of Addresses x Ports. For example, given:\n\n\t{\n\t  Addresses: [{\"ip\": \"10.10.1.1\"}, {\"ip\": \"10.10.2.2\"}],\n\t  Ports:     [{\"name\": \"a\", \"port\": 8675}, {\"name\": \"b\", \"port\": 309}]\n\t}\n\nThe resulting set of endpoints can be viewed as:\n\n\ta: [ 10.10.1.1:8675, 10.10.2.2:8675 ],\n\tb: [ 10.10.1.1:309, 10.10.2.2:309 ]\n\nDeprecated: This API is deprecated in v1.33+.", 
      "properties": {
        "notReadyAddresses": {
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.EndpointAddress"
          }, 
          "type": "array", 
          "description": "IP addresses which offer the related ports but are not currently marked as ready because they have not yet finished starting, have recently failed a readiness check, or have recently failed a liveness check.", 
          "x-kubernetes-list-type": "atomic"
        }, 
        "ports": {
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.EndpointPort"
          }, 
          "type": "array", 
          "description": "Port numbers available on the related IP addresses.", 
          "x-kubernetes-list-type": "atomic"
        }, 
        "addresses": {
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.EndpointAddress"
          }, 
          "type": "array", 
          "description": "IP addresses which offer the related ports that are marked as ready. These endpoints should be considered safe for load balancers and clients to utilize.", 
          "x-kubernetes-list-type": "atomic"
        }
      }
    }, 
    "io.k8s.api.core.v1.SELinuxOptions": {
      "type": "object", 
      "description": "SELinuxOptions are the labels to be applied to the container", 
      "properties": {
        "role": {
          "type": "string", 
          "description": "Role is a SELinux role label that applies to the container."
        }, 
        "type": {
          "type": "string", 
          "description": "Type is a SELinux type label that applies to the container."
        }, 
        "user": {
          "type": "string", 
          "description": "User is a SELinux user label that applies to the container."
        }, 
        "level": {
          "type": "string", 
          "description": "Level is SELinux level label that applies to the container."
        }
      }
    }, 
    "io.k8s.apimachinery.pkg.apis.meta.v1.Time": {
      "type": "string", 
      "description": "Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.", 
      "format": "date-time"
    }, 
    "io.k8s.api.core.v1.PodExtendedResourceClaimStatus": {
      "required": [
        "requestMappings", 
        "resourceClaimName"
      ], 
      "type": "object", 
      "description": "PodExtendedResourceClaimStatus is stored in the PodStatus for the extended resource requests backed by DRA. It stores the generated name for the corresponding special ResourceClaim created by the scheduler.", 
      "properties": {
        "resourceClaimName": {
          "type": "string", 
          "description": "ResourceClaimName is the name of the ResourceClaim that was generated for the Pod in the namespace of the Pod."
        }, 
        "requestMappings": {
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.ContainerExtendedResourceRequest"
          }, 
          "type": "array", 
          "description": "RequestMappings identifies the mapping of <container, extended resource backed by DRA> to  device request in the generated ResourceClaim.", 
          "x-kubernetes-list-type": "atomic"
        }
      }
    }, 
    "io.k8s.api.autoscaling.v2.ObjectMetricSource": {
      "required": [
        "describedObject", 
        "target", 
        "metric"
      ], 
      "type": "object", 
      "description": "ObjectMetricSource indicates how to scale on a metric describing a kubernetes object (for example, hits-per-second on an Ingress object).", 
      "properties": {
        "metric": {
          "description": "metric identifies the target metric by name and selector", 
          "$ref": "#/definitions/io.k8s.api.autoscaling.v2.MetricIdentifier"
        }, 
        "describedObject": {
          "description": "describedObject specifies the descriptions of a object,such as kind,name apiVersion", 
          "$ref": "#/definitions/io.k8s.api.autoscaling.v2.CrossVersionObjectReference"
        }, 
        "target": {
          "description": "target specifies the target value for the given metric", 
          "$ref": "#/definitions/io.k8s.api.autoscaling.v2.MetricTarget"
        }
      }
    }, 
    "io.k8s.apimachinery.pkg.runtime.RawExtension": {
      "type": "object", 
      "description": "RawExtension is used to hold extensions in external versions.\n\nTo use this, make a field which has RawExtension as its type in your external, versioned struct, and Object in your internal struct. You also need to register your various plugin types.\n\n// Internal package:\n\n\ttype MyAPIObject struct {\n\t\truntime.TypeMeta `json:\",inline\"`\n\t\tMyPlugin runtime.Object `json:\"myPlugin\"`\n\t}\n\n\ttype PluginA struct {\n\t\tAOption string `json:\"aOption\"`\n\t}\n\n// External package:\n\n\ttype MyAPIObject struct {\n\t\truntime.TypeMeta `json:\",inline\"`\n\t\tMyPlugin runtime.RawExtension `json:\"myPlugin\"`\n\t}\n\n\ttype PluginA struct {\n\t\tAOption string `json:\"aOption\"`\n\t}\n\n// On the wire, the JSON will look something like this:\n\n\t{\n\t\t\"kind\":\"MyAPIObject\",\n\t\t\"apiVersion\":\"v1\",\n\t\t\"myPlugin\": {\n\t\t\t\"kind\":\"PluginA\",\n\t\t\t\"aOption\":\"foo\",\n\t\t},\n\t}\n\nSo what happens? Decode first uses json or yaml to unmarshal the serialized data into your external MyAPIObject. That causes the raw JSON to be stored, but not unpacked. The next step is to copy (using pkg/conversion) into the internal struct. The runtime package's DefaultScheme has conversion functions installed which will unpack the JSON stored in RawExtension, turning it into the correct object type, and storing it in the Object. (TODO: In the case where the object is of an unknown type, a runtime.Unknown object will be created and stored.)"
    }, 
    "io.k8s.api.policy.v1.PodDisruptionBudgetStatus": {
      "required": [
        "disruptionsAllowed", 
        "currentHealthy", 
        "desiredHealthy", 
        "expectedPods"
      ], 
      "type": "object", 
      "description": "PodDisruptionBudgetStatus represents information about the status of a PodDisruptionBudget. Status may trail the actual state of a system.", 
      "properties": {
        "observedGeneration": {
          "type": "integer", 
          "description": "Most recent generation observed when updating this PDB status. DisruptionsAllowed and other status information is valid only if observedGeneration equals to PDB's object generation.", 
          "format": "int64"
        }, 
        "expectedPods": {
          "type": "integer", 
          "description": "total number of pods counted by this disruption budget", 
          "format": "int32"
        }, 
        "currentHealthy": {
          "type": "integer", 
          "description": "current number of healthy pods", 
          "format": "int32"
        }, 
        "disruptionsAllowed": {
          "type": "integer", 
          "description": "Number of pod disruptions that are currently allowed.", 
          "format": "int32"
        }, 
        "conditions": {
          "description": "Conditions contain conditions for PDB. The disruption controller sets the DisruptionAllowed condition. The following are known values for the reason field (additional reasons could be added in the future): - SyncFailed: The controller encountered an error and wasn't able to compute\n              the number of allowed disruptions. Therefore no disruptions are\n              allowed and the status of the condition will be False.\n- InsufficientPods: The number of pods are either at or below the number\n                    required by the PodDisruptionBudget. No disruptions are\n                    allowed and the status of the condition will be False.\n- SufficientPods: There are more pods than required by the PodDisruptionBudget.\n                  The condition will be True, and the number of allowed\n                  disruptions are provided by the disruptionsAllowed property.", 
          "x-kubernetes-list-map-keys": [
            "type"
          ], 
          "x-kubernetes-patch-merge-key": "type", 
          "items": {
            "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Condition"
          }, 
          "type": "array", 
          "x-kubernetes-list-type": "map", 
          "x-kubernetes-patch-strategy": "merge"
        }, 
        "disruptedPods": {
          "additionalProperties": {
            "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
          }, 
          "type": "object", 
          "description": "DisruptedPods contains information about pods whose eviction was processed by the API server eviction subresource handler but has not yet been observed by the PodDisruptionBudget controller. A pod will be in this map from the time when the API server processed the eviction request to the time when the pod is seen by PDB controller as having been marked for deletion (or after a timeout). The key in the map is the name of the pod and the value is the time when the API server processed the eviction request. If the deletion didn't occur and a pod is still there it will be removed from the list automatically by PodDisruptionBudget controller after some time. If everything goes smooth this map should be empty for the most of the time. Large number of entries in the map may indicate problems with pod deletions."
        }, 
        "desiredHealthy": {
          "type": "integer", 
          "description": "minimum desired number of healthy pods", 
          "format": "int32"
        }
      }
    }, 
    "io.k8s.api.resource.v1beta1.DeviceSelector": {
      "type": "object", 
      "description": "DeviceSelector must have exactly one field set.", 
      "properties": {
        "cel": {
          "description": "CEL contains a CEL expression for selecting a device.", 
          "$ref": "#/definitions/io.k8s.api.resource.v1beta1.CELDeviceSelector"
        }
      }
    }, 
    "io.k8s.api.storage.v1.TokenRequest": {
      "required": [
        "audience"
      ], 
      "type": "object", 
      "description": "TokenRequest contains parameters of a service account token.", 
      "properties": {
        "audience": {
          "type": "string", 
          "description": "audience is the intended audience of the token in \"TokenRequestSpec\". It will default to the audiences of kube apiserver."
        }, 
        "expirationSeconds": {
          "type": "integer", 
          "description": "expirationSeconds is the duration of validity of the token in \"TokenRequestSpec\". It has the same default value of \"ExpirationSeconds\" in \"TokenRequestSpec\".", 
          "format": "int64"
        }
      }
    }, 
    "io.k8s.api.core.v1.HostAlias": {
      "required": [
        "ip"
      ], 
      "type": "object", 
      "description": "HostAlias holds the mapping between IP and hostnames that will be injected as an entry in the pod's hosts file.", 
      "properties": {
        "ip": {
          "type": "string", 
          "description": "IP address of the host file entry."
        }, 
        "hostnames": {
          "items": {
            "type": "string"
          }, 
          "type": "array", 
          "description": "Hostnames for the above IP address.", 
          "x-kubernetes-list-type": "atomic"
        }
      }
    }, 
    "io.k8s.api.resource.v1.ResourcePool": {
      "required": [
        "name", 
        "generation", 
        "resourceSliceCount"
      ], 
      "type": "object", 
      "description": "ResourcePool describes the pool that ResourceSlices belong to.", 
      "properties": {
        "generation": {
          "type": "integer", 
          "description": "Generation tracks the change in a pool over time. Whenever a driver changes something about one or more of the resources in a pool, it must change the generation in all ResourceSlices which are part of that pool. Consumers of ResourceSlices should only consider resources from the pool with the highest generation number. The generation may be reset by drivers, which should be fine for consumers, assuming that all ResourceSlices in a pool are updated to match or deleted.\n\nCombined with ResourceSliceCount, this mechanism enables consumers to detect pools which are comprised of multiple ResourceSlices and are in an incomplete state.", 
          "format": "int64"
        }, 
        "name": {
          "type": "string", 
          "description": "Name is used to identify the pool. For node-local devices, this is often the node name, but this is not required.\n\nIt must not be longer than 253 characters and must consist of one or more DNS sub-domains separated by slashes. This field is immutable."
        }, 
        "resourceSliceCount": {
          "type": "integer", 
          "description": "ResourceSliceCount is the total number of ResourceSlices in the pool at this generation number. Must be greater than zero.\n\nConsumers can use this to check whether they have seen all ResourceSlices belonging to the same pool.", 
          "format": "int64"
        }
      }
    }, 
    "io.k8s.api.autoscaling.v2.PodsMetricSource": {
      "required": [
        "metric", 
        "target"
      ], 
      "type": "object", 
      "description": "PodsMetricSource indicates how to scale on a metric describing each pod in the current scale target (for example, transactions-processed-per-second). The values will be averaged together before being compared to the target value.", 
      "properties": {
        "metric": {
          "description": "metric identifies the target metric by name and selector", 
          "$ref": "#/definitions/io.k8s.api.autoscaling.v2.MetricIdentifier"
        }, 
        "target": {
          "description": "target specifies the target value for the given metric", 
          "$ref": "#/definitions/io.k8s.api.autoscaling.v2.MetricTarget"
        }
      }
    }, 
    "io.k8s.api.resource.v1beta1.OpaqueDeviceConfiguration": {
      "required": [
        "driver", 
        "parameters"
      ], 
      "type": "object", 
      "description": "OpaqueDeviceConfiguration contains configuration parameters for a driver in a format defined by the driver vendor.", 
      "properties": {
        "driver": {
          "type": "string", 
          "description": "Driver is used to determine which kubelet plugin needs to be passed these configuration parameters.\n\nAn admission policy provided by the driver developer could use this to decide whether it needs to validate them.\n\nMust be a DNS subdomain and should end with a DNS domain owned by the vendor of the driver."
        }, 
        "parameters": {
          "description": "Parameters can contain arbitrary data. It is the responsibility of the driver developer to handle validation and versioning. Typically this includes self-identification and a version (\"kind\" + \"apiVersion\" for Kubernetes types), with conversion between different versions.\n\nThe length of the raw data must be smaller or equal to 10 Ki.", 
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.runtime.RawExtension"
        }
      }
    }, 
    "io.k8s.api.resource.v1.DeviceCapacity": {
      "required": [
        "value"
      ], 
      "type": "object", 
      "description": "DeviceCapacity describes a quantity associated with a device.", 
      "properties": {
        "requestPolicy": {
          "description": "RequestPolicy defines how this DeviceCapacity must be consumed when the device is allowed to be shared by multiple allocations.\n\nThe Device must have allowMultipleAllocations set to true in order to set a requestPolicy.\n\nIf unset, capacity requests are unconstrained: requests can consume any amount of capacity, as long as the total consumed across all allocations does not exceed the device's defined capacity. If request is also unset, default is the full capacity value.", 
          "$ref": "#/definitions/io.k8s.api.resource.v1.CapacityRequestPolicy"
        }, 
        "value": {
          "description": "Value defines how much of a certain capacity that device has.\n\nThis field reflects the fixed total capacity and does not change. The consumed amount is tracked separately by scheduler and does not affect this value.", 
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.api.resource.Quantity"
        }
      }
    }, 
    "io.k8s.api.storagemigration.v1alpha1.MigrationCondition": {
      "required": [
        "type", 
        "status"
      ], 
      "type": "object", 
      "description": "Describes the state of a migration at a certain point.", 
      "properties": {
        "status": {
          "type": "string", 
          "description": "Status of the condition, one of True, False, Unknown."
        }, 
        "message": {
          "type": "string", 
          "description": "A human readable message indicating details about the transition."
        }, 
        "type": {
          "type": "string", 
          "description": "Type of the condition."
        }, 
        "reason": {
          "type": "string", 
          "description": "The reason for the condition's last transition."
        }, 
        "lastUpdateTime": {
          "description": "The last time this condition was updated.", 
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
        }
      }
    }, 
    "io.k8s.api.rbac.v1.ClusterRole": {
      "type": "object", 
      "x-kubernetes-group-version-kind": [
        {
          "kind": "ClusterRole", 
          "version": "v1", 
          "group": "rbac.authorization.k8s.io"
        }
      ], 
      "description": "ClusterRole is a cluster level, logical grouping of PolicyRules that can be referenced as a unit by a RoleBinding or ClusterRoleBinding.", 
      "properties": {
        "rules": {
          "items": {
            "$ref": "#/definitions/io.k8s.api.rbac.v1.PolicyRule"
          }, 
          "type": "array", 
          "description": "Rules holds all the PolicyRules for this ClusterRole", 
          "x-kubernetes-list-type": "atomic"
        }, 
        "kind": {
          "enum": [
            "ClusterRole"
          ], 
          "type": "string", 
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
        }, 
        "aggregationRule": {
          "description": "AggregationRule is an optional field that describes how to build the Rules for this ClusterRole. If AggregationRule is set, then the Rules are controller managed and direct changes to Rules will be stomped by the controller.", 
          "$ref": "#/definitions/io.k8s.api.rbac.v1.AggregationRule"
        }, 
        "apiVersion": {
          "type": "string", 
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources"
        }, 
        "metadata": {
          "description": "Standard object's metadata.", 
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        }
      }
    }, 
    "io.k8s.api.resource.v1beta1.BasicDevice": {
      "type": "object", 
      "description": "BasicDevice defines one device instance.", 
      "properties": {
        "consumesCounters": {
          "items": {
            "$ref": "#/definitions/io.k8s.api.resource.v1beta1.DeviceCounterConsumption"
          }, 
          "type": "array", 
          "description": "ConsumesCounters defines a list of references to sharedCounters and the set of counters that the device will consume from those counter sets.\n\nThere can only be a single entry per counterSet.\n\nThe total number of device counter consumption entries must be <= 32. In addition, the total number in the entire ResourceSlice must be <= 1024 (for example, 64 devices with 16 counters each).", 
          "x-kubernetes-list-type": "atomic"
        }, 
        "capacity": {
          "additionalProperties": {
            "$ref": "#/definitions/io.k8s.api.resource.v1beta1.DeviceCapacity"
          }, 
          "type": "object", 
          "description": "Capacity defines the set of capacities for this device. The name of each capacity must be unique in that set.\n\nThe maximum number of attributes and capacities combined is 32."
        }, 
        "bindingFailureConditions": {
          "items": {
            "type": "string"
          }, 
          "type": "array", 
          "description": "BindingFailureConditions defines the conditions for binding failure. They may be set in the per-device status conditions. If any is true, a binding failure occurred.\n\nThe maximum number of binding failure conditions is 4.\n\nThe conditions must be a valid condition type string.\n\nThis is an alpha field and requires enabling the DRADeviceBindingConditions and DRAResourceClaimDeviceStatus feature gates.", 
          "x-kubernetes-list-type": "atomic"
        }, 
        "allNodes": {
          "type": "boolean", 
          "description": "AllNodes indicates that all nodes have access to the device.\n\nMust only be set if Spec.PerDeviceNodeSelection is set to true. At most one of NodeName, NodeSelector and AllNodes can be set."
        }, 
        "allowMultipleAllocations": {
          "type": "boolean", 
          "description": "AllowMultipleAllocations marks whether the device is allowed to be allocated to multiple DeviceRequests.\n\nIf AllowMultipleAllocations is set to true, the device can be allocated more than once, and all of its capacity is consumable, regardless of whether the requestPolicy is defined or not."
        }, 
        "taints": {
          "items": {
            "$ref": "#/definitions/io.k8s.api.resource.v1beta1.DeviceTaint"
          }, 
          "type": "array", 
          "description": "If specified, these are the driver-defined taints.\n\nThe maximum number of taints is 4.\n\nThis is an alpha field and requires enabling the DRADeviceTaints feature gate.", 
          "x-kubernetes-list-type": "atomic"
        }, 
        "nodeSelector": {
          "description": "NodeSelector defines the nodes where the device is available.\n\nMust use exactly one term.\n\nMust only be set if Spec.PerDeviceNodeSelection is set to true. At most one of NodeName, NodeSelector and AllNodes can be set.", 
          "$ref": "#/definitions/io.k8s.api.core.v1.NodeSelector"
        }, 
        "bindingConditions": {
          "items": {
            "type": "string"
          }, 
          "type": "array", 
          "description": "BindingConditions defines the conditions for proceeding with binding. All of these conditions must be set in the per-device status conditions with a value of True to proceed with binding the pod to the node while scheduling the pod.\n\nThe maximum number of binding conditions is 4.\n\nThe conditions must be a valid condition type string.\n\nThis is an alpha field and requires enabling the DRADeviceBindingConditions and DRAResourceClaimDeviceStatus feature gates.", 
          "x-kubernetes-list-type": "atomic"
        }, 
        "attributes": {
          "additionalProperties": {
            "$ref": "#/definitions/io.k8s.api.resource.v1beta1.DeviceAttribute"
          }, 
          "type": "object", 
          "description": "Attributes defines the set of attributes for this device. The name of each attribute must be unique in that set.\n\nThe maximum number of attributes and capacities combined is 32."
        }, 
        "bindsToNode": {
          "type": "boolean", 
          "description": "BindsToNode indicates if the usage of an allocation involving this device has to be limited to exactly the node that was chosen when allocating the claim. If set to true, the scheduler will set the ResourceClaim.Status.Allocation.NodeSelector to match the node where the allocation was made.\n\nThis is an alpha field and requires enabling the DRADeviceBindingConditions and DRAResourceClaimDeviceStatus feature gates."
        }, 
        "nodeName": {
          "type": "string", 
          "description": "NodeName identifies the node where the device is available.\n\nMust only be set if Spec.PerDeviceNodeSelection is set to true. At most one of NodeName, NodeSelector and AllNodes can be set."
        }
      }
    }, 
    "io.k8s.api.core.v1.ContainerStateRunning": {
      "type": "object", 
      "description": "ContainerStateRunning is a running state of a container.", 
      "properties": {
        "startedAt": {
          "description": "Time at which the container was last (re-)started", 
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
        }
      }
    }, 
    "io.k8s.api.resource.v1beta1.DeviceClaim": {
      "type": "object", 
      "description": "DeviceClaim defines how to request devices with a ResourceClaim.", 
      "properties": {
        "requests": {
          "items": {
            "$ref": "#/definitions/io.k8s.api.resource.v1beta1.DeviceRequest"
          }, 
          "type": "array", 
          "description": "Requests represent individual requests for distinct devices which must all be satisfied. If empty, nothing needs to be allocated.", 
          "x-kubernetes-list-type": "atomic"
        }, 
        "config": {
          "items": {
            "$ref": "#/definitions/io.k8s.api.resource.v1beta1.DeviceClaimConfiguration"
          }, 
          "type": "array", 
          "description": "This field holds configuration for multiple potential drivers which could satisfy requests in this claim. It is ignored while allocating the claim.", 
          "x-kubernetes-list-type": "atomic"
        }, 
        "constraints": {
          "items": {
            "$ref": "#/definitions/io.k8s.api.resource.v1beta1.DeviceConstraint"
          }, 
          "type": "array", 
          "description": "These constraints must be satisfied by the set of devices that get allocated for the claim.", 
          "x-kubernetes-list-type": "atomic"
        }
      }
    }, 
    "io.k8s.api.autoscaling.v1.CrossVersionObjectReference": {
      "type": "object", 
      "required": [
        "kind", 
        "name"
      ], 
      "x-kubernetes-map-type": "atomic", 
      "description": "CrossVersionObjectReference contains enough information to let you identify the referred resource.", 
      "properties": {
        "kind": {
          "type": "string", 
          "description": "kind is the kind of the referent; More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
        }, 
        "name": {
          "type": "string", 
          "description": "name is the name of the referent; More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"
        }, 
        "apiVersion": {
          "type": "string", 
          "description": "apiVersion is the API version of the referent"
        }
      }
    }, 
    "io.k8s.api.apps.v1.RollingUpdateStatefulSetStrategy": {
      "type": "object", 
      "description": "RollingUpdateStatefulSetStrategy is used to communicate parameter for RollingUpdateStatefulSetStrategyType.", 
      "properties": {
        "partition": {
          "type": "integer", 
          "description": "Partition indicates the ordinal at which the StatefulSet should be partitioned for updates. During a rolling update, all pods from ordinal Replicas-1 to Partition are updated. All pods from ordinal Partition-1 to 0 remain untouched. This is helpful in being able to do a canary based deployment. The default value is 0.", 
          "format": "int32"
        }, 
        "maxUnavailable": {
          "description": "The maximum number of pods that can be unavailable during the update. Value can be an absolute number (ex: 5) or a percentage of desired pods (ex: 10%). Absolute number is calculated from percentage by rounding up. This can not be 0. Defaults to 1. This field is alpha-level and is only honored by servers that enable the MaxUnavailableStatefulSet feature. The field applies to all pods in the range 0 to Replicas-1. That means if there is any unavailable pod in the range 0 to Replicas-1, it will be counted towards MaxUnavailable.", 
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.util.intstr.IntOrString"
        }
      }
    }, 
    "io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.WebhookConversion": {
      "required": [
        "conversionReviewVersions"
      ], 
      "type": "object", 
      "description": "WebhookConversion describes how to call a conversion webhook", 
      "properties": {
        "clientConfig": {
          "description": "clientConfig is the instructions for how to call the webhook if strategy is `Webhook`.", 
          "$ref": "#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.WebhookClientConfig"
        }, 
        "conversionReviewVersions": {
          "items": {
            "type": "string"
          }, 
          "type": "array", 
          "description": "conversionReviewVersions is an ordered list of preferred `ConversionReview` versions the Webhook expects. The API server will use the first version in the list which it supports. If none of the versions specified in this list are supported by API server, conversion will fail for the custom resource. If a persisted Webhook configuration specifies allowed versions and does not include any versions known to the API Server, calls to the webhook will fail.", 
          "x-kubernetes-list-type": "atomic"
        }
      }
    }, 
    "io.k8s.api.authorization.v1.SelfSubjectAccessReviewSpec": {
      "type": "object", 
      "description": "SelfSubjectAccessReviewSpec is a description of the access request.  Exactly one of ResourceAuthorizationAttributes and NonResourceAuthorizationAttributes must be set", 
      "properties": {
        "nonResourceAttributes": {
          "description": "NonResourceAttributes describes information for a non-resource access request", 
          "$ref": "#/definitions/io.k8s.api.authorization.v1.NonResourceAttributes"
        }, 
        "resourceAttributes": {
          "description": "ResourceAuthorizationAttributes describes information for a resource access request", 
          "$ref": "#/definitions/io.k8s.api.authorization.v1.ResourceAttributes"
        }
      }
    }, 
    "io.k8s.api.core.v1.Secret": {
      "type": "object", 
      "x-kubernetes-group-version-kind": [
        {
          "kind": "Secret", 
          "version": "v1", 
          "group": ""
        }
      ], 
      "description": "Secret holds secret data of a certain type. The total bytes of the values in the Data field must be less than MaxSecretSize bytes.", 
      "properties": {
        "kind": {
          "enum": [
            "Secret"
          ], 
          "type": "string", 
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
        }, 
        "stringData": {
          "additionalProperties": {
            "type": "string"
          }, 
          "type": "object", 
          "description": "stringData allows specifying non-binary secret data in string form. It is provided as a write-only input field for convenience. All keys and values are merged into the data field on write, overwriting any existing values. The stringData field is never output when reading from the API."
        }, 
        "metadata": {
          "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata", 
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        }, 
        "type": {
          "type": "string", 
          "description": "Used to facilitate programmatic handling of secret data. More info: https://kubernetes.io/docs/concepts/configuration/secret/#secret-types"
        }, 
        "immutable": {
          "type": "boolean", 
          "description": "Immutable, if set to true, ensures that data stored in the Secret cannot be updated (only object metadata can be modified). If not set to true, the field can be modified at any time. Defaulted to nil."
        }, 
        "apiVersion": {
          "type": "string", 
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources"
        }, 
        "data": {
          "additionalProperties": {
            "type": "string", 
            "format": "byte"
          }, 
          "type": "object", 
          "description": "Data contains the secret data. Each key must consist of alphanumeric characters, '-', '_' or '.'. The serialized form of the secret data is a base64 encoded string, representing the arbitrary (possibly non-string) data value here. Described in https://tools.ietf.org/html/rfc4648#section-4"
        }
      }
    }, 
    "io.k8s.apimachinery.pkg.apis.meta.v1.FieldsV1": {
      "type": "object", 
      "description": "FieldsV1 stores a set of fields in a data structure like a Trie, in JSON format.\n\nEach key is either a '.' representing the field itself, and will always map to an empty set, or a string representing a sub-field or item. The string will follow one of these four formats: 'f:<name>', where <name> is the name of a field in a struct, or key in a map 'v:<value>', where <value> is the exact json formatted value of a list item 'i:<index>', where <index> is position of a item in a list 'k:<keys>', where <keys> is a map of  a list item's key fields to their unique values If a key maps to an empty Fields value, the field that key represents is part of the set.\n\nThe exact format is defined in sigs.k8s.io/structured-merge-diff"
    }, 
    "io.k8s.api.core.v1.VolumeMount": {
      "required": [
        "name", 
        "mountPath"
      ], 
      "type": "object", 
      "description": "VolumeMount describes a mounting of a Volume within a container.", 
      "properties": {
        "readOnly": {
          "type": "boolean", 
          "description": "Mounted read-only if true, read-write otherwise (false or unspecified). Defaults to false."
        }, 
        "mountPath": {
          "type": "string", 
          "description": "Path within the container at which the volume should be mounted.  Must not contain ':'."
        }, 
        "mountPropagation": {
          "type": "string", 
          "description": "mountPropagation determines how mounts are propagated from the host to container and the other way around. When not set, MountPropagationNone is used. This field is beta in 1.10. When RecursiveReadOnly is set to IfPossible or to Enabled, MountPropagation must be None or unspecified (which defaults to None)."
        }, 
        "name": {
          "type": "string", 
          "description": "This must match the Name of a Volume."
        }, 
        "subPath": {
          "type": "string", 
          "description": "Path within the volume from which the container's volume should be mounted. Defaults to \"\" (volume's root)."
        }, 
        "subPathExpr": {
          "type": "string", 
          "description": "Expanded path within the volume from which the container's volume should be mounted. Behaves similarly to SubPath but environment variable references $(VAR_NAME) are expanded using the container's environment. Defaults to \"\" (volume's root). SubPathExpr and SubPath are mutually exclusive."
        }, 
        "recursiveReadOnly": {
          "type": "string", 
          "description": "RecursiveReadOnly specifies whether read-only mounts should be handled recursively.\n\nIf ReadOnly is false, this field has no meaning and must be unspecified.\n\nIf ReadOnly is true, and this field is set to Disabled, the mount is not made recursively read-only.  If this field is set to IfPossible, the mount is made recursively read-only, if it is supported by the container runtime.  If this field is set to Enabled, the mount is made recursively read-only if it is supported by the container runtime, otherwise the pod will not be started and an error will be generated to indicate the reason.\n\nIf this field is set to IfPossible or Enabled, MountPropagation must be set to None (or be unspecified, which defaults to None).\n\nIf this field is not specified, it is treated as an equivalent of Disabled."
        }
      }
    }, 
    "io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent": {
      "type": "object", 
      "required": [
        "type", 
        "object"
      ], 
      "x-kubernetes-group-version-kind": [
        {
          "kind": "WatchEvent", 
          "version": "v1", 
          "group": ""
        }, 
        {
          "kind": "WatchEvent", 
          "version": "v1", 
          "group": "admission.k8s.io"
        }, 
        {
          "kind": "WatchEvent", 
          "version": "v1beta1", 
          "group": "admission.k8s.io"
        }, 
        {
          "kind": "WatchEvent", 
          "version": "v1", 
          "group": "admissionregistration.k8s.io"
        }, 
        {
          "kind": "WatchEvent", 
          "version": "v1alpha1", 
          "group": "admissionregistration.k8s.io"
        }, 
        {
          "kind": "WatchEvent", 
          "version": "v1beta1", 
          "group": "admissionregistration.k8s.io"
        }, 
        {
          "kind": "WatchEvent", 
          "version": "v1", 
          "group": "apiextensions.k8s.io"
        }, 
        {
          "kind": "WatchEvent", 
          "version": "v1beta1", 
          "group": "apiextensions.k8s.io"
        }, 
        {
          "kind": "WatchEvent", 
          "version": "v1", 
          "group": "apiregistration.k8s.io"
        }, 
        {
          "kind": "WatchEvent", 
          "version": "v1beta1", 
          "group": "apiregistration.k8s.io"
        }, 
        {
          "kind": "WatchEvent", 
          "version": "v1", 
          "group": "apps"
        }, 
        {
          "kind": "WatchEvent", 
          "version": "v1beta1", 
          "group": "apps"
        }, 
        {
          "kind": "WatchEvent", 
          "version": "v1beta2", 
          "group": "apps"
        }, 
        {
          "kind": "WatchEvent", 
          "version": "v1", 
          "group": "authentication.k8s.io"
        }, 
        {
          "kind": "WatchEvent", 
          "version": "v1alpha1", 
          "group": "authentication.k8s.io"
        }, 
        {
          "kind": "WatchEvent", 
          "version": "v1beta1", 
          "group": "authentication.k8s.io"
        }, 
        {
          "kind": "WatchEvent", 
          "version": "v1", 
          "group": "authorization.k8s.io"
        }, 
        {
          "kind": "WatchEvent", 
          "version": "v1beta1", 
          "group": "authorization.k8s.io"
        }, 
        {
          "kind": "WatchEvent", 
          "version": "v1", 
          "group": "autoscaling"
        }, 
        {
          "kind": "WatchEvent", 
          "version": "v2", 
          "group": "autoscaling"
        }, 
        {
          "kind": "WatchEvent", 
          "version": "v2beta1", 
          "group": "autoscaling"
        }, 
        {
          "kind": "WatchEvent", 
          "version": "v2beta2", 
          "group": "autoscaling"
        }, 
        {
          "kind": "WatchEvent", 
          "version": "v1", 
          "group": "batch"
        }, 
        {
          "kind": "WatchEvent", 
          "version": "v1beta1", 
          "group": "batch"
        }, 
        {
          "kind": "WatchEvent", 
          "version": "v1", 
          "group": "certificates.k8s.io"
        }, 
        {
          "kind": "WatchEvent", 
          "version": "v1alpha1", 
          "group": "certificates.k8s.io"
        }, 
        {
          "kind": "WatchEvent", 
          "version": "v1beta1", 
          "group": "certificates.k8s.io"
        }, 
        {
          "kind": "WatchEvent", 
          "version": "v1", 
          "group": "coordination.k8s.io"
        }, 
        {
          "kind": "WatchEvent", 
          "version": "v1alpha2", 
          "group": "coordination.k8s.io"
        }, 
        {
          "kind": "WatchEvent", 
          "version": "v1beta1", 
          "group": "coordination.k8s.io"
        }, 
        {
          "kind": "WatchEvent", 
          "version": "v1", 
          "group": "discovery.k8s.io"
        }, 
        {
          "kind": "WatchEvent", 
          "version": "v1beta1", 
          "group": "discovery.k8s.io"
        }, 
        {
          "kind": "WatchEvent", 
          "version": "v1", 
          "group": "events.k8s.io"
        }, 
        {
          "kind": "WatchEvent", 
          "version": "v1beta1", 
          "group": "events.k8s.io"
        }, 
        {
          "kind": "WatchEvent", 
          "version": "v1beta1", 
          "group": "extensions"
        }, 
        {
          "kind": "WatchEvent", 
          "version": "v1", 
          "group": "flowcontrol.apiserver.k8s.io"
        }, 
        {
          "kind": "WatchEvent", 
          "version": "v1beta1", 
          "group": "flowcontrol.apiserver.k8s.io"
        }, 
        {
          "kind": "WatchEvent", 
          "version": "v1beta2", 
          "group": "flowcontrol.apiserver.k8s.io"
        }, 
        {
          "kind": "WatchEvent", 
          "version": "v1beta3", 
          "group": "flowcontrol.apiserver.k8s.io"
        }, 
        {
          "kind": "WatchEvent", 
          "version": "v1alpha1", 
          "group": "imagepolicy.k8s.io"
        }, 
        {
          "kind": "WatchEvent", 
          "version": "v1alpha1", 
          "group": "internal.apiserver.k8s.io"
        }, 
        {
          "kind": "WatchEvent", 
          "version": "v1", 
          "group": "networking.k8s.io"
        }, 
        {
          "kind": "WatchEvent", 
          "version": "v1beta1", 
          "group": "networking.k8s.io"
        }, 
        {
          "kind": "WatchEvent", 
          "version": "v1", 
          "group": "node.k8s.io"
        }, 
        {
          "kind": "WatchEvent", 
          "version": "v1alpha1", 
          "group": "node.k8s.io"
        }, 
        {
          "kind": "WatchEvent", 
          "version": "v1beta1", 
          "group": "node.k8s.io"
        }, 
        {
          "kind": "WatchEvent", 
          "version": "v1", 
          "group": "policy"
        }, 
        {
          "kind": "WatchEvent", 
          "version": "v1beta1", 
          "group": "policy"
        }, 
        {
          "kind": "WatchEvent", 
          "version": "v1", 
          "group": "rbac.authorization.k8s.io"
        }, 
        {
          "kind": "WatchEvent", 
          "version": "v1alpha1", 
          "group": "rbac.authorization.k8s.io"
        }, 
        {
          "kind": "WatchEvent", 
          "version": "v1beta1", 
          "group": "rbac.authorization.k8s.io"
        }, 
        {
          "kind": "WatchEvent", 
          "version": "v1", 
          "group": "resource.k8s.io"
        }, 
        {
          "kind": "WatchEvent", 
          "version": "v1alpha3", 
          "group": "resource.k8s.io"
        }, 
        {
          "kind": "WatchEvent", 
          "version": "v1beta1", 
          "group": "resource.k8s.io"
        }, 
        {
          "kind": "WatchEvent", 
          "version": "v1beta2", 
          "group": "resource.k8s.io"
        }, 
        {
          "kind": "WatchEvent", 
          "version": "v1", 
          "group": "scheduling.k8s.io"
        }, 
        {
          "kind": "WatchEvent", 
          "version": "v1alpha1", 
          "group": "scheduling.k8s.io"
        }, 
        {
          "kind": "WatchEvent", 
          "version": "v1beta1", 
          "group": "scheduling.k8s.io"
        }, 
        {
          "kind": "WatchEvent", 
          "version": "v1", 
          "group": "storage.k8s.io"
        }, 
        {
          "kind": "WatchEvent", 
          "version": "v1alpha1", 
          "group": "storage.k8s.io"
        }, 
        {
          "kind": "WatchEvent", 
          "version": "v1beta1", 
          "group": "storage.k8s.io"
        }, 
        {
          "kind": "WatchEvent", 
          "version": "v1alpha1", 
          "group": "storagemigration.k8s.io"
        }
      ], 
      "description": "Event represents a single event to a watched resource.", 
      "properties": {
        "object": {
          "description": "Object is:\n * If Type is Added or Modified: the new state of the object.\n * If Type is Deleted: the state of the object immediately before deletion.\n * If Type is Error: *Status is recommended; other types may make sense\n   depending on context.", 
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.runtime.RawExtension"
        }, 
        "type": {
          "type": "string"
        }
      }
    }, 
    "io.k8s.api.admissionregistration.v1beta1.Variable": {
      "type": "object", 
      "required": [
        "name", 
        "expression"
      ], 
      "x-kubernetes-map-type": "atomic", 
      "description": "Variable is the definition of a variable that is used for composition. A variable is defined as a named expression.", 
      "properties": {
        "expression": {
          "type": "string", 
          "description": "Expression is the expression that will be evaluated as the value of the variable. The CEL expression has access to the same identifiers as the CEL expressions in Validation."
        }, 
        "name": {
          "type": "string", 
          "description": "Name is the name of the variable. The name must be a valid CEL identifier and unique among all variables. The variable can be accessed in other expressions through `variables` For example, if name is \"foo\", the variable will be available as `variables.foo`"
        }
      }
    }, 
    "io.k8s.api.core.v1.AzureFileVolumeSource": {
      "required": [
        "secretName", 
        "shareName"
      ], 
      "type": "object", 
      "description": "AzureFile represents an Azure File Service mount on the host and bind mount to the pod.", 
      "properties": {
        "shareName": {
          "type": "string", 
          "description": "shareName is the azure share Name"
        }, 
        "readOnly": {
          "type": "boolean", 
          "description": "readOnly defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts."
        }, 
        "secretName": {
          "type": "string", 
          "description": "secretName is the  name of secret that contains Azure Storage Account Name and Key"
        }
      }
    }, 
    "io.k8s.api.core.v1.ClusterTrustBundleProjection": {
      "required": [
        "path"
      ], 
      "type": "object", 
      "description": "ClusterTrustBundleProjection describes how to select a set of ClusterTrustBundle objects and project their contents into the pod filesystem.", 
      "properties": {
        "labelSelector": {
          "description": "Select all ClusterTrustBundles that match this label selector.  Only has effect if signerName is set.  Mutually-exclusive with name.  If unset, interpreted as \"match nothing\".  If set but empty, interpreted as \"match everything\".", 
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector"
        }, 
        "path": {
          "type": "string", 
          "description": "Relative path from the volume root to write the bundle."
        }, 
        "optional": {
          "type": "boolean", 
          "description": "If true, don't block pod startup if the referenced ClusterTrustBundle(s) aren't available.  If using name, then the named ClusterTrustBundle is allowed not to exist.  If using signerName, then the combination of signerName and labelSelector is allowed to match zero ClusterTrustBundles."
        }, 
        "name": {
          "type": "string", 
          "description": "Select a single ClusterTrustBundle by object name.  Mutually-exclusive with signerName and labelSelector."
        }, 
        "signerName": {
          "type": "string", 
          "description": "Select all ClusterTrustBundles that match this signer name. Mutually-exclusive with name.  The contents of all selected ClusterTrustBundles will be unified and deduplicated."
        }
      }
    }, 
    "io.k8s.api.resource.v1beta2.ResourceClaimStatus": {
      "type": "object", 
      "description": "ResourceClaimStatus tracks whether the resource has been allocated and what the result of that was.", 
      "properties": {
        "allocation": {
          "description": "Allocation is set once the claim has been allocated successfully.", 
          "$ref": "#/definitions/io.k8s.api.resource.v1beta2.AllocationResult"
        }, 
        "reservedFor": {
          "description": "ReservedFor indicates which entities are currently allowed to use the claim. A Pod which references a ResourceClaim which is not reserved for that Pod will not be started. A claim that is in use or might be in use because it has been reserved must not get deallocated.\n\nIn a cluster with multiple scheduler instances, two pods might get scheduled concurrently by different schedulers. When they reference the same ResourceClaim which already has reached its maximum number of consumers, only one pod can be scheduled.\n\nBoth schedulers try to add their pod to the claim.status.reservedFor field, but only the update that reaches the API server first gets stored. The other one fails with an error and the scheduler which issued it knows that it must put the pod back into the queue, waiting for the ResourceClaim to become usable again.\n\nThere can be at most 256 such reservations. This may get increased in the future, but not reduced.", 
          "x-kubernetes-list-map-keys": [
            "uid"
          ], 
          "x-kubernetes-patch-merge-key": "uid", 
          "items": {
            "$ref": "#/definitions/io.k8s.api.resource.v1beta2.ResourceClaimConsumerReference"
          }, 
          "type": "array", 
          "x-kubernetes-list-type": "map", 
          "x-kubernetes-patch-strategy": "merge"
        }, 
        "devices": {
          "items": {
            "$ref": "#/definitions/io.k8s.api.resource.v1beta2.AllocatedDeviceStatus"
          }, 
          "type": "array", 
          "description": "Devices contains the status of each device allocated for this claim, as reported by the driver. This can include driver-specific information. Entries are owned by their respective drivers.", 
          "x-kubernetes-list-map-keys": [
            "driver", 
            "device", 
            "pool", 
            "shareID"
          ], 
          "x-kubernetes-list-type": "map"
        }
      }
    }, 
    "io.k8s.api.core.v1.NamespaceCondition": {
      "required": [
        "type", 
        "status"
      ], 
      "type": "object", 
      "description": "NamespaceCondition contains details about state of namespace.", 
      "properties": {
        "status": {
          "type": "string", 
          "description": "Status of the condition, one of True, False, Unknown."
        }, 
        "lastTransitionTime": {
          "description": "Last time the condition transitioned from one status to another.", 
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
        }, 
        "message": {
          "type": "string", 
          "description": "Human-readable message indicating details about last transition."
        }, 
        "type": {
          "type": "string", 
          "description": "Type of namespace controller condition."
        }, 
        "reason": {
          "type": "string", 
          "description": "Unique, one-word, CamelCase reason for the condition's last transition."
        }
      }
    }, 
    "io.k8s.api.core.v1.AppArmorProfile": {
      "x-kubernetes-unions": [
        {
          "discriminator": "type", 
          "fields-to-discriminateBy": {
            "localhostProfile": "LocalhostProfile"
          }
        }
      ], 
      "required": [
        "type"
      ], 
      "type": "object", 
      "description": "AppArmorProfile defines a pod or container's AppArmor settings.", 
      "properties": {
        "localhostProfile": {
          "type": "string", 
          "description": "localhostProfile indicates a profile loaded on the node that should be used. The profile must be preconfigured on the node to work. Must match the loaded name of the profile. Must be set if and only if type is \"Localhost\"."
        }, 
        "type": {
          "type": "string", 
          "description": "type indicates which kind of AppArmor profile will be applied. Valid options are:\n  Localhost - a profile pre-loaded on the node.\n  RuntimeDefault - the container runtime's default profile.\n  Unconfined - no AppArmor enforcement."
        }
      }
    }, 
    "io.k8s.api.autoscaling.v2.MetricSpec": {
      "required": [
        "type"
      ], 
      "type": "object", 
      "description": "MetricSpec specifies how to scale based on a single metric (only `type` and one other matching field should be set at once).", 
      "properties": {
        "containerResource": {
          "description": "containerResource refers to a resource metric (such as those specified in requests and limits) known to Kubernetes describing a single container in each pod of the current scale target (e.g. CPU or memory). Such metrics are built in to Kubernetes, and have special scaling options on top of those available to normal per-pod metrics using the \"pods\" source.", 
          "$ref": "#/definitions/io.k8s.api.autoscaling.v2.ContainerResourceMetricSource"
        }, 
        "resource": {
          "description": "resource refers to a resource metric (such as those specified in requests and limits) known to Kubernetes describing each pod in the current scale target (e.g. CPU or memory). Such metrics are built in to Kubernetes, and have special scaling options on top of those available to normal per-pod metrics using the \"pods\" source.", 
          "$ref": "#/definitions/io.k8s.api.autoscaling.v2.ResourceMetricSource"
        }, 
        "external": {
          "description": "external refers to a global metric that is not associated with any Kubernetes object. It allows autoscaling based on information coming from components running outside of cluster (for example length of queue in cloud messaging service, or QPS from loadbalancer running outside of cluster).", 
          "$ref": "#/definitions/io.k8s.api.autoscaling.v2.ExternalMetricSource"
        }, 
        "pods": {
          "description": "pods refers to a metric describing each pod in the current scale target (for example, transactions-processed-per-second).  The values will be averaged together before being compared to the target value.", 
          "$ref": "#/definitions/io.k8s.api.autoscaling.v2.PodsMetricSource"
        }, 
        "object": {
          "description": "object refers to a metric describing a single kubernetes object (for example, hits-per-second on an Ingress object).", 
          "$ref": "#/definitions/io.k8s.api.autoscaling.v2.ObjectMetricSource"
        }, 
        "type": {
          "type": "string", 
          "description": "type is the type of metric source.  It should be one of \"ContainerResource\", \"External\", \"Object\", \"Pods\" or \"Resource\", each mapping to a matching field in the object."
        }
      }
    }, 
    "io.k8s.api.core.v1.ServicePort": {
      "required": [
        "port"
      ], 
      "type": "object", 
      "description": "ServicePort contains information on service's port.", 
      "properties": {
        "targetPort": {
          "description": "Number or name of the port to access on the pods targeted by the service. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME. If this is a string, it will be looked up as a named port in the target Pod's container ports. If this is not specified, the value of the 'port' field is used (an identity map). This field is ignored for services with clusterIP=None, and should be omitted or set equal to the 'port' field. More info: https://kubernetes.io/docs/concepts/services-networking/service/#defining-a-service", 
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.util.intstr.IntOrString"
        }, 
        "name": {
          "type": "string", 
          "description": "The name of this port within the service. This must be a DNS_LABEL. All ports within a ServiceSpec must have unique names. When considering the endpoints for a Service, this must match the 'name' field in the EndpointPort. Optional if only one ServicePort is defined on this service."
        }, 
        "protocol": {
          "type": "string", 
          "description": "The IP protocol for this port. Supports \"TCP\", \"UDP\", and \"SCTP\". Default is TCP."
        }, 
        "port": {
          "type": "integer", 
          "description": "The port that will be exposed by this service.", 
          "format": "int32"
        }, 
        "appProtocol": {
          "type": "string", 
          "description": "The application protocol for this port. This is used as a hint for implementations to offer richer behavior for protocols that they understand. This field follows standard Kubernetes label syntax. Valid values are either:\n\n* Un-prefixed protocol names - reserved for IANA standard service names (as per RFC-6335 and https://www.iana.org/assignments/service-names).\n\n* Kubernetes-defined prefixed names:\n  * 'kubernetes.io/h2c' - HTTP/2 prior knowledge over cleartext as described in https://www.rfc-editor.org/rfc/rfc9113.html#name-starting-http-2-with-prior-\n  * 'kubernetes.io/ws'  - WebSocket over cleartext as described in https://www.rfc-editor.org/rfc/rfc6455\n  * 'kubernetes.io/wss' - WebSocket over TLS as described in https://www.rfc-editor.org/rfc/rfc6455\n\n* Other protocols should use implementation-defined prefixed names such as mycompany.com/my-custom-protocol."
        }, 
        "nodePort": {
          "type": "integer", 
          "description": "The port on each node on which this service is exposed when type is NodePort or LoadBalancer.  Usually assigned by the system. If a value is specified, in-range, and not in use it will be used, otherwise the operation will fail.  If not specified, a port will be allocated if this Service requires one.  If this field is specified when creating a Service which does not need it, creation will fail. This field will be wiped when updating a Service to no longer need it (e.g. changing type from NodePort to ClusterIP). More info: https://kubernetes.io/docs/concepts/services-networking/service/#type-nodeport", 
          "format": "int32"
        }
      }
    }, 
    "io.k8s.api.resource.v1beta2.Device": {
      "required": [
        "name"
      ], 
      "type": "object", 
      "description": "Device represents one individual hardware instance that can be selected based on its attributes. Besides the name, exactly one field must be set.", 
      "properties": {
        "consumesCounters": {
          "items": {
            "$ref": "#/definitions/io.k8s.api.resource.v1beta2.DeviceCounterConsumption"
          }, 
          "type": "array", 
          "description": "ConsumesCounters defines a list of references to sharedCounters and the set of counters that the device will consume from those counter sets.\n\nThere can only be a single entry per counterSet.\n\nThe total number of device counter consumption entries must be <= 32. In addition, the total number in the entire ResourceSlice must be <= 1024 (for example, 64 devices with 16 counters each).", 
          "x-kubernetes-list-type": "atomic"
        }, 
        "capacity": {
          "additionalProperties": {
            "$ref": "#/definitions/io.k8s.api.resource.v1beta2.DeviceCapacity"
          }, 
          "type": "object", 
          "description": "Capacity defines the set of capacities for this device. The name of each capacity must be unique in that set.\n\nThe maximum number of attributes and capacities combined is 32."
        }, 
        "bindingFailureConditions": {
          "items": {
            "type": "string"
          }, 
          "type": "array", 
          "description": "BindingFailureConditions defines the conditions for binding failure. They may be set in the per-device status conditions. If any is set to \"True\", a binding failure occurred.\n\nThe maximum number of binding failure conditions is 4.\n\nThe conditions must be a valid condition type string.\n\nThis is an alpha field and requires enabling the DRADeviceBindingConditions and DRAResourceClaimDeviceStatus feature gates.", 
          "x-kubernetes-list-type": "atomic"
        }, 
        "name": {
          "type": "string", 
          "description": "Name is unique identifier among all devices managed by the driver in the pool. It must be a DNS label."
        }, 
        "allNodes": {
          "type": "boolean", 
          "description": "AllNodes indicates that all nodes have access to the device.\n\nMust only be set if Spec.PerDeviceNodeSelection is set to true. At most one of NodeName, NodeSelector and AllNodes can be set."
        }, 
        "allowMultipleAllocations": {
          "type": "boolean", 
          "description": "AllowMultipleAllocations marks whether the device is allowed to be allocated to multiple DeviceRequests.\n\nIf AllowMultipleAllocations is set to true, the device can be allocated more than once, and all of its capacity is consumable, regardless of whether the requestPolicy is defined or not."
        }, 
        "taints": {
          "items": {
            "$ref": "#/definitions/io.k8s.api.resource.v1beta2.DeviceTaint"
          }, 
          "type": "array", 
          "description": "If specified, these are the driver-defined taints.\n\nThe maximum number of taints is 4.\n\nThis is an alpha field and requires enabling the DRADeviceTaints feature gate.", 
          "x-kubernetes-list-type": "atomic"
        }, 
        "nodeSelector": {
          "description": "NodeSelector defines the nodes where the device is available.\n\nMust use exactly one term.\n\nMust only be set if Spec.PerDeviceNodeSelection is set to true. At most one of NodeName, NodeSelector and AllNodes can be set.", 
          "$ref": "#/definitions/io.k8s.api.core.v1.NodeSelector"
        }, 
        "bindingConditions": {
          "items": {
            "type": "string"
          }, 
          "type": "array", 
          "description": "BindingConditions defines the conditions for proceeding with binding. All of these conditions must be set in the per-device status conditions with a value of True to proceed with binding the pod to the node while scheduling the pod.\n\nThe maximum number of binding conditions is 4.\n\nThe conditions must be a valid condition type string.\n\nThis is an alpha field and requires enabling the DRADeviceBindingConditions and DRAResourceClaimDeviceStatus feature gates.", 
          "x-kubernetes-list-type": "atomic"
        }, 
        "attributes": {
          "additionalProperties": {
            "$ref": "#/definitions/io.k8s.api.resource.v1beta2.DeviceAttribute"
          }, 
          "type": "object", 
          "description": "Attributes defines the set of attributes for this device. The name of each attribute must be unique in that set.\n\nThe maximum number of attributes and capacities combined is 32."
        }, 
        "bindsToNode": {
          "type": "boolean", 
          "description": "BindsToNode indicates if the usage of an allocation involving this device has to be limited to exactly the node that was chosen when allocating the claim. If set to true, the scheduler will set the ResourceClaim.Status.Allocation.NodeSelector to match the node where the allocation was made.\n\nThis is an alpha field and requires enabling the DRADeviceBindingConditions and DRAResourceClaimDeviceStatus feature gates."
        }, 
        "nodeName": {
          "type": "string", 
          "description": "NodeName identifies the node where the device is available.\n\nMust only be set if Spec.PerDeviceNodeSelection is set to true. At most one of NodeName, NodeSelector and AllNodes can be set."
        }
      }
    }, 
    "io.k8s.api.core.v1.NodeSelector": {
      "type": "object", 
      "required": [
        "nodeSelectorTerms"
      ], 
      "x-kubernetes-map-type": "atomic", 
      "description": "A node selector represents the union of the results of one or more label queries over a set of nodes; that is, it represents the OR of the selectors represented by the node selector terms.", 
      "properties": {
        "nodeSelectorTerms": {
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.NodeSelectorTerm"
          }, 
          "type": "array", 
          "description": "Required. A list of node selector terms. The terms are ORed.", 
          "x-kubernetes-list-type": "atomic"
        }
      }
    }, 
    "io.k8s.api.flowcontrol.v1.LimitedPriorityLevelConfiguration": {
      "type": "object", 
      "description": "LimitedPriorityLevelConfiguration specifies how to handle requests that are subject to limits. It addresses two issues:\n  - How are requests for this priority level limited?\n  - What should be done with requests that exceed the limit?", 
      "properties": {
        "nominalConcurrencyShares": {
          "type": "integer", 
          "description": "`nominalConcurrencyShares` (NCS) contributes to the computation of the NominalConcurrencyLimit (NominalCL) of this level. This is the number of execution seats available at this priority level. This is used both for requests dispatched from this priority level as well as requests dispatched from other priority levels borrowing seats from this level. The server's concurrency limit (ServerCL) is divided among the Limited priority levels in proportion to their NCS values:\n\nNominalCL(i)  = ceil( ServerCL * NCS(i) / sum_ncs ) sum_ncs = sum[priority level k] NCS(k)\n\nBigger numbers mean a larger nominal concurrency limit, at the expense of every other priority level.\n\nIf not specified, this field defaults to a value of 30.\n\nSetting this field to zero supports the construction of a \"jail\" for this priority level that is used to hold some request(s)", 
          "format": "int32"
        }, 
        "borrowingLimitPercent": {
          "type": "integer", 
          "description": "`borrowingLimitPercent`, if present, configures a limit on how many seats this priority level can borrow from other priority levels. The limit is known as this level's BorrowingConcurrencyLimit (BorrowingCL) and is a limit on the total number of seats that this level may borrow at any one time. This field holds the ratio of that limit to the level's nominal concurrency limit. When this field is non-nil, it must hold a non-negative integer and the limit is calculated as follows.\n\nBorrowingCL(i) = round( NominalCL(i) * borrowingLimitPercent(i)/100.0 )\n\nThe value of this field can be more than 100, implying that this priority level can borrow a number of seats that is greater than its own nominal concurrency limit (NominalCL). When this field is left `nil`, the limit is effectively infinite.", 
          "format": "int32"
        }, 
        "lendablePercent": {
          "type": "integer", 
          "description": "`lendablePercent` prescribes the fraction of the level's NominalCL that can be borrowed by other priority levels. The value of this field must be between 0 and 100, inclusive, and it defaults to 0. The number of seats that other levels can borrow from this level, known as this level's LendableConcurrencyLimit (LendableCL), is defined as follows.\n\nLendableCL(i) = round( NominalCL(i) * lendablePercent(i)/100.0 )", 
          "format": "int32"
        }, 
        "limitResponse": {
          "description": "`limitResponse` indicates what to do with requests that can not be executed right now", 
          "$ref": "#/definitions/io.k8s.api.flowcontrol.v1.LimitResponse"
        }
      }
    }, 
    "io.k8s.api.networking.v1.ServiceCIDRStatus": {
      "type": "object", 
      "description": "ServiceCIDRStatus describes the current state of the ServiceCIDR.", 
      "properties": {
        "conditions": {
          "description": "conditions holds an array of metav1.Condition that describe the state of the ServiceCIDR. Current service state", 
          "x-kubernetes-list-map-keys": [
            "type"
          ], 
          "x-kubernetes-patch-merge-key": "type", 
          "items": {
            "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Condition"
          }, 
          "type": "array", 
          "x-kubernetes-list-type": "map", 
          "x-kubernetes-patch-strategy": "merge"
        }
      }
    }, 
    "io.k8s.api.authorization.v1.NonResourceAttributes": {
      "type": "object", 
      "description": "NonResourceAttributes includes the authorization attributes available for non-resource requests to the Authorizer interface", 
      "properties": {
        "path": {
          "type": "string", 
          "description": "Path is the URL path of the request"
        }, 
        "verb": {
          "type": "string", 
          "description": "Verb is the standard HTTP verb"
        }
      }
    }, 
    "io.k8s.api.core.v1.PodCondition": {
      "required": [
        "type", 
        "status"
      ], 
      "type": "object", 
      "description": "PodCondition contains details for the current condition of this pod.", 
      "properties": {
        "status": {
          "type": "string", 
          "description": "Status is the status of the condition. Can be True, False, Unknown. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-conditions"
        }, 
        "reason": {
          "type": "string", 
          "description": "Unique, one-word, CamelCase reason for the condition's last transition."
        }, 
        "lastProbeTime": {
          "description": "Last time we probed the condition.", 
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
        }, 
        "observedGeneration": {
          "type": "integer", 
          "description": "If set, this represents the .metadata.generation that the pod condition was set based upon. This is an alpha field. Enable PodObservedGenerationTracking to be able to use this field.", 
          "format": "int64"
        }, 
        "type": {
          "type": "string", 
          "description": "Type is the type of the condition. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-conditions"
        }, 
        "message": {
          "type": "string", 
          "description": "Human-readable message indicating details about last transition."
        }, 
        "lastTransitionTime": {
          "description": "Last time the condition transitioned from one status to another.", 
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
        }
      }
    }, 
    "io.k8s.api.resource.v1beta1.ResourceClaim": {
      "type": "object", 
      "required": [
        "spec"
      ], 
      "x-kubernetes-group-version-kind": [
        {
          "kind": "ResourceClaim", 
          "version": "v1beta1", 
          "group": "resource.k8s.io"
        }
      ], 
      "description": "ResourceClaim describes a request for access to resources in the cluster, for use by workloads. For example, if a workload needs an accelerator device with specific properties, this is how that request is expressed. The status stanza tracks whether this claim has been satisfied and what specific resources have been allocated.\n\nThis is an alpha type and requires enabling the DynamicResourceAllocation feature gate.", 
      "properties": {
        "status": {
          "description": "Status describes whether the claim is ready to use and what has been allocated.", 
          "$ref": "#/definitions/io.k8s.api.resource.v1beta1.ResourceClaimStatus"
        }, 
        "kind": {
          "enum": [
            "ResourceClaim"
          ], 
          "type": "string", 
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
        }, 
        "spec": {
          "description": "Spec describes what is being requested and how to configure it. The spec is immutable.", 
          "$ref": "#/definitions/io.k8s.api.resource.v1beta1.ResourceClaimSpec"
        }, 
        "apiVersion": {
          "type": "string", 
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources"
        }, 
        "metadata": {
          "description": "Standard object metadata", 
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        }
      }
    }, 
    "io.k8s.api.core.v1.EnvVar": {
      "required": [
        "name"
      ], 
      "type": "object", 
      "description": "EnvVar represents an environment variable present in a Container.", 
      "properties": {
        "valueFrom": {
          "description": "Source for the environment variable's value. Cannot be used if value is not empty.", 
          "$ref": "#/definitions/io.k8s.api.core.v1.EnvVarSource"
        }, 
        "name": {
          "type": "string", 
          "description": "Name of the environment variable. May consist of any printable ASCII characters except '='."
        }, 
        "value": {
          "type": "string", 
          "description": "Variable references $(VAR_NAME) are expanded using the previously defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. \"$$(VAR_NAME)\" will produce the string literal \"$(VAR_NAME)\". Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to \"\"."
        }
      }
    }, 
    "io.k8s.api.networking.v1.IPAddressList": {
      "type": "object", 
      "required": [
        "items"
      ], 
      "x-kubernetes-group-version-kind": [
        {
          "kind": "IPAddressList", 
          "version": "v1", 
          "group": "networking.k8s.io"
        }
      ], 
      "description": "IPAddressList contains a list of IPAddress.", 
      "properties": {
        "items": {
          "items": {
            "$ref": "#/definitions/io.k8s.api.networking.v1.IPAddress"
          }, 
          "type": "array", 
          "description": "items is the list of IPAddresses."
        }, 
        "kind": {
          "enum": [
            "IPAddressList"
          ], 
          "type": "string", 
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
        }, 
        "apiVersion": {
          "type": "string", 
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources"
        }, 
        "metadata": {
          "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata", 
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      }
    }, 
    "io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector": {
      "type": "object", 
      "x-kubernetes-map-type": "atomic", 
      "description": "A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.", 
      "properties": {
        "matchLabels": {
          "additionalProperties": {
            "type": "string"
          }, 
          "type": "object", 
          "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed."
        }, 
        "matchExpressions": {
          "items": {
            "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelectorRequirement"
          }, 
          "type": "array", 
          "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.", 
          "x-kubernetes-list-type": "atomic"
        }
      }
    }, 
    "io.k8s.api.resource.v1beta1.Device": {
      "required": [
        "name"
      ], 
      "type": "object", 
      "description": "Device represents one individual hardware instance that can be selected based on its attributes. Besides the name, exactly one field must be set.", 
      "properties": {
        "name": {
          "type": "string", 
          "description": "Name is unique identifier among all devices managed by the driver in the pool. It must be a DNS label."
        }, 
        "basic": {
          "description": "Basic defines one device instance.", 
          "$ref": "#/definitions/io.k8s.api.resource.v1beta1.BasicDevice"
        }
      }
    }, 
    "io.k8s.api.storagemigration.v1alpha1.StorageVersionMigration": {
      "type": "object", 
      "x-kubernetes-group-version-kind": [
        {
          "kind": "StorageVersionMigration", 
          "version": "v1alpha1", 
          "group": "storagemigration.k8s.io"
        }
      ], 
      "description": "StorageVersionMigration represents a migration of stored data to the latest storage version.", 
      "properties": {
        "status": {
          "description": "Status of the migration.", 
          "$ref": "#/definitions/io.k8s.api.storagemigration.v1alpha1.StorageVersionMigrationStatus"
        }, 
        "kind": {
          "enum": [
            "StorageVersionMigration"
          ], 
          "type": "string", 
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
        }, 
        "spec": {
          "description": "Specification of the migration.", 
          "$ref": "#/definitions/io.k8s.api.storagemigration.v1alpha1.StorageVersionMigrationSpec"
        }, 
        "apiVersion": {
          "type": "string", 
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources"
        }, 
        "metadata": {
          "description": "Standard object metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata", 
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        }
      }
    }, 
    "io.k8s.api.core.v1.GlusterfsVolumeSource": {
      "required": [
        "endpoints", 
        "path"
      ], 
      "type": "object", 
      "description": "Represents a Glusterfs mount that lasts the lifetime of a pod. Glusterfs volumes do not support ownership management or SELinux relabeling.", 
      "properties": {
        "path": {
          "type": "string", 
          "description": "path is the Glusterfs volume path. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod"
        }, 
        "readOnly": {
          "type": "boolean", 
          "description": "readOnly here will force the Glusterfs volume to be mounted with read-only permissions. Defaults to false. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod"
        }, 
        "endpoints": {
          "type": "string", 
          "description": "endpoints is the endpoint name that details Glusterfs topology."
        }
      }
    }, 
    "io.k8s.api.core.v1.ResourceRequirements": {
      "type": "object", 
      "description": "ResourceRequirements describes the compute resource requirements.", 
      "properties": {
        "claims": {
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.ResourceClaim"
          }, 
          "type": "array", 
          "description": "Claims lists the names of resources, defined in spec.resourceClaims, that are used by this container.\n\nThis field depends on the DynamicResourceAllocation feature gate.\n\nThis field is immutable. It can only be set for containers.", 
          "x-kubernetes-list-map-keys": [
            "name"
          ], 
          "x-kubernetes-list-type": "map"
        }, 
        "requests": {
          "additionalProperties": {
            "$ref": "#/definitions/io.k8s.apimachinery.pkg.api.resource.Quantity"
          }, 
          "type": "object", 
          "description": "Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. Requests cannot exceed Limits. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/"
        }, 
        "limits": {
          "additionalProperties": {
            "$ref": "#/definitions/io.k8s.apimachinery.pkg.api.resource.Quantity"
          }, 
          "type": "object", 
          "description": "Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/"
        }
      }
    }, 
    "io.k8s.api.core.v1.SleepAction": {
      "required": [
        "seconds"
      ], 
      "type": "object", 
      "description": "SleepAction describes a \"sleep\" action.", 
      "properties": {
        "seconds": {
          "type": "integer", 
          "description": "Seconds is the number of seconds to sleep.", 
          "format": "int64"
        }
      }
    }, 
    "io.k8s.api.networking.v1.ParentReference": {
      "required": [
        "resource", 
        "name"
      ], 
      "type": "object", 
      "description": "ParentReference describes a reference to a parent object.", 
      "properties": {
        "namespace": {
          "type": "string", 
          "description": "Namespace is the namespace of the object being referenced."
        }, 
        "resource": {
          "type": "string", 
          "description": "Resource is the resource of the object being referenced."
        }, 
        "name": {
          "type": "string", 
          "description": "Name is the name of the object being referenced."
        }, 
        "group": {
          "type": "string", 
          "description": "Group is the group of the object being referenced."
        }
      }
    }, 
    "io.k8s.api.core.v1.ISCSIPersistentVolumeSource": {
      "required": [
        "targetPortal", 
        "iqn", 
        "lun"
      ], 
      "type": "object", 
      "description": "ISCSIPersistentVolumeSource represents an ISCSI disk. ISCSI volumes can only be mounted as read/write once. ISCSI volumes support ownership management and SELinux relabeling.", 
      "properties": {
        "targetPortal": {
          "type": "string", 
          "description": "targetPortal is iSCSI Target Portal. The Portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260)."
        }, 
        "portals": {
          "items": {
            "type": "string"
          }, 
          "type": "array", 
          "description": "portals is the iSCSI Target Portal List. The Portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).", 
          "x-kubernetes-list-type": "atomic"
        }, 
        "secretRef": {
          "description": "secretRef is the CHAP Secret for iSCSI target and initiator authentication", 
          "$ref": "#/definitions/io.k8s.api.core.v1.SecretReference"
        }, 
        "fsType": {
          "type": "string", 
          "description": "fsType is the filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#iscsi"
        }, 
        "readOnly": {
          "type": "boolean", 
          "description": "readOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false."
        }, 
        "chapAuthSession": {
          "type": "boolean", 
          "description": "chapAuthSession defines whether support iSCSI Session CHAP authentication"
        }, 
        "initiatorName": {
          "type": "string", 
          "description": "initiatorName is the custom iSCSI Initiator Name. If initiatorName is specified with iscsiInterface simultaneously, new iSCSI interface <target portal>:<volume name> will be created for the connection."
        }, 
        "iscsiInterface": {
          "type": "string", 
          "description": "iscsiInterface is the interface Name that uses an iSCSI transport. Defaults to 'default' (tcp)."
        }, 
        "iqn": {
          "type": "string", 
          "description": "iqn is Target iSCSI Qualified Name."
        }, 
        "chapAuthDiscovery": {
          "type": "boolean", 
          "description": "chapAuthDiscovery defines whether support iSCSI Discovery CHAP authentication"
        }, 
        "lun": {
          "type": "integer", 
          "description": "lun is iSCSI Target Lun number.", 
          "format": "int32"
        }
      }
    }, 
    "io.k8s.api.authorization.v1.SubjectAccessReviewSpec": {
      "type": "object", 
      "description": "SubjectAccessReviewSpec is a description of the access request.  Exactly one of ResourceAuthorizationAttributes and NonResourceAuthorizationAttributes must be set", 
      "properties": {
        "nonResourceAttributes": {
          "description": "NonResourceAttributes describes information for a non-resource access request", 
          "$ref": "#/definitions/io.k8s.api.authorization.v1.NonResourceAttributes"
        }, 
        "resourceAttributes": {
          "description": "ResourceAuthorizationAttributes describes information for a resource access request", 
          "$ref": "#/definitions/io.k8s.api.authorization.v1.ResourceAttributes"
        }, 
        "uid": {
          "type": "string", 
          "description": "UID information about the requesting user."
        }, 
        "groups": {
          "items": {
            "type": "string"
          }, 
          "type": "array", 
          "description": "Groups is the groups you're testing for.", 
          "x-kubernetes-list-type": "atomic"
        }, 
        "extra": {
          "additionalProperties": {
            "items": {
              "type": "string"
            }, 
            "type": "array"
          }, 
          "type": "object", 
          "description": "Extra corresponds to the user.Info.GetExtra() method from the authenticator.  Since that is input to the authorizer it needs a reflection here."
        }, 
        "user": {
          "type": "string", 
          "description": "User is the user you're testing for. If you specify \"User\" but not \"Groups\", then is it interpreted as \"What if User were not a member of any groups"
        }
      }
    }, 
    "io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta": {
      "type": "object", 
      "description": "ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.", 
      "properties": {
        "name": {
          "type": "string", 
          "description": "Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#names"
        }, 
        "deletionTimestamp": {
          "description": "DeletionTimestamp is RFC 3339 date and time at which this resource will be deleted. This field is set by the server when a graceful deletion is requested by the user, and is not directly settable by a client. The resource is expected to be deleted (no longer visible from resource lists, and not reachable by name) after the time in this field, once the finalizers list is empty. As long as the finalizers list contains items, deletion is blocked. Once the deletionTimestamp is set, this value may not be unset or be set further into the future, although it may be shortened or the resource may be deleted prior to this time. For example, a user may request that a pod is deleted in 30 seconds. The Kubelet will react by sending a graceful termination signal to the containers in the pod. After that 30 seconds, the Kubelet will send a hard termination signal (SIGKILL) to the container and after cleanup, remove the pod from the API. In the presence of network partitions, this object may still exist after this timestamp, until an administrator or automated process can determine the resource is fully terminated. If not set, graceful deletion of the object has not been requested.\n\nPopulated by the system when a graceful deletion is requested. Read-only. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata", 
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
        }, 
        "generation": {
          "type": "integer", 
          "description": "A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.", 
          "format": "int64"
        }, 
        "deletionGracePeriodSeconds": {
          "type": "integer", 
          "description": "Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.", 
          "format": "int64"
        }, 
        "labels": {
          "additionalProperties": {
            "type": "string"
          }, 
          "type": "object", 
          "description": "Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels"
        }, 
        "namespace": {
          "type": "string", 
          "description": "Namespace defines the space within which each name must be unique. An empty namespace is equivalent to the \"default\" namespace, but \"default\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\n\nMust be a DNS_LABEL. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces"
        }, 
        "annotations": {
          "additionalProperties": {
            "type": "string"
          }, 
          "type": "object", 
          "description": "Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations"
        }, 
        "finalizers": {
          "items": {
            "type": "string"
          }, 
          "type": "array", 
          "description": "Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.", 
          "x-kubernetes-list-type": "set", 
          "x-kubernetes-patch-strategy": "merge"
        }, 
        "generateName": {
          "type": "string", 
          "description": "GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\n\nIf this field is specified and the generated name exists, the server will return a 409.\n\nApplied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency"
        }, 
        "resourceVersion": {
          "type": "string", 
          "description": "An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.\n\nPopulated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency"
        }, 
        "ownerReferences": {
          "description": "List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.", 
          "x-kubernetes-list-map-keys": [
            "uid"
          ], 
          "x-kubernetes-patch-merge-key": "uid", 
          "items": {
            "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.OwnerReference"
          }, 
          "type": "array", 
          "x-kubernetes-list-type": "map", 
          "x-kubernetes-patch-strategy": "merge"
        }, 
        "creationTimestamp": {
          "description": "CreationTimestamp is a timestamp representing the server time when this object was created. It is not guaranteed to be set in happens-before order across separate operations. Clients may not set this value. It is represented in RFC3339 form and is in UTC.\n\nPopulated by the system. Read-only. Null for lists. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata", 
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
        }, 
        "managedFields": {
          "items": {
            "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ManagedFieldsEntry"
          }, 
          "type": "array", 
          "description": "ManagedFields maps workflow-id and version to the set of fields that are managed by that workflow. This is mostly for internal housekeeping, and users typically shouldn't need to set or understand this field. A workflow can be the user's name, a controller's name, or the name of a specific apply path like \"ci-cd\". The set of fields is always in the version that the workflow used when modifying the object.", 
          "x-kubernetes-list-type": "atomic"
        }, 
        "selfLink": {
          "type": "string", 
          "description": "Deprecated: selfLink is a legacy read-only field that is no longer populated by the system."
        }, 
        "uid": {
          "type": "string", 
          "description": "UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.\n\nPopulated by the system. Read-only. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#uids"
        }
      }
    }, 
    "io.k8s.api.autoscaling.v1.HorizontalPodAutoscalerStatus": {
      "required": [
        "currentReplicas", 
        "desiredReplicas"
      ], 
      "type": "object", 
      "description": "current status of a horizontal pod autoscaler", 
      "properties": {
        "observedGeneration": {
          "type": "integer", 
          "description": "observedGeneration is the most recent generation observed by this autoscaler.", 
          "format": "int64"
        }, 
        "currentReplicas": {
          "type": "integer", 
          "description": "currentReplicas is the current number of replicas of pods managed by this autoscaler.", 
          "format": "int32"
        }, 
        "lastScaleTime": {
          "description": "lastScaleTime is the last time the HorizontalPodAutoscaler scaled the number of pods; used by the autoscaler to control how often the number of pods is changed.", 
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
        }, 
        "currentCPUUtilizationPercentage": {
          "type": "integer", 
          "description": "currentCPUUtilizationPercentage is the current average CPU utilization over all pods, represented as a percentage of requested CPU, e.g. 70 means that an average pod is using now 70% of its requested CPU.", 
          "format": "int32"
        }, 
        "desiredReplicas": {
          "type": "integer", 
          "description": "desiredReplicas is the  desired number of replicas of pods managed by this autoscaler.", 
          "format": "int32"
        }
      }
    }, 
    "io.k8s.api.authentication.v1.TokenReviewStatus": {
      "type": "object", 
      "description": "TokenReviewStatus is the result of the token authentication request.", 
      "properties": {
        "audiences": {
          "items": {
            "type": "string"
          }, 
          "type": "array", 
          "description": "Audiences are audience identifiers chosen by the authenticator that are compatible with both the TokenReview and token. An identifier is any identifier in the intersection of the TokenReviewSpec audiences and the token's audiences. A client of the TokenReview API that sets the spec.audiences field should validate that a compatible audience identifier is returned in the status.audiences field to ensure that the TokenReview server is audience aware. If a TokenReview returns an empty status.audience field where status.authenticated is \"true\", the token is valid against the audience of the Kubernetes API server.", 
          "x-kubernetes-list-type": "atomic"
        }, 
        "authenticated": {
          "type": "boolean", 
          "description": "Authenticated indicates that the token was associated with a known user."
        }, 
        "user": {
          "description": "User is the UserInfo associated with the provided token.", 
          "$ref": "#/definitions/io.k8s.api.authentication.v1.UserInfo"
        }, 
        "error": {
          "type": "string", 
          "description": "Error indicates that the token couldn't be checked"
        }
      }
    }, 
    "io.k8s.api.resource.v1.DeviceToleration": {
      "type": "object", 
      "description": "The ResourceClaim this DeviceToleration is attached to tolerates any taint that matches the triple <key,value,effect> using the matching operator <operator>.", 
      "properties": {
        "operator": {
          "type": "string", 
          "description": "Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a ResourceClaim can tolerate all taints of a particular category."
        }, 
        "key": {
          "type": "string", 
          "description": "Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys. Must be a label name."
        }, 
        "tolerationSeconds": {
          "type": "integer", 
          "description": "TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system. If larger than zero, the time when the pod needs to be evicted is calculated as <time when taint was adedd> + <toleration seconds>.", 
          "format": "int64"
        }, 
        "effect": {
          "type": "string", 
          "description": "Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule and NoExecute."
        }, 
        "value": {
          "type": "string", 
          "description": "Value is the taint value the toleration matches to. If the operator is Exists, the value must be empty, otherwise just a regular string. Must be a label value."
        }
      }
    }, 
    "io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.CustomResourceDefinitionList": {
      "type": "object", 
      "required": [
        "items"
      ], 
      "x-kubernetes-group-version-kind": [
        {
          "kind": "CustomResourceDefinitionList", 
          "version": "v1", 
          "group": "apiextensions.k8s.io"
        }
      ], 
      "description": "CustomResourceDefinitionList is a list of CustomResourceDefinition objects.", 
      "properties": {
        "items": {
          "items": {
            "$ref": "#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.CustomResourceDefinition"
          }, 
          "type": "array", 
          "description": "items list individual CustomResourceDefinition objects"
        }, 
        "kind": {
          "enum": [
            "CustomResourceDefinitionList"
          ], 
          "type": "string", 
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
        }, 
        "apiVersion": {
          "type": "string", 
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources"
        }, 
        "metadata": {
          "description": "Standard object's metadata More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata", 
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      }
    }, 
    "io.k8s.api.core.v1.ReplicationController": {
      "type": "object", 
      "x-kubernetes-group-version-kind": [
        {
          "kind": "ReplicationController", 
          "version": "v1", 
          "group": ""
        }
      ], 
      "description": "ReplicationController represents the configuration of a replication controller.", 
      "properties": {
        "status": {
          "description": "Status is the most recently observed status of the replication controller. This data may be out of date by some window of time. Populated by the system. Read-only. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status", 
          "$ref": "#/definitions/io.k8s.api.core.v1.ReplicationControllerStatus"
        }, 
        "kind": {
          "enum": [
            "ReplicationController"
          ], 
          "type": "string", 
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
        }, 
        "spec": {
          "description": "Spec defines the specification of the desired behavior of the replication controller. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status", 
          "$ref": "#/definitions/io.k8s.api.core.v1.ReplicationControllerSpec"
        }, 
        "apiVersion": {
          "type": "string", 
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources"
        }, 
        "metadata": {
          "description": "If the Labels of a ReplicationController are empty, they are defaulted to be the same as the Pod(s) that the replication controller manages. Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata", 
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        }
      }
    }, 
    "io.k8s.api.apps.v1.RollingUpdateDaemonSet": {
      "type": "object", 
      "description": "Spec to control the desired behavior of daemon set rolling update.", 
      "properties": {
        "maxSurge": {
          "description": "The maximum number of nodes with an existing available DaemonSet pod that can have an updated DaemonSet pod during during an update. Value can be an absolute number (ex: 5) or a percentage of desired pods (ex: 10%). This can not be 0 if MaxUnavailable is 0. Absolute number is calculated from percentage by rounding up to a minimum of 1. Default value is 0. Example: when this is set to 30%, at most 30% of the total number of nodes that should be running the daemon pod (i.e. status.desiredNumberScheduled) can have their a new pod created before the old pod is marked as deleted. The update starts by launching new pods on 30% of nodes. Once an updated pod is available (Ready for at least minReadySeconds) the old DaemonSet pod on that node is marked deleted. If the old pod becomes unavailable for any reason (Ready transitions to false, is evicted, or is drained) an updated pod is immediately created on that node without considering surge limits. Allowing surge implies the possibility that the resources consumed by the daemonset on any given node can double if the readiness check fails, and so resource intensive daemonsets should take into account that they may cause evictions during disruption.", 
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.util.intstr.IntOrString"
        }, 
        "maxUnavailable": {
          "description": "The maximum number of DaemonSet pods that can be unavailable during the update. Value can be an absolute number (ex: 5) or a percentage of total number of DaemonSet pods at the start of the update (ex: 10%). Absolute number is calculated from percentage by rounding up. This cannot be 0 if MaxSurge is 0 Default value is 1. Example: when this is set to 30%, at most 30% of the total number of nodes that should be running the daemon pod (i.e. status.desiredNumberScheduled) can have their pods stopped for an update at any given time. The update starts by stopping at most 30% of those DaemonSet pods and then brings up new DaemonSet pods in their place. Once the new pods are available, it then proceeds onto other DaemonSet pods, thus ensuring that at least 70% of original number of DaemonSet pods are available at all times during the update.", 
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.util.intstr.IntOrString"
        }
      }
    }, 
    "io.k8s.api.resource.v1beta2.DeviceConstraint": {
      "type": "object", 
      "description": "DeviceConstraint must have exactly one field set besides Requests.", 
      "properties": {
        "distinctAttribute": {
          "type": "string", 
          "description": "DistinctAttribute requires that all devices in question have this attribute and that its type and value are unique across those devices.\n\nThis acts as the inverse of MatchAttribute.\n\nThis constraint is used to avoid allocating multiple requests to the same device by ensuring attribute-level differentiation.\n\nThis is useful for scenarios where resource requests must be fulfilled by separate physical devices. For example, a container requests two network interfaces that must be allocated from two different physical NICs."
        }, 
        "requests": {
          "items": {
            "type": "string"
          }, 
          "type": "array", 
          "description": "Requests is a list of the one or more requests in this claim which must co-satisfy this constraint. If a request is fulfilled by multiple devices, then all of the devices must satisfy the constraint. If this is not specified, this constraint applies to all requests in this claim.\n\nReferences to subrequests must include the name of the main request and may include the subrequest using the format <main request>[/<subrequest>]. If just the main request is given, the constraint applies to all subrequests.", 
          "x-kubernetes-list-type": "atomic"
        }, 
        "matchAttribute": {
          "type": "string", 
          "description": "MatchAttribute requires that all devices in question have this attribute and that its type and value are the same across those devices.\n\nFor example, if you specified \"dra.example.com/numa\" (a hypothetical example!), then only devices in the same NUMA node will be chosen. A device which does not have that attribute will not be chosen. All devices should use a value of the same type for this attribute because that is part of its specification, but if one device doesn't, then it also will not be chosen.\n\nMust include the domain qualifier."
        }
      }
    }, 
    "io.k8s.api.core.v1.LoadBalancerStatus": {
      "type": "object", 
      "description": "LoadBalancerStatus represents the status of a load-balancer.", 
      "properties": {
        "ingress": {
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.LoadBalancerIngress"
          }, 
          "type": "array", 
          "description": "Ingress is a list containing ingress points for the load-balancer. Traffic intended for the service should be sent to these ingress points.", 
          "x-kubernetes-list-type": "atomic"
        }
      }
    }, 
    "io.k8s.api.scheduling.v1.PriorityClass": {
      "type": "object", 
      "required": [
        "value"
      ], 
      "x-kubernetes-group-version-kind": [
        {
          "kind": "PriorityClass", 
          "version": "v1", 
          "group": "scheduling.k8s.io"
        }
      ], 
      "description": "PriorityClass defines mapping from a priority class name to the priority integer value. The value can be any valid integer.", 
      "properties": {
        "value": {
          "type": "integer", 
          "description": "value represents the integer value of this priority class. This is the actual priority that pods receive when they have the name of this class in their pod spec.", 
          "format": "int32"
        }, 
        "kind": {
          "enum": [
            "PriorityClass"
          ], 
          "type": "string", 
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
        }, 
        "description": {
          "type": "string", 
          "description": "description is an arbitrary string that usually provides guidelines on when this priority class should be used."
        }, 
        "preemptionPolicy": {
          "type": "string", 
          "description": "preemptionPolicy is the Policy for preempting pods with lower priority. One of Never, PreemptLowerPriority. Defaults to PreemptLowerPriority if unset."
        }, 
        "globalDefault": {
          "type": "boolean", 
          "description": "globalDefault specifies whether this PriorityClass should be considered as the default priority for pods that do not have any priority class. Only one PriorityClass can be marked as `globalDefault`. However, if more than one PriorityClasses exists with their `globalDefault` field set to true, the smallest value of such global default PriorityClasses will be used as the default priority."
        }, 
        "apiVersion": {
          "type": "string", 
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources"
        }, 
        "metadata": {
          "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata", 
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        }
      }
    }, 
    "io.k8s.api.coordination.v1alpha2.LeaseCandidateList": {
      "type": "object", 
      "required": [
        "items"
      ], 
      "x-kubernetes-group-version-kind": [
        {
          "kind": "LeaseCandidateList", 
          "version": "v1alpha2", 
          "group": "coordination.k8s.io"
        }
      ], 
      "description": "LeaseCandidateList is a list of Lease objects.", 
      "properties": {
        "items": {
          "items": {
            "$ref": "#/definitions/io.k8s.api.coordination.v1alpha2.LeaseCandidate"
          }, 
          "type": "array", 
          "description": "items is a list of schema objects."
        }, 
        "kind": {
          "enum": [
            "LeaseCandidateList"
          ], 
          "type": "string", 
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
        }, 
        "apiVersion": {
          "type": "string", 
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources"
        }, 
        "metadata": {
          "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata", 
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      }
    }, 
    "io.k8s.api.core.v1.VolumeMountStatus": {
      "required": [
        "name", 
        "mountPath"
      ], 
      "type": "object", 
      "description": "VolumeMountStatus shows status of volume mounts.", 
      "properties": {
        "readOnly": {
          "type": "boolean", 
          "description": "ReadOnly corresponds to the original VolumeMount."
        }, 
        "mountPath": {
          "type": "string", 
          "description": "MountPath corresponds to the original VolumeMount."
        }, 
        "name": {
          "type": "string", 
          "description": "Name corresponds to the name of the original VolumeMount."
        }, 
        "recursiveReadOnly": {
          "type": "string", 
          "description": "RecursiveReadOnly must be set to Disabled, Enabled, or unspecified (for non-readonly mounts). An IfPossible value in the original VolumeMount must be translated to Disabled or Enabled, depending on the mount result."
        }
      }
    }, 
    "io.k8s.api.authorization.v1.ResourceRule": {
      "required": [
        "verbs"
      ], 
      "type": "object", 
      "description": "ResourceRule is the list of actions the subject is allowed to perform on resources. The list ordering isn't significant, may contain duplicates, and possibly be incomplete.", 
      "properties": {
        "apiGroups": {
          "items": {
            "type": "string"
          }, 
          "type": "array", 
          "description": "APIGroups is the name of the APIGroup that contains the resources.  If multiple API groups are specified, any action requested against one of the enumerated resources in any API group will be allowed.  \"*\" means all.", 
          "x-kubernetes-list-type": "atomic"
        }, 
        "verbs": {
          "items": {
            "type": "string"
          }, 
          "type": "array", 
          "description": "Verb is a list of kubernetes resource API verbs, like: get, list, watch, create, update, delete, proxy.  \"*\" means all.", 
          "x-kubernetes-list-type": "atomic"
        }, 
        "resources": {
          "items": {
            "type": "string"
          }, 
          "type": "array", 
          "description": "Resources is a list of resources this rule applies to.  \"*\" means all in the specified apiGroups.\n \"*/foo\" represents the subresource 'foo' for all resources in the specified apiGroups.", 
          "x-kubernetes-list-type": "atomic"
        }, 
        "resourceNames": {
          "items": {
            "type": "string"
          }, 
          "type": "array", 
          "description": "ResourceNames is an optional white list of names that the rule applies to.  An empty set means that everything is allowed.  \"*\" means all.", 
          "x-kubernetes-list-type": "atomic"
        }
      }
    }, 
    "io.k8s.api.resource.v1beta2.CounterSet": {
      "required": [
        "name", 
        "counters"
      ], 
      "type": "object", 
      "description": "CounterSet defines a named set of counters that are available to be used by devices defined in the ResourceSlice.\n\nThe counters are not allocatable by themselves, but can be referenced by devices. When a device is allocated, the portion of counters it uses will no longer be available for use by other devices.", 
      "properties": {
        "name": {
          "type": "string", 
          "description": "Name defines the name of the counter set. It must be a DNS label."
        }, 
        "counters": {
          "additionalProperties": {
            "$ref": "#/definitions/io.k8s.api.resource.v1beta2.Counter"
          }, 
          "type": "object", 
          "description": "Counters defines the set of counters for this CounterSet The name of each counter must be unique in that set and must be a DNS label.\n\nThe maximum number of counters in all sets is 32."
        }
      }
    }, 
    "io.k8s.api.core.v1.NodeFeatures": {
      "type": "object", 
      "description": "NodeFeatures describes the set of features implemented by the CRI implementation. The features contained in the NodeFeatures should depend only on the cri implementation independent of runtime handlers.", 
      "properties": {
        "supplementalGroupsPolicy": {
          "type": "boolean", 
          "description": "SupplementalGroupsPolicy is set to true if the runtime supports SupplementalGroupsPolicy and ContainerUser."
        }
      }
    }, 
    "io.k8s.api.resource.v1beta1.DeviceConstraint": {
      "type": "object", 
      "description": "DeviceConstraint must have exactly one field set besides Requests.", 
      "properties": {
        "distinctAttribute": {
          "type": "string", 
          "description": "DistinctAttribute requires that all devices in question have this attribute and that its type and value are unique across those devices.\n\nThis acts as the inverse of MatchAttribute.\n\nThis constraint is used to avoid allocating multiple requests to the same device by ensuring attribute-level differentiation.\n\nThis is useful for scenarios where resource requests must be fulfilled by separate physical devices. For example, a container requests two network interfaces that must be allocated from two different physical NICs."
        }, 
        "requests": {
          "items": {
            "type": "string"
          }, 
          "type": "array", 
          "description": "Requests is a list of the one or more requests in this claim which must co-satisfy this constraint. If a request is fulfilled by multiple devices, then all of the devices must satisfy the constraint. If this is not specified, this constraint applies to all requests in this claim.\n\nReferences to subrequests must include the name of the main request and may include the subrequest using the format <main request>[/<subrequest>]. If just the main request is given, the constraint applies to all subrequests.", 
          "x-kubernetes-list-type": "atomic"
        }, 
        "matchAttribute": {
          "type": "string", 
          "description": "MatchAttribute requires that all devices in question have this attribute and that its type and value are the same across those devices.\n\nFor example, if you specified \"dra.example.com/numa\" (a hypothetical example!), then only devices in the same NUMA node will be chosen. A device which does not have that attribute will not be chosen. All devices should use a value of the same type for this attribute because that is part of its specification, but if one device doesn't, then it also will not be chosen.\n\nMust include the domain qualifier."
        }
      }
    }, 
    "io.k8s.apimachinery.pkg.apis.meta.v1.Preconditions": {
      "type": "object", 
      "description": "Preconditions must be fulfilled before an operation (update, delete, etc.) is carried out.", 
      "properties": {
        "uid": {
          "type": "string", 
          "description": "Specifies the target UID."
        }, 
        "resourceVersion": {
          "type": "string", 
          "description": "Specifies the target ResourceVersion"
        }
      }
    }, 
    "io.k8s.api.core.v1.StorageOSVolumeSource": {
      "type": "object", 
      "description": "Represents a StorageOS persistent volume resource.", 
      "properties": {
        "volumeName": {
          "type": "string", 
          "description": "volumeName is the human-readable name of the StorageOS volume.  Volume names are only unique within a namespace."
        }, 
        "readOnly": {
          "type": "boolean", 
          "description": "readOnly defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts."
        }, 
        "volumeNamespace": {
          "type": "string", 
          "description": "volumeNamespace specifies the scope of the volume within StorageOS.  If no namespace is specified then the Pod's namespace will be used.  This allows the Kubernetes name scoping to be mirrored within StorageOS for tighter integration. Set VolumeName to any name to override the default behaviour. Set to \"default\" if you are not using namespaces within StorageOS. Namespaces that do not pre-exist within StorageOS will be created."
        }, 
        "secretRef": {
          "description": "secretRef specifies the secret to use for obtaining the StorageOS API credentials.  If not specified, default values will be attempted.", 
          "$ref": "#/definitions/io.k8s.api.core.v1.LocalObjectReference"
        }, 
        "fsType": {
          "type": "string", 
          "description": "fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified."
        }
      }
    }, 
    "io.k8s.apimachinery.pkg.apis.meta.v1.GroupVersionForDiscovery": {
      "required": [
        "groupVersion", 
        "version"
      ], 
      "type": "object", 
      "description": "GroupVersion contains the \"group/version\" and \"version\" string of a version. It is made a struct to keep extensibility.", 
      "properties": {
        "groupVersion": {
          "type": "string", 
          "description": "groupVersion specifies the API group and version in the form \"group/version\""
        }, 
        "version": {
          "type": "string", 
          "description": "version specifies the version in the form of \"version\". This is to save the clients the trouble of splitting the GroupVersion."
        }
      }
    }, 
    "io.k8s.api.storagemigration.v1alpha1.StorageVersionMigrationSpec": {
      "required": [
        "resource"
      ], 
      "type": "object", 
      "description": "Spec of the storage version migration.", 
      "properties": {
        "resource": {
          "description": "The resource that is being migrated. The migrator sends requests to the endpoint serving the resource. Immutable.", 
          "$ref": "#/definitions/io.k8s.api.storagemigration.v1alpha1.GroupVersionResource"
        }, 
        "continueToken": {
          "type": "string", 
          "description": "The token used in the list options to get the next chunk of objects to migrate. When the .status.conditions indicates the migration is \"Running\", users can use this token to check the progress of the migration."
        }
      }
    }, 
    "io.k8s.api.flowcontrol.v1.FlowSchemaList": {
      "type": "object", 
      "required": [
        "items"
      ], 
      "x-kubernetes-group-version-kind": [
        {
          "kind": "FlowSchemaList", 
          "version": "v1", 
          "group": "flowcontrol.apiserver.k8s.io"
        }
      ], 
      "description": "FlowSchemaList is a list of FlowSchema objects.", 
      "properties": {
        "items": {
          "items": {
            "$ref": "#/definitions/io.k8s.api.flowcontrol.v1.FlowSchema"
          }, 
          "type": "array", 
          "description": "`items` is a list of FlowSchemas."
        }, 
        "kind": {
          "enum": [
            "FlowSchemaList"
          ], 
          "type": "string", 
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
        }, 
        "apiVersion": {
          "type": "string", 
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources"
        }, 
        "metadata": {
          "description": "`metadata` is the standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata", 
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      }
    }, 
    "io.k8s.api.resource.v1beta1.DeviceSubRequest": {
      "required": [
        "name", 
        "deviceClassName"
      ], 
      "type": "object", 
      "description": "DeviceSubRequest describes a request for device provided in the claim.spec.devices.requests[].firstAvailable array. Each is typically a request for a single resource like a device, but can also ask for several identical devices.\n\nDeviceSubRequest is similar to Request, but doesn't expose the AdminAccess or FirstAvailable fields, as those can only be set on the top-level request. AdminAccess is not supported for requests with a prioritized list, and recursive FirstAvailable fields are not supported.", 
      "properties": {
        "count": {
          "type": "integer", 
          "description": "Count is used only when the count mode is \"ExactCount\". Must be greater than zero. If AllocationMode is ExactCount and this field is not specified, the default is one.", 
          "format": "int64"
        }, 
        "capacity": {
          "description": "Capacity define resource requirements against each capacity.\n\nIf this field is unset and the device supports multiple allocations, the default value will be applied to each capacity according to requestPolicy. For the capacity that has no requestPolicy, default is the full capacity value.\n\nApplies to each device allocation. If Count > 1, the request fails if there aren't enough devices that meet the requirements. If AllocationMode is set to All, the request fails if there are devices that otherwise match the request, and have this capacity, with a value >= the requested amount, but which cannot be allocated to this request.", 
          "$ref": "#/definitions/io.k8s.api.resource.v1beta1.CapacityRequirements"
        }, 
        "name": {
          "type": "string", 
          "description": "Name can be used to reference this subrequest in the list of constraints or the list of configurations for the claim. References must use the format <main request>/<subrequest>.\n\nMust be a DNS label."
        }, 
        "tolerations": {
          "items": {
            "$ref": "#/definitions/io.k8s.api.resource.v1beta1.DeviceToleration"
          }, 
          "type": "array", 
          "description": "If specified, the request's tolerations.\n\nTolerations for NoSchedule are required to allocate a device which has a taint with that effect. The same applies to NoExecute.\n\nIn addition, should any of the allocated devices get tainted with NoExecute after allocation and that effect is not tolerated, then all pods consuming the ResourceClaim get deleted to evict them. The scheduler will not let new pods reserve the claim while it has these tainted devices. Once all pods are evicted, the claim will get deallocated.\n\nThe maximum number of tolerations is 16.\n\nThis is an alpha field and requires enabling the DRADeviceTaints feature gate.", 
          "x-kubernetes-list-type": "atomic"
        }, 
        "deviceClassName": {
          "type": "string", 
          "description": "DeviceClassName references a specific DeviceClass, which can define additional configuration and selectors to be inherited by this subrequest.\n\nA class is required. Which classes are available depends on the cluster.\n\nAdministrators may use this to restrict which devices may get requested by only installing classes with selectors for permitted devices. If users are free to request anything without restrictions, then administrators can create an empty DeviceClass for users to reference."
        }, 
        "allocationMode": {
          "type": "string", 
          "description": "AllocationMode and its related fields define how devices are allocated to satisfy this subrequest. Supported values are:\n\n- ExactCount: This request is for a specific number of devices.\n  This is the default. The exact number is provided in the\n  count field.\n\n- All: This subrequest is for all of the matching devices in a pool.\n  Allocation will fail if some devices are already allocated,\n  unless adminAccess is requested.\n\nIf AllocationMode is not specified, the default mode is ExactCount. If the mode is ExactCount and count is not specified, the default count is one. Any other subrequests must specify this field.\n\nMore modes may get added in the future. Clients must refuse to handle requests with unknown modes."
        }, 
        "selectors": {
          "items": {
            "$ref": "#/definitions/io.k8s.api.resource.v1beta1.DeviceSelector"
          }, 
          "type": "array", 
          "description": "Selectors define criteria which must be satisfied by a specific device in order for that device to be considered for this subrequest. All selectors must be satisfied for a device to be considered.", 
          "x-kubernetes-list-type": "atomic"
        }
      }
    }, 
    "io.k8s.api.apps.v1.ControllerRevisionList": {
      "type": "object", 
      "required": [
        "items"
      ], 
      "x-kubernetes-group-version-kind": [
        {
          "kind": "ControllerRevisionList", 
          "version": "v1", 
          "group": "apps"
        }
      ], 
      "description": "ControllerRevisionList is a resource containing a list of ControllerRevision objects.", 
      "properties": {
        "items": {
          "items": {
            "$ref": "#/definitions/io.k8s.api.apps.v1.ControllerRevision"
          }, 
          "type": "array", 
          "description": "Items is the list of ControllerRevisions"
        }, 
        "kind": {
          "enum": [
            "ControllerRevisionList"
          ], 
          "type": "string", 
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
        }, 
        "apiVersion": {
          "type": "string", 
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources"
        }, 
        "metadata": {
          "description": "More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata", 
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      }
    }, 
    "io.k8s.api.storage.v1.CSIDriver": {
      "type": "object", 
      "required": [
        "spec"
      ], 
      "x-kubernetes-group-version-kind": [
        {
          "kind": "CSIDriver", 
          "version": "v1", 
          "group": "storage.k8s.io"
        }
      ], 
      "description": "CSIDriver captures information about a Container Storage Interface (CSI) volume driver deployed on the cluster. Kubernetes attach detach controller uses this object to determine whether attach is required. Kubelet uses this object to determine whether pod information needs to be passed on mount. CSIDriver objects are non-namespaced.", 
      "properties": {
        "kind": {
          "enum": [
            "CSIDriver"
          ], 
          "type": "string", 
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
        }, 
        "spec": {
          "description": "spec represents the specification of the CSI Driver.", 
          "$ref": "#/definitions/io.k8s.api.storage.v1.CSIDriverSpec"
        }, 
        "apiVersion": {
          "type": "string", 
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources"
        }, 
        "metadata": {
          "description": "Standard object metadata. metadata.Name indicates the name of the CSI driver that this object refers to; it MUST be the same name returned by the CSI GetPluginName() call for that driver. The driver name must be 63 characters or less, beginning and ending with an alphanumeric character ([a-z0-9A-Z]) with dashes (-), dots (.), and alphanumerics between. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata", 
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        }
      }
    }, 
    "io.k8s.api.admissionregistration.v1beta1.MutatingAdmissionPolicyList": {
      "type": "object", 
      "required": [
        "items"
      ], 
      "x-kubernetes-group-version-kind": [
        {
          "kind": "MutatingAdmissionPolicyList", 
          "version": "v1beta1", 
          "group": "admissionregistration.k8s.io"
        }
      ], 
      "description": "MutatingAdmissionPolicyList is a list of MutatingAdmissionPolicy.", 
      "properties": {
        "items": {
          "items": {
            "$ref": "#/definitions/io.k8s.api.admissionregistration.v1beta1.MutatingAdmissionPolicy"
          }, 
          "type": "array", 
          "description": "List of ValidatingAdmissionPolicy."
        }, 
        "kind": {
          "enum": [
            "MutatingAdmissionPolicyList"
          ], 
          "type": "string", 
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
        }, 
        "apiVersion": {
          "type": "string", 
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources"
        }, 
        "metadata": {
          "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds", 
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      }
    }, 
    "io.k8s.api.core.v1.AttachedVolume": {
      "required": [
        "name", 
        "devicePath"
      ], 
      "type": "object", 
      "description": "AttachedVolume describes a volume attached to a node", 
      "properties": {
        "devicePath": {
          "type": "string", 
          "description": "DevicePath represents the device path where the volume should be available"
        }, 
        "name": {
          "type": "string", 
          "description": "Name of the attached volume"
        }
      }
    }, 
    "io.k8s.api.certificates.v1alpha1.ClusterTrustBundle": {
      "type": "object", 
      "required": [
        "spec"
      ], 
      "x-kubernetes-group-version-kind": [
        {
          "kind": "ClusterTrustBundle", 
          "version": "v1alpha1", 
          "group": "certificates.k8s.io"
        }
      ], 
      "description": "ClusterTrustBundle is a cluster-scoped container for X.509 trust anchors (root certificates).\n\nClusterTrustBundle objects are considered to be readable by any authenticated user in the cluster, because they can be mounted by pods using the `clusterTrustBundle` projection.  All service accounts have read access to ClusterTrustBundles by default.  Users who only have namespace-level access to a cluster can read ClusterTrustBundles by impersonating a serviceaccount that they have access to.\n\nIt can be optionally associated with a particular assigner, in which case it contains one valid set of trust anchors for that signer. Signers may have multiple associated ClusterTrustBundles; each is an independent set of trust anchors for that signer. Admission control is used to enforce that only users with permissions on the signer can create or modify the corresponding bundle.", 
      "properties": {
        "kind": {
          "enum": [
            "ClusterTrustBundle"
          ], 
          "type": "string", 
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
        }, 
        "spec": {
          "description": "spec contains the signer (if any) and trust anchors.", 
          "$ref": "#/definitions/io.k8s.api.certificates.v1alpha1.ClusterTrustBundleSpec"
        }, 
        "apiVersion": {
          "type": "string", 
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources"
        }, 
        "metadata": {
          "description": "metadata contains the object metadata.", 
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        }
      }
    }, 
    "io.k8s.api.apps.v1.DaemonSetStatus": {
      "required": [
        "currentNumberScheduled", 
        "numberMisscheduled", 
        "desiredNumberScheduled", 
        "numberReady"
      ], 
      "type": "object", 
      "description": "DaemonSetStatus represents the current status of a daemon set.", 
      "properties": {
        "collisionCount": {
          "type": "integer", 
          "description": "Count of hash collisions for the DaemonSet. The DaemonSet controller uses this field as a collision avoidance mechanism when it needs to create the name for the newest ControllerRevision.", 
          "format": "int32"
        }, 
        "observedGeneration": {
          "type": "integer", 
          "description": "The most recent generation observed by the daemon set controller.", 
          "format": "int64"
        }, 
        "numberAvailable": {
          "type": "integer", 
          "description": "The number of nodes that should be running the daemon pod and have one or more of the daemon pod running and available (ready for at least spec.minReadySeconds)", 
          "format": "int32"
        }, 
        "desiredNumberScheduled": {
          "type": "integer", 
          "description": "The total number of nodes that should be running the daemon pod (including nodes correctly running the daemon pod). More info: https://kubernetes.io/docs/concepts/workloads/controllers/daemonset/", 
          "format": "int32"
        }, 
        "numberUnavailable": {
          "type": "integer", 
          "description": "The number of nodes that should be running the daemon pod and have none of the daemon pod running and available (ready for at least spec.minReadySeconds)", 
          "format": "int32"
        }, 
        "currentNumberScheduled": {
          "type": "integer", 
          "description": "The number of nodes that are running at least 1 daemon pod and are supposed to run the daemon pod. More info: https://kubernetes.io/docs/concepts/workloads/controllers/daemonset/", 
          "format": "int32"
        }, 
        "numberReady": {
          "type": "integer", 
          "description": "numberReady is the number of nodes that should be running the daemon pod and have one or more of the daemon pod running with a Ready Condition.", 
          "format": "int32"
        }, 
        "numberMisscheduled": {
          "type": "integer", 
          "description": "The number of nodes that are running the daemon pod, but are not supposed to run the daemon pod. More info: https://kubernetes.io/docs/concepts/workloads/controllers/daemonset/", 
          "format": "int32"
        }, 
        "updatedNumberScheduled": {
          "type": "integer", 
          "description": "The total number of nodes that are running updated daemon pod", 
          "format": "int32"
        }, 
        "conditions": {
          "description": "Represents the latest available observations of a DaemonSet's current state.", 
          "x-kubernetes-list-map-keys": [
            "type"
          ], 
          "x-kubernetes-patch-merge-key": "type", 
          "items": {
            "$ref": "#/definitions/io.k8s.api.apps.v1.DaemonSetCondition"
          }, 
          "type": "array", 
          "x-kubernetes-list-type": "map", 
          "x-kubernetes-patch-strategy": "merge"
        }
      }
    }, 
    "io.k8s.api.flowcontrol.v1.PriorityLevelConfigurationStatus": {
      "type": "object", 
      "description": "PriorityLevelConfigurationStatus represents the current state of a \"request-priority\".", 
      "properties": {
        "conditions": {
          "description": "`conditions` is the current state of \"request-priority\".", 
          "x-kubernetes-list-map-keys": [
            "type"
          ], 
          "x-kubernetes-patch-merge-key": "type", 
          "items": {
            "$ref": "#/definitions/io.k8s.api.flowcontrol.v1.PriorityLevelConfigurationCondition"
          }, 
          "type": "array", 
          "x-kubernetes-list-type": "map", 
          "x-kubernetes-patch-strategy": "merge"
        }
      }
    }, 
    "io.k8s.api.storage.v1beta1.VolumeAttributesClassList": {
      "type": "object", 
      "required": [
        "items"
      ], 
      "x-kubernetes-group-version-kind": [
        {
          "kind": "VolumeAttributesClassList", 
          "version": "v1beta1", 
          "group": "storage.k8s.io"
        }
      ], 
      "description": "VolumeAttributesClassList is a collection of VolumeAttributesClass objects.", 
      "properties": {
        "items": {
          "items": {
            "$ref": "#/definitions/io.k8s.api.storage.v1beta1.VolumeAttributesClass"
          }, 
          "type": "array", 
          "description": "items is the list of VolumeAttributesClass objects."
        }, 
        "kind": {
          "enum": [
            "VolumeAttributesClassList"
          ], 
          "type": "string", 
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
        }, 
        "apiVersion": {
          "type": "string", 
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources"
        }, 
        "metadata": {
          "description": "Standard list metadata More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata", 
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      }
    }, 
    "io.k8s.api.resource.v1.ResourceClaim": {
      "type": "object", 
      "required": [
        "spec"
      ], 
      "x-kubernetes-group-version-kind": [
        {
          "kind": "ResourceClaim", 
          "version": "v1", 
          "group": "resource.k8s.io"
        }
      ], 
      "description": "ResourceClaim describes a request for access to resources in the cluster, for use by workloads. For example, if a workload needs an accelerator device with specific properties, this is how that request is expressed. The status stanza tracks whether this claim has been satisfied and what specific resources have been allocated.\n\nThis is an alpha type and requires enabling the DynamicResourceAllocation feature gate.", 
      "properties": {
        "status": {
          "description": "Status describes whether the claim is ready to use and what has been allocated.", 
          "$ref": "#/definitions/io.k8s.api.resource.v1.ResourceClaimStatus"
        }, 
        "kind": {
          "enum": [
            "ResourceClaim"
          ], 
          "type": "string", 
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
        }, 
        "spec": {
          "description": "Spec describes what is being requested and how to configure it. The spec is immutable.", 
          "$ref": "#/definitions/io.k8s.api.resource.v1.ResourceClaimSpec"
        }, 
        "apiVersion": {
          "type": "string", 
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources"
        }, 
        "metadata": {
          "description": "Standard object metadata", 
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        }
      }
    }, 
    "io.k8s.api.resource.v1.DeviceCounterConsumption": {
      "required": [
        "counterSet", 
        "counters"
      ], 
      "type": "object", 
      "description": "DeviceCounterConsumption defines a set of counters that a device will consume from a CounterSet.", 
      "properties": {
        "counterSet": {
          "type": "string", 
          "description": "CounterSet is the name of the set from which the counters defined will be consumed."
        }, 
        "counters": {
          "additionalProperties": {
            "$ref": "#/definitions/io.k8s.api.resource.v1.Counter"
          }, 
          "type": "object", 
          "description": "Counters defines the counters that will be consumed by the device.\n\nThe maximum number counters in a device is 32. In addition, the maximum number of all counters in all devices is 1024 (for example, 64 devices with 16 counters each)."
        }
      }
    }, 
    "io.k8s.api.apps.v1.DaemonSetCondition": {
      "required": [
        "type", 
        "status"
      ], 
      "type": "object", 
      "description": "DaemonSetCondition describes the state of a DaemonSet at a certain point.", 
      "properties": {
        "status": {
          "type": "string", 
          "description": "Status of the condition, one of True, False, Unknown."
        }, 
        "lastTransitionTime": {
          "description": "Last time the condition transitioned from one status to another.", 
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
        }, 
        "message": {
          "type": "string", 
          "description": "A human readable message indicating details about the transition."
        }, 
        "type": {
          "type": "string", 
          "description": "Type of DaemonSet condition."
        }, 
        "reason": {
          "type": "string", 
          "description": "The reason for the condition's last transition."
        }
      }
    }, 
    "io.k8s.api.core.v1.DaemonEndpoint": {
      "required": [
        "Port"
      ], 
      "type": "object", 
      "description": "DaemonEndpoint contains information about a single Daemon endpoint.", 
      "properties": {
        "Port": {
          "type": "integer", 
          "description": "Port number of the given endpoint.", 
          "format": "int32"
        }
      }
    }, 
    "io.k8s.api.resource.v1beta1.ResourceClaimTemplate": {
      "type": "object", 
      "required": [
        "spec"
      ], 
      "x-kubernetes-group-version-kind": [
        {
          "kind": "ResourceClaimTemplate", 
          "version": "v1beta1", 
          "group": "resource.k8s.io"
        }
      ], 
      "description": "ResourceClaimTemplate is used to produce ResourceClaim objects.\n\nThis is an alpha type and requires enabling the DynamicResourceAllocation feature gate.", 
      "properties": {
        "kind": {
          "enum": [
            "ResourceClaimTemplate"
          ], 
          "type": "string", 
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
        }, 
        "spec": {
          "description": "Describes the ResourceClaim that is to be generated.\n\nThis field is immutable. A ResourceClaim will get created by the control plane for a Pod when needed and then not get updated anymore.", 
          "$ref": "#/definitions/io.k8s.api.resource.v1beta1.ResourceClaimTemplateSpec"
        }, 
        "apiVersion": {
          "type": "string", 
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources"
        }, 
        "metadata": {
          "description": "Standard object metadata", 
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        }
      }
    }, 
    "io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.JSONSchemaPropsOrBool": {
      "description": "JSONSchemaPropsOrBool represents JSONSchemaProps or a boolean value. Defaults to true for the boolean property."
    }, 
    "io.k8s.api.coordination.v1alpha2.LeaseCandidateSpec": {
      "required": [
        "leaseName", 
        "binaryVersion", 
        "strategy"
      ], 
      "type": "object", 
      "description": "LeaseCandidateSpec is a specification of a Lease.", 
      "properties": {
        "binaryVersion": {
          "type": "string", 
          "description": "BinaryVersion is the binary version. It must be in a semver format without leading `v`. This field is required."
        }, 
        "pingTime": {
          "description": "PingTime is the last time that the server has requested the LeaseCandidate to renew. It is only done during leader election to check if any LeaseCandidates have become ineligible. When PingTime is updated, the LeaseCandidate will respond by updating RenewTime.", 
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.MicroTime"
        }, 
        "renewTime": {
          "description": "RenewTime is the time that the LeaseCandidate was last updated. Any time a Lease needs to do leader election, the PingTime field is updated to signal to the LeaseCandidate that they should update the RenewTime. Old LeaseCandidate objects are also garbage collected if it has been hours since the last renew. The PingTime field is updated regularly to prevent garbage collection for still active LeaseCandidates.", 
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.MicroTime"
        }, 
        "leaseName": {
          "type": "string", 
          "description": "LeaseName is the name of the lease for which this candidate is contending. This field is immutable."
        }, 
        "emulationVersion": {
          "type": "string", 
          "description": "EmulationVersion is the emulation version. It must be in a semver format without leading `v`. EmulationVersion must be less than or equal to BinaryVersion. This field is required when strategy is \"OldestEmulationVersion\""
        }, 
        "strategy": {
          "type": "string", 
          "description": "Strategy is the strategy that coordinated leader election will use for picking the leader. If multiple candidates for the same Lease return different strategies, the strategy provided by the candidate with the latest BinaryVersion will be used. If there is still conflict, this is a user error and coordinated leader election will not operate the Lease until resolved."
        }
      }
    }, 
    "io.k8s.api.autoscaling.v1.Scale": {
      "type": "object", 
      "x-kubernetes-group-version-kind": [
        {
          "kind": "Scale", 
          "version": "v1", 
          "group": "autoscaling"
        }
      ], 
      "description": "Scale represents a scaling request for a resource.", 
      "properties": {
        "status": {
          "description": "status is the current status of the scale. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status. Read-only.", 
          "$ref": "#/definitions/io.k8s.api.autoscaling.v1.ScaleStatus"
        }, 
        "kind": {
          "enum": [
            "Scale"
          ], 
          "type": "string", 
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
        }, 
        "spec": {
          "description": "spec defines the behavior of the scale. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status.", 
          "$ref": "#/definitions/io.k8s.api.autoscaling.v1.ScaleSpec"
        }, 
        "apiVersion": {
          "type": "string", 
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources"
        }, 
        "metadata": {
          "description": "Standard object metadata; More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata.", 
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        }
      }
    }, 
    "io.k8s.api.flowcontrol.v1.ServiceAccountSubject": {
      "required": [
        "namespace", 
        "name"
      ], 
      "type": "object", 
      "description": "ServiceAccountSubject holds detailed information for service-account-kind subject.", 
      "properties": {
        "namespace": {
          "type": "string", 
          "description": "`namespace` is the namespace of matching ServiceAccount objects. Required."
        }, 
        "name": {
          "type": "string", 
          "description": "`name` is the name of matching ServiceAccount objects, or \"*\" to match regardless of name. Required."
        }
      }
    }, 
    "io.k8s.api.core.v1.ScaleIOVolumeSource": {
      "required": [
        "gateway", 
        "system", 
        "secretRef"
      ], 
      "type": "object", 
      "description": "ScaleIOVolumeSource represents a persistent ScaleIO volume", 
      "properties": {
        "storageMode": {
          "type": "string", 
          "description": "storageMode indicates whether the storage for a volume should be ThickProvisioned or ThinProvisioned. Default is ThinProvisioned."
        }, 
        "secretRef": {
          "description": "secretRef references to the secret for ScaleIO user and other sensitive information. If this is not provided, Login operation will fail.", 
          "$ref": "#/definitions/io.k8s.api.core.v1.LocalObjectReference"
        }, 
        "protectionDomain": {
          "type": "string", 
          "description": "protectionDomain is the name of the ScaleIO Protection Domain for the configured storage."
        }, 
        "volumeName": {
          "type": "string", 
          "description": "volumeName is the name of a volume already created in the ScaleIO system that is associated with this volume source."
        }, 
        "sslEnabled": {
          "type": "boolean", 
          "description": "sslEnabled Flag enable/disable SSL communication with Gateway, default false"
        }, 
        "system": {
          "type": "string", 
          "description": "system is the name of the storage system as configured in ScaleIO."
        }, 
        "fsType": {
          "type": "string", 
          "description": "fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". Default is \"xfs\"."
        }, 
        "readOnly": {
          "type": "boolean", 
          "description": "readOnly Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts."
        }, 
        "storagePool": {
          "type": "string", 
          "description": "storagePool is the ScaleIO Storage Pool associated with the protection domain."
        }, 
        "gateway": {
          "type": "string", 
          "description": "gateway is the host address of the ScaleIO API Gateway."
        }
      }
    }, 
    "io.k8s.api.autoscaling.v2.HorizontalPodAutoscaler": {
      "type": "object", 
      "x-kubernetes-group-version-kind": [
        {
          "kind": "HorizontalPodAutoscaler", 
          "version": "v2", 
          "group": "autoscaling"
        }
      ], 
      "description": "HorizontalPodAutoscaler is the configuration for a horizontal pod autoscaler, which automatically manages the replica count of any resource implementing the scale subresource based on the metrics specified.", 
      "properties": {
        "status": {
          "description": "status is the current information about the autoscaler.", 
          "$ref": "#/definitions/io.k8s.api.autoscaling.v2.HorizontalPodAutoscalerStatus"
        }, 
        "kind": {
          "enum": [
            "HorizontalPodAutoscaler"
          ], 
          "type": "string", 
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
        }, 
        "spec": {
          "description": "spec is the specification for the behaviour of the autoscaler. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status.", 
          "$ref": "#/definitions/io.k8s.api.autoscaling.v2.HorizontalPodAutoscalerSpec"
        }, 
        "apiVersion": {
          "type": "string", 
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources"
        }, 
        "metadata": {
          "description": "metadata is the standard object metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata", 
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        }
      }
    }, 
    "io.k8s.apimachinery.pkg.apis.meta.v1.APIGroupList": {
      "type": "object", 
      "required": [
        "groups"
      ], 
      "x-kubernetes-group-version-kind": [
        {
          "kind": "APIGroupList", 
          "version": "v1", 
          "group": ""
        }
      ], 
      "description": "APIGroupList is a list of APIGroup, to allow clients to discover the API at /apis.", 
      "properties": {
        "kind": {
          "enum": [
            "APIGroupList"
          ], 
          "type": "string", 
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
        }, 
        "apiVersion": {
          "type": "string", 
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources"
        }, 
        "groups": {
          "items": {
            "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.APIGroup"
          }, 
          "type": "array", 
          "description": "groups is a list of APIGroup.", 
          "x-kubernetes-list-type": "atomic"
        }
      }
    }, 
    "io.k8s.api.core.v1.PodCertificateProjection": {
      "required": [
        "signerName", 
        "keyType"
      ], 
      "type": "object", 
      "description": "PodCertificateProjection provides a private key and X.509 certificate in the pod filesystem.", 
      "properties": {
        "maxExpirationSeconds": {
          "type": "integer", 
          "description": "maxExpirationSeconds is the maximum lifetime permitted for the certificate.\n\nKubelet copies this value verbatim into the PodCertificateRequests it generates for this projection.\n\nIf omitted, kube-apiserver will set it to 86400(24 hours). kube-apiserver will reject values shorter than 3600 (1 hour).  The maximum allowable value is 7862400 (91 days).\n\nThe signer implementation is then free to issue a certificate with any lifetime *shorter* than MaxExpirationSeconds, but no shorter than 3600 seconds (1 hour).  This constraint is enforced by kube-apiserver. `kubernetes.io` signers will never issue certificates with a lifetime longer than 24 hours.", 
          "format": "int32"
        }, 
        "signerName": {
          "type": "string", 
          "description": "Kubelet's generated CSRs will be addressed to this signer."
        }, 
        "credentialBundlePath": {
          "type": "string", 
          "description": "Write the credential bundle at this path in the projected volume.\n\nThe credential bundle is a single file that contains multiple PEM blocks. The first PEM block is a PRIVATE KEY block, containing a PKCS#8 private key.\n\nThe remaining blocks are CERTIFICATE blocks, containing the issued certificate chain from the signer (leaf and any intermediates).\n\nUsing credentialBundlePath lets your Pod's application code make a single atomic read that retrieves a consistent key and certificate chain.  If you project them to separate files, your application code will need to additionally check that the leaf certificate was issued to the key."
        }, 
        "keyType": {
          "type": "string", 
          "description": "The type of keypair Kubelet will generate for the pod.\n\nValid values are \"RSA3072\", \"RSA4096\", \"ECDSAP256\", \"ECDSAP384\", \"ECDSAP521\", and \"ED25519\"."
        }, 
        "certificateChainPath": {
          "type": "string", 
          "description": "Write the certificate chain at this path in the projected volume.\n\nMost applications should use credentialBundlePath.  When using keyPath and certificateChainPath, your application needs to check that the key and leaf certificate are consistent, because it is possible to read the files mid-rotation."
        }, 
        "keyPath": {
          "type": "string", 
          "description": "Write the key at this path in the projected volume.\n\nMost applications should use credentialBundlePath.  When using keyPath and certificateChainPath, your application needs to check that the key and leaf certificate are consistent, because it is possible to read the files mid-rotation."
        }
      }
    }, 
    "io.k8s.api.resource.v1beta1.CounterSet": {
      "required": [
        "name", 
        "counters"
      ], 
      "type": "object", 
      "description": "CounterSet defines a named set of counters that are available to be used by devices defined in the ResourceSlice.\n\nThe counters are not allocatable by themselves, but can be referenced by devices. When a device is allocated, the portion of counters it uses will no longer be available for use by other devices.", 
      "properties": {
        "name": {
          "type": "string", 
          "description": "Name defines the name of the counter set. It must be a DNS label."
        }, 
        "counters": {
          "additionalProperties": {
            "$ref": "#/definitions/io.k8s.api.resource.v1beta1.Counter"
          }, 
          "type": "object", 
          "description": "Counters defines the set of counters for this CounterSet The name of each counter must be unique in that set and must be a DNS label.\n\nThe maximum number of counters is 32."
        }
      }
    }, 
    "io.k8s.api.coordination.v1beta1.LeaseCandidate": {
      "type": "object", 
      "x-kubernetes-group-version-kind": [
        {
          "kind": "LeaseCandidate", 
          "version": "v1beta1", 
          "group": "coordination.k8s.io"
        }
      ], 
      "description": "LeaseCandidate defines a candidate for a Lease object. Candidates are created such that coordinated leader election will pick the best leader from the list of candidates.", 
      "properties": {
        "kind": {
          "enum": [
            "LeaseCandidate"
          ], 
          "type": "string", 
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
        }, 
        "spec": {
          "description": "spec contains the specification of the Lease. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status", 
          "$ref": "#/definitions/io.k8s.api.coordination.v1beta1.LeaseCandidateSpec"
        }, 
        "apiVersion": {
          "type": "string", 
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources"
        }, 
        "metadata": {
          "description": "More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata", 
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        }
      }
    }, 
    "io.k8s.api.core.v1.PodDNSConfigOption": {
      "type": "object", 
      "description": "PodDNSConfigOption defines DNS resolver options of a pod.", 
      "properties": {
        "name": {
          "type": "string", 
          "description": "Name is this DNS resolver option's name. Required."
        }, 
        "value": {
          "type": "string", 
          "description": "Value is this DNS resolver option's value."
        }
      }
    }, 
    "io.k8s.api.networking.v1.ServiceCIDR": {
      "type": "object", 
      "x-kubernetes-group-version-kind": [
        {
          "kind": "ServiceCIDR", 
          "version": "v1", 
          "group": "networking.k8s.io"
        }
      ], 
      "description": "ServiceCIDR defines a range of IP addresses using CIDR format (e.g. 192.168.0.0/24 or 2001:db2::/64). This range is used to allocate ClusterIPs to Service objects.", 
      "properties": {
        "status": {
          "description": "status represents the current state of the ServiceCIDR. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status", 
          "$ref": "#/definitions/io.k8s.api.networking.v1.ServiceCIDRStatus"
        }, 
        "kind": {
          "enum": [
            "ServiceCIDR"
          ], 
          "type": "string", 
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
        }, 
        "spec": {
          "description": "spec is the desired state of the ServiceCIDR. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status", 
          "$ref": "#/definitions/io.k8s.api.networking.v1.ServiceCIDRSpec"
        }, 
        "apiVersion": {
          "type": "string", 
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources"
        }, 
        "metadata": {
          "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata", 
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        }
      }
    }, 
    "io.k8s.api.resource.v1beta1.CapacityRequestPolicy": {
      "type": "object", 
      "description": "CapacityRequestPolicy defines how requests consume device capacity.\n\nMust not set more than one ValidRequestValues.", 
      "properties": {
        "default": {
          "description": "Default specifies how much of this capacity is consumed by a request that does not contain an entry for it in DeviceRequest's Capacity.", 
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.api.resource.Quantity"
        }, 
        "validValues": {
          "items": {
            "$ref": "#/definitions/io.k8s.apimachinery.pkg.api.resource.Quantity"
          }, 
          "type": "array", 
          "description": "ValidValues defines a set of acceptable quantity values in consuming requests.\n\nMust not contain more than 10 entries. Must be sorted in ascending order.\n\nIf this field is set, Default must be defined and it must be included in ValidValues list.\n\nIf the requested amount does not match any valid value but smaller than some valid values, the scheduler calculates the smallest valid value that is greater than or equal to the request. That is: min(ceil(requestedValue) \u2208 validValues), where requestedValue \u2264 max(validValues).\n\nIf the requested amount exceeds all valid values, the request violates the policy, and this device cannot be allocated.", 
          "x-kubernetes-list-type": "atomic"
        }, 
        "validRange": {
          "description": "ValidRange defines an acceptable quantity value range in consuming requests.\n\nIf this field is set, Default must be defined and it must fall within the defined ValidRange.\n\nIf the requested amount does not fall within the defined range, the request violates the policy, and this device cannot be allocated.\n\nIf the request doesn't contain this capacity entry, Default value is used.", 
          "$ref": "#/definitions/io.k8s.api.resource.v1beta1.CapacityRequestPolicyRange"
        }
      }
    }, 
    "io.k8s.api.core.v1.NamespaceSpec": {
      "type": "object", 
      "description": "NamespaceSpec describes the attributes on a Namespace.", 
      "properties": {
        "finalizers": {
          "items": {
            "type": "string"
          }, 
          "type": "array", 
          "description": "Finalizers is an opaque list of values that must be empty to permanently remove object from storage. More info: https://kubernetes.io/docs/tasks/administer-cluster/namespaces/", 
          "x-kubernetes-list-type": "atomic"
        }
      }
    }, 
    "io.k8s.api.flowcontrol.v1.FlowSchemaStatus": {
      "type": "object", 
      "description": "FlowSchemaStatus represents the current state of a FlowSchema.", 
      "properties": {
        "conditions": {
          "description": "`conditions` is a list of the current states of FlowSchema.", 
          "x-kubernetes-list-map-keys": [
            "type"
          ], 
          "x-kubernetes-patch-merge-key": "type", 
          "items": {
            "$ref": "#/definitions/io.k8s.api.flowcontrol.v1.FlowSchemaCondition"
          }, 
          "type": "array", 
          "x-kubernetes-list-type": "map", 
          "x-kubernetes-patch-strategy": "merge"
        }
      }
    }, 
    "io.k8s.api.storage.v1.StorageClassList": {
      "type": "object", 
      "required": [
        "items"
      ], 
      "x-kubernetes-group-version-kind": [
        {
          "kind": "StorageClassList", 
          "version": "v1", 
          "group": "storage.k8s.io"
        }
      ], 
      "description": "StorageClassList is a collection of storage classes.", 
      "properties": {
        "items": {
          "items": {
            "$ref": "#/definitions/io.k8s.api.storage.v1.StorageClass"
          }, 
          "type": "array", 
          "description": "items is the list of StorageClasses"
        }, 
        "kind": {
          "enum": [
            "StorageClassList"
          ], 
          "type": "string", 
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
        }, 
        "apiVersion": {
          "type": "string", 
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources"
        }, 
        "metadata": {
          "description": "Standard list metadata More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata", 
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      }
    }, 
    "io.k8s.api.core.v1.PodIP": {
      "required": [
        "ip"
      ], 
      "type": "object", 
      "description": "PodIP represents a single IP address allocated to the pod.", 
      "properties": {
        "ip": {
          "type": "string", 
          "description": "IP is the IP address assigned to the pod"
        }
      }
    }, 
    "io.k8s.api.resource.v1beta2.ResourceClaimTemplate": {
      "type": "object", 
      "required": [
        "spec"
      ], 
      "x-kubernetes-group-version-kind": [
        {
          "kind": "ResourceClaimTemplate", 
          "version": "v1beta2", 
          "group": "resource.k8s.io"
        }
      ], 
      "description": "ResourceClaimTemplate is used to produce ResourceClaim objects.\n\nThis is an alpha type and requires enabling the DynamicResourceAllocation feature gate.", 
      "properties": {
        "kind": {
          "enum": [
            "ResourceClaimTemplate"
          ], 
          "type": "string", 
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
        }, 
        "spec": {
          "description": "Describes the ResourceClaim that is to be generated.\n\nThis field is immutable. A ResourceClaim will get created by the control plane for a Pod when needed and then not get updated anymore.", 
          "$ref": "#/definitions/io.k8s.api.resource.v1beta2.ResourceClaimTemplateSpec"
        }, 
        "apiVersion": {
          "type": "string", 
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources"
        }, 
        "metadata": {
          "description": "Standard object metadata", 
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        }
      }
    }, 
    "io.k8s.api.core.v1.PodDNSConfig": {
      "type": "object", 
      "description": "PodDNSConfig defines the DNS parameters of a pod in addition to those generated from DNSPolicy.", 
      "properties": {
        "nameservers": {
          "items": {
            "type": "string"
          }, 
          "type": "array", 
          "description": "A list of DNS name server IP addresses. This will be appended to the base nameservers generated from DNSPolicy. Duplicated nameservers will be removed.", 
          "x-kubernetes-list-type": "atomic"
        }, 
        "searches": {
          "items": {
            "type": "string"
          }, 
          "type": "array", 
          "description": "A list of DNS search domains for host-name lookup. This will be appended to the base search paths generated from DNSPolicy. Duplicated search paths will be removed.", 
          "x-kubernetes-list-type": "atomic"
        }, 
        "options": {
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.PodDNSConfigOption"
          }, 
          "type": "array", 
          "description": "A list of DNS resolver options. This will be merged with the base options generated from DNSPolicy. Duplicated entries will be removed. Resolution options given in Options will override those that appear in the base DNSPolicy.", 
          "x-kubernetes-list-type": "atomic"
        }
      }
    }, 
    "io.k8s.api.resource.v1beta2.CapacityRequestPolicy": {
      "type": "object", 
      "description": "CapacityRequestPolicy defines how requests consume device capacity.\n\nMust not set more than one ValidRequestValues.", 
      "properties": {
        "default": {
          "description": "Default specifies how much of this capacity is consumed by a request that does not contain an entry for it in DeviceRequest's Capacity.", 
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.api.resource.Quantity"
        }, 
        "validValues": {
          "items": {
            "$ref": "#/definitions/io.k8s.apimachinery.pkg.api.resource.Quantity"
          }, 
          "type": "array", 
          "description": "ValidValues defines a set of acceptable quantity values in consuming requests.\n\nMust not contain more than 10 entries. Must be sorted in ascending order.\n\nIf this field is set, Default must be defined and it must be included in ValidValues list.\n\nIf the requested amount does not match any valid value but smaller than some valid values, the scheduler calculates the smallest valid value that is greater than or equal to the request. That is: min(ceil(requestedValue) \u2208 validValues), where requestedValue \u2264 max(validValues).\n\nIf the requested amount exceeds all valid values, the request violates the policy, and this device cannot be allocated.", 
          "x-kubernetes-list-type": "atomic"
        }, 
        "validRange": {
          "description": "ValidRange defines an acceptable quantity value range in consuming requests.\n\nIf this field is set, Default must be defined and it must fall within the defined ValidRange.\n\nIf the requested amount does not fall within the defined range, the request violates the policy, and this device cannot be allocated.\n\nIf the request doesn't contain this capacity entry, Default value is used.", 
          "$ref": "#/definitions/io.k8s.api.resource.v1beta2.CapacityRequestPolicyRange"
        }
      }
    }, 
    "io.k8s.api.apiserverinternal.v1alpha1.ServerStorageVersion": {
      "type": "object", 
      "description": "An API server instance reports the version it can decode and the version it encodes objects to when persisting objects in the backend.", 
      "properties": {
        "apiServerID": {
          "type": "string", 
          "description": "The ID of the reporting API server."
        }, 
        "encodingVersion": {
          "type": "string", 
          "description": "The API server encodes the object to this version when persisting it in the backend (e.g., etcd)."
        }, 
        "decodableVersions": {
          "items": {
            "type": "string"
          }, 
          "type": "array", 
          "description": "The API server can decode objects encoded in these versions. The encodingVersion must be included in the decodableVersions.", 
          "x-kubernetes-list-type": "set"
        }, 
        "servedVersions": {
          "items": {
            "type": "string"
          }, 
          "type": "array", 
          "description": "The API server can serve these versions. DecodableVersions must include all ServedVersions.", 
          "x-kubernetes-list-type": "set"
        }
      }
    }, 
    "io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.CustomResourceDefinitionNames": {
      "required": [
        "plural", 
        "kind"
      ], 
      "type": "object", 
      "description": "CustomResourceDefinitionNames indicates the names to serve this CustomResourceDefinition", 
      "properties": {
        "shortNames": {
          "items": {
            "type": "string"
          }, 
          "type": "array", 
          "description": "shortNames are short names for the resource, exposed in API discovery documents, and used by clients to support invocations like `kubectl get <shortname>`. It must be all lowercase.", 
          "x-kubernetes-list-type": "atomic"
        }, 
        "kind": {
          "type": "string", 
          "description": "kind is the serialized kind of the resource. It is normally CamelCase and singular. Custom resource instances will use this value as the `kind` attribute in API calls."
        }, 
        "listKind": {
          "type": "string", 
          "description": "listKind is the serialized kind of the list for this resource. Defaults to \"`kind`List\"."
        }, 
        "singular": {
          "type": "string", 
          "description": "singular is the singular name of the resource. It must be all lowercase. Defaults to lowercased `kind`."
        }, 
        "plural": {
          "type": "string", 
          "description": "plural is the plural name of the resource to serve. The custom resources are served under `/apis/<group>/<version>/.../<plural>`. Must match the name of the CustomResourceDefinition (in the form `<names.plural>.<group>`). Must be all lowercase."
        }, 
        "categories": {
          "items": {
            "type": "string"
          }, 
          "type": "array", 
          "description": "categories is a list of grouped resources this custom resource belongs to (e.g. 'all'). This is published in API discovery documents, and used by clients to support invocations like `kubectl get all`.", 
          "x-kubernetes-list-type": "atomic"
        }
      }
    }, 
    "io.k8s.api.admissionregistration.v1alpha1.ApplyConfiguration": {
      "type": "object", 
      "description": "ApplyConfiguration defines the desired configuration values of an object.", 
      "properties": {
        "expression": {
          "type": "string", 
          "description": "expression will be evaluated by CEL to create an apply configuration. ref: https://github.com/google/cel-spec\n\nApply configurations are declared in CEL using object initialization. For example, this CEL expression returns an apply configuration to set a single field:\n\n\tObject{\n\t  spec: Object.spec{\n\t    serviceAccountName: \"example\"\n\t  }\n\t}\n\nApply configurations may not modify atomic structs, maps or arrays due to the risk of accidental deletion of values not included in the apply configuration.\n\nCEL expressions have access to the object types needed to create apply configurations:\n\n- 'Object' - CEL type of the resource object. - 'Object.<fieldName>' - CEL type of object field (such as 'Object.spec') - 'Object.<fieldName1>.<fieldName2>...<fieldNameN>` - CEL type of nested field (such as 'Object.spec.containers')\n\nCEL expressions have access to the contents of the API request, organized into CEL variables as well as some other useful variables:\n\n- 'object' - The object from the incoming request. The value is null for DELETE requests. - 'oldObject' - The existing object. The value is null for CREATE requests. - 'request' - Attributes of the API request([ref](/pkg/apis/admission/types.go#AdmissionRequest)). - 'params' - Parameter resource referred to by the policy binding being evaluated. Only populated if the policy has a ParamKind. - 'namespaceObject' - The namespace object that the incoming object belongs to. The value is null for cluster-scoped resources. - 'variables' - Map of composited variables, from its name to its lazily evaluated value.\n  For example, a variable named 'foo' can be accessed as 'variables.foo'.\n- 'authorizer' - A CEL Authorizer. May be used to perform authorization checks for the principal (user or service account) of the request.\n  See https://pkg.go.dev/k8s.io/apiserver/pkg/cel/library#Authz\n- 'authorizer.requestResource' - A CEL ResourceCheck constructed from the 'authorizer' and configured with the\n  request resource.\n\nThe `apiVersion`, `kind`, `metadata.name` and `metadata.generateName` are always accessible from the root of the object. No other metadata properties are accessible.\n\nOnly property names of the form `[a-zA-Z_.-/][a-zA-Z0-9_.-/]*` are accessible. Required."
        }
      }
    }, 
    "io.k8s.api.core.v1.LimitRangeItem": {
      "required": [
        "type"
      ], 
      "type": "object", 
      "description": "LimitRangeItem defines a min/max usage limit for any resource that matches on kind.", 
      "properties": {
        "defaultRequest": {
          "additionalProperties": {
            "$ref": "#/definitions/io.k8s.apimachinery.pkg.api.resource.Quantity"
          }, 
          "type": "object", 
          "description": "DefaultRequest is the default resource requirement request value by resource name if resource request is omitted."
        }, 
        "min": {
          "additionalProperties": {
            "$ref": "#/definitions/io.k8s.apimachinery.pkg.api.resource.Quantity"
          }, 
          "type": "object", 
          "description": "Min usage constraints on this kind by resource name."
        }, 
        "default": {
          "additionalProperties": {
            "$ref": "#/definitions/io.k8s.apimachinery.pkg.api.resource.Quantity"
          }, 
          "type": "object", 
          "description": "Default resource requirement limit value by resource name if resource limit is omitted."
        }, 
        "max": {
          "additionalProperties": {
            "$ref": "#/definitions/io.k8s.apimachinery.pkg.api.resource.Quantity"
          }, 
          "type": "object", 
          "description": "Max usage constraints on this kind by resource name."
        }, 
        "maxLimitRequestRatio": {
          "additionalProperties": {
            "$ref": "#/definitions/io.k8s.apimachinery.pkg.api.resource.Quantity"
          }, 
          "type": "object", 
          "description": "MaxLimitRequestRatio if specified, the named resource must have a request and limit that are both non-zero where limit divided by request is less than or equal to the enumerated value; this represents the max burst for the named resource."
        }, 
        "type": {
          "type": "string", 
          "description": "Type of resource that this limit applies to."
        }
      }
    }, 
    "io.k8s.api.flowcontrol.v1.PriorityLevelConfiguration": {
      "type": "object", 
      "x-kubernetes-group-version-kind": [
        {
          "kind": "PriorityLevelConfiguration", 
          "version": "v1", 
          "group": "flowcontrol.apiserver.k8s.io"
        }
      ], 
      "description": "PriorityLevelConfiguration represents the configuration of a priority level.", 
      "properties": {
        "status": {
          "description": "`status` is the current status of a \"request-priority\". More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status", 
          "$ref": "#/definitions/io.k8s.api.flowcontrol.v1.PriorityLevelConfigurationStatus"
        }, 
        "kind": {
          "enum": [
            "PriorityLevelConfiguration"
          ], 
          "type": "string", 
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
        }, 
        "spec": {
          "description": "`spec` is the specification of the desired behavior of a \"request-priority\". More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status", 
          "$ref": "#/definitions/io.k8s.api.flowcontrol.v1.PriorityLevelConfigurationSpec"
        }, 
        "apiVersion": {
          "type": "string", 
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources"
        }, 
        "metadata": {
          "description": "`metadata` is the standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata", 
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        }
      }
    }, 
    "io.k8s.api.flowcontrol.v1.FlowSchemaSpec": {
      "required": [
        "priorityLevelConfiguration"
      ], 
      "type": "object", 
      "description": "FlowSchemaSpec describes how the FlowSchema's specification looks like.", 
      "properties": {
        "rules": {
          "items": {
            "$ref": "#/definitions/io.k8s.api.flowcontrol.v1.PolicyRulesWithSubjects"
          }, 
          "type": "array", 
          "description": "`rules` describes which requests will match this flow schema. This FlowSchema matches a request if and only if at least one member of rules matches the request. if it is an empty slice, there will be no requests matching the FlowSchema.", 
          "x-kubernetes-list-type": "atomic"
        }, 
        "distinguisherMethod": {
          "description": "`distinguisherMethod` defines how to compute the flow distinguisher for requests that match this schema. `nil` specifies that the distinguisher is disabled and thus will always be the empty string.", 
          "$ref": "#/definitions/io.k8s.api.flowcontrol.v1.FlowDistinguisherMethod"
        }, 
        "priorityLevelConfiguration": {
          "description": "`priorityLevelConfiguration` should reference a PriorityLevelConfiguration in the cluster. If the reference cannot be resolved, the FlowSchema will be ignored and marked as invalid in its status. Required.", 
          "$ref": "#/definitions/io.k8s.api.flowcontrol.v1.PriorityLevelConfigurationReference"
        }, 
        "matchingPrecedence": {
          "type": "integer", 
          "description": "`matchingPrecedence` is used to choose among the FlowSchemas that match a given request. The chosen FlowSchema is among those with the numerically lowest (which we take to be logically highest) MatchingPrecedence.  Each MatchingPrecedence value must be ranged in [1,10000]. Note that if the precedence is not specified, it will be set to 1000 as default.", 
          "format": "int32"
        }
      }
    }, 
    "io.k8s.api.core.v1.ContainerStateWaiting": {
      "type": "object", 
      "description": "ContainerStateWaiting is a waiting state of a container.", 
      "properties": {
        "message": {
          "type": "string", 
          "description": "Message regarding why the container is not yet running."
        }, 
        "reason": {
          "type": "string", 
          "description": "(brief) reason the container is not yet running."
        }
      }
    }, 
    "io.k8s.api.resource.v1beta1.Counter": {
      "required": [
        "value"
      ], 
      "type": "object", 
      "description": "Counter describes a quantity associated with a device.", 
      "properties": {
        "value": {
          "description": "Value defines how much of a certain device counter is available.", 
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.api.resource.Quantity"
        }
      }
    }, 
    "io.k8s.api.core.v1.ConfigMapNodeConfigSource": {
      "required": [
        "namespace", 
        "name", 
        "kubeletConfigKey"
      ], 
      "type": "object", 
      "description": "ConfigMapNodeConfigSource contains the information to reference a ConfigMap as a config source for the Node. This API is deprecated since 1.22: https://git.k8s.io/enhancements/keps/sig-node/281-dynamic-kubelet-configuration", 
      "properties": {
        "kubeletConfigKey": {
          "type": "string", 
          "description": "KubeletConfigKey declares which key of the referenced ConfigMap corresponds to the KubeletConfiguration structure This field is required in all cases."
        }, 
        "resourceVersion": {
          "type": "string", 
          "description": "ResourceVersion is the metadata.ResourceVersion of the referenced ConfigMap. This field is forbidden in Node.Spec, and required in Node.Status."
        }, 
        "namespace": {
          "type": "string", 
          "description": "Namespace is the metadata.namespace of the referenced ConfigMap. This field is required in all cases."
        }, 
        "uid": {
          "type": "string", 
          "description": "UID is the metadata.UID of the referenced ConfigMap. This field is forbidden in Node.Spec, and required in Node.Status."
        }, 
        "name": {
          "type": "string", 
          "description": "Name is the metadata.name of the referenced ConfigMap. This field is required in all cases."
        }
      }
    }, 
    "io.k8s.api.resource.v1.ResourceSliceList": {
      "type": "object", 
      "required": [
        "items"
      ], 
      "x-kubernetes-group-version-kind": [
        {
          "kind": "ResourceSliceList", 
          "version": "v1", 
          "group": "resource.k8s.io"
        }
      ], 
      "description": "ResourceSliceList is a collection of ResourceSlices.", 
      "properties": {
        "items": {
          "items": {
            "$ref": "#/definitions/io.k8s.api.resource.v1.ResourceSlice"
          }, 
          "type": "array", 
          "description": "Items is the list of resource ResourceSlices."
        }, 
        "kind": {
          "enum": [
            "ResourceSliceList"
          ], 
          "type": "string", 
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
        }, 
        "apiVersion": {
          "type": "string", 
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources"
        }, 
        "metadata": {
          "description": "Standard list metadata", 
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      }
    }, 
    "io.k8s.api.core.v1.GCEPersistentDiskVolumeSource": {
      "required": [
        "pdName"
      ], 
      "type": "object", 
      "description": "Represents a Persistent Disk resource in Google Compute Engine.\n\nA GCE PD must exist before mounting to a container. The disk must also be in the same GCE project and zone as the kubelet. A GCE PD can only be mounted as read/write once or read-only many times. GCE PDs support ownership management and SELinux relabeling.", 
      "properties": {
        "readOnly": {
          "type": "boolean", 
          "description": "readOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk"
        }, 
        "partition": {
          "type": "integer", 
          "description": "partition is the partition in the volume that you want to mount. If omitted, the default is to mount by volume name. Examples: For volume /dev/sda1, you specify the partition as \"1\". Similarly, the volume partition for /dev/sda is \"0\" (or you can leave the property empty). More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk", 
          "format": "int32"
        }, 
        "pdName": {
          "type": "string", 
          "description": "pdName is unique name of the PD resource in GCE. Used to identify the disk in GCE. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk"
        }, 
        "fsType": {
          "type": "string", 
          "description": "fsType is filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk"
        }
      }
    }, 
    "io.k8s.api.core.v1.EndpointsList": {
      "type": "object", 
      "required": [
        "items"
      ], 
      "x-kubernetes-group-version-kind": [
        {
          "kind": "EndpointsList", 
          "version": "v1", 
          "group": ""
        }
      ], 
      "description": "EndpointsList is a list of endpoints. Deprecated: This API is deprecated in v1.33+.", 
      "properties": {
        "items": {
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.Endpoints"
          }, 
          "type": "array", 
          "description": "List of endpoints."
        }, 
        "kind": {
          "enum": [
            "EndpointsList"
          ], 
          "type": "string", 
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
        }, 
        "apiVersion": {
          "type": "string", 
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources"
        }, 
        "metadata": {
          "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds", 
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      }
    }, 
    "io.k8s.api.core.v1.ConfigMapEnvSource": {
      "type": "object", 
      "description": "ConfigMapEnvSource selects a ConfigMap to populate the environment variables with.\n\nThe contents of the target ConfigMap's Data field will represent the key-value pairs as environment variables.", 
      "properties": {
        "optional": {
          "type": "boolean", 
          "description": "Specify whether the ConfigMap must be defined"
        }, 
        "name": {
          "type": "string", 
          "description": "Name of the referent. This field is effectively required, but due to backwards compatibility is allowed to be empty. Instances of this type with an empty value here are almost certainly wrong. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"
        }
      }
    }, 
    "io.k8s.api.storage.v1.VolumeError": {
      "type": "object", 
      "description": "VolumeError captures an error encountered during a volume operation.", 
      "properties": {
        "errorCode": {
          "type": "integer", 
          "description": "errorCode is a numeric gRPC code representing the error encountered during Attach or Detach operations.\n\nThis is an optional, beta field that requires the MutableCSINodeAllocatableCount feature gate being enabled to be set.", 
          "format": "int32"
        }, 
        "message": {
          "type": "string", 
          "description": "message represents the error encountered during Attach or Detach operation. This string may be logged, so it should not contain sensitive information."
        }, 
        "time": {
          "description": "time represents the time the error was encountered.", 
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
        }
      }
    }, 
    "io.k8s.api.rbac.v1.RoleList": {
      "type": "object", 
      "required": [
        "items"
      ], 
      "x-kubernetes-group-version-kind": [
        {
          "kind": "RoleList", 
          "version": "v1", 
          "group": "rbac.authorization.k8s.io"
        }
      ], 
      "description": "RoleList is a collection of Roles", 
      "properties": {
        "items": {
          "items": {
            "$ref": "#/definitions/io.k8s.api.rbac.v1.Role"
          }, 
          "type": "array", 
          "description": "Items is a list of Roles"
        }, 
        "kind": {
          "enum": [
            "RoleList"
          ], 
          "type": "string", 
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
        }, 
        "apiVersion": {
          "type": "string", 
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources"
        }, 
        "metadata": {
          "description": "Standard object's metadata.", 
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      }
    }, 
    "io.k8s.api.core.v1.SecurityContext": {
      "type": "object", 
      "description": "SecurityContext holds security configuration that will be applied to a container. Some fields are present in both SecurityContext and PodSecurityContext.  When both are set, the values in SecurityContext take precedence.", 
      "properties": {
        "readOnlyRootFilesystem": {
          "type": "boolean", 
          "description": "Whether this container has a read-only root filesystem. Default is false. Note that this field cannot be set when spec.os.name is windows."
        }, 
        "appArmorProfile": {
          "description": "appArmorProfile is the AppArmor options to use by this container. If set, this profile overrides the pod's appArmorProfile. Note that this field cannot be set when spec.os.name is windows.", 
          "$ref": "#/definitions/io.k8s.api.core.v1.AppArmorProfile"
        }, 
        "seccompProfile": {
          "description": "The seccomp options to use by this container. If seccomp options are provided at both the pod & container level, the container options override the pod options. Note that this field cannot be set when spec.os.name is windows.", 
          "$ref": "#/definitions/io.k8s.api.core.v1.SeccompProfile"
        }, 
        "runAsGroup": {
          "type": "integer", 
          "description": "The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.", 
          "format": "int64"
        }, 
        "allowPrivilegeEscalation": {
          "type": "boolean", 
          "description": "AllowPrivilegeEscalation controls whether a process can gain more privileges than its parent process. This bool directly controls if the no_new_privs flag will be set on the container process. AllowPrivilegeEscalation is true always when the container is: 1) run as Privileged 2) has CAP_SYS_ADMIN Note that this field cannot be set when spec.os.name is windows."
        }, 
        "runAsUser": {
          "type": "integer", 
          "description": "The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.", 
          "format": "int64"
        }, 
        "procMount": {
          "type": "string", 
          "description": "procMount denotes the type of proc mount to use for the containers. The default value is Default which uses the container runtime defaults for readonly paths and masked paths. This requires the ProcMountType feature flag to be enabled. Note that this field cannot be set when spec.os.name is windows."
        }, 
        "runAsNonRoot": {
          "type": "boolean", 
          "description": "Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence."
        }, 
        "windowsOptions": {
          "description": "The Windows specific settings applied to all containers. If unspecified, the options from the PodSecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is linux.", 
          "$ref": "#/definitions/io.k8s.api.core.v1.WindowsSecurityContextOptions"
        }, 
        "seLinuxOptions": {
          "description": "The SELinux context to be applied to the container. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.", 
          "$ref": "#/definitions/io.k8s.api.core.v1.SELinuxOptions"
        }, 
        "capabilities": {
          "description": "The capabilities to add/drop when running containers. Defaults to the default set of capabilities granted by the container runtime. Note that this field cannot be set when spec.os.name is windows.", 
          "$ref": "#/definitions/io.k8s.api.core.v1.Capabilities"
        }, 
        "privileged": {
          "type": "boolean", 
          "description": "Run container in privileged mode. Processes in privileged containers are essentially equivalent to root on the host. Defaults to false. Note that this field cannot be set when spec.os.name is windows."
        }
      }
    }, 
    "io.k8s.api.core.v1.FlexPersistentVolumeSource": {
      "required": [
        "driver"
      ], 
      "type": "object", 
      "description": "FlexPersistentVolumeSource represents a generic persistent volume resource that is provisioned/attached using an exec based plugin.", 
      "properties": {
        "secretRef": {
          "description": "secretRef is Optional: SecretRef is reference to the secret object containing sensitive information to pass to the plugin scripts. This may be empty if no secret object is specified. If the secret object contains more than one secret, all secrets are passed to the plugin scripts.", 
          "$ref": "#/definitions/io.k8s.api.core.v1.SecretReference"
        }, 
        "fsType": {
          "type": "string", 
          "description": "fsType is the Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". The default filesystem depends on FlexVolume script."
        }, 
        "driver": {
          "type": "string", 
          "description": "driver is the name of the driver to use for this volume."
        }, 
        "readOnly": {
          "type": "boolean", 
          "description": "readOnly is Optional: defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts."
        }, 
        "options": {
          "additionalProperties": {
            "type": "string"
          }, 
          "type": "object", 
          "description": "options is Optional: this field holds extra command options if any."
        }
      }
    }, 
    "io.k8s.api.core.v1.ExecAction": {
      "type": "object", 
      "description": "ExecAction describes a \"run in container\" action.", 
      "properties": {
        "command": {
          "items": {
            "type": "string"
          }, 
          "type": "array", 
          "description": "Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.", 
          "x-kubernetes-list-type": "atomic"
        }
      }
    }, 
    "io.k8s.api.admissionregistration.v1.MutatingWebhook": {
      "required": [
        "name", 
        "clientConfig", 
        "sideEffects", 
        "admissionReviewVersions"
      ], 
      "type": "object", 
      "description": "MutatingWebhook describes an admission webhook and the resources and operations it applies to.", 
      "properties": {
        "reinvocationPolicy": {
          "type": "string", 
          "description": "reinvocationPolicy indicates whether this webhook should be called multiple times as part of a single admission evaluation. Allowed values are \"Never\" and \"IfNeeded\".\n\nNever: the webhook will not be called more than once in a single admission evaluation.\n\nIfNeeded: the webhook will be called at least one additional time as part of the admission evaluation if the object being admitted is modified by other admission plugins after the initial webhook call. Webhooks that specify this option *must* be idempotent, able to process objects they previously admitted. Note: * the number of additional invocations is not guaranteed to be exactly one. * if additional invocations result in further modifications to the object, webhooks are not guaranteed to be invoked again. * webhooks that use this option may be reordered to minimize the number of additional invocations. * to validate an object after all mutations are guaranteed complete, use a validating admission webhook instead.\n\nDefaults to \"Never\"."
        }, 
        "matchPolicy": {
          "type": "string", 
          "description": "matchPolicy defines how the \"rules\" list is used to match incoming requests. Allowed values are \"Exact\" or \"Equivalent\".\n\n- Exact: match a request only if it exactly matches a specified rule. For example, if deployments can be modified via apps/v1, apps/v1beta1, and extensions/v1beta1, but \"rules\" only included `apiGroups:[\"apps\"], apiVersions:[\"v1\"], resources: [\"deployments\"]`, a request to apps/v1beta1 or extensions/v1beta1 would not be sent to the webhook.\n\n- Equivalent: match a request if modifies a resource listed in rules, even via another API group or version. For example, if deployments can be modified via apps/v1, apps/v1beta1, and extensions/v1beta1, and \"rules\" only included `apiGroups:[\"apps\"], apiVersions:[\"v1\"], resources: [\"deployments\"]`, a request to apps/v1beta1 or extensions/v1beta1 would be converted to apps/v1 and sent to the webhook.\n\nDefaults to \"Equivalent\""
        }, 
        "clientConfig": {
          "description": "ClientConfig defines how to communicate with the hook. Required", 
          "$ref": "#/definitions/io.k8s.api.admissionregistration.v1.WebhookClientConfig"
        }, 
        "objectSelector": {
          "description": "ObjectSelector decides whether to run the webhook based on if the object has matching labels. objectSelector is evaluated against both the oldObject and newObject that would be sent to the webhook, and is considered to match if either object matches the selector. A null object (oldObject in the case of create, or newObject in the case of delete) or an object that cannot have labels (like a DeploymentRollback or a PodProxyOptions object) is not considered to match. Use the object selector only if the webhook is opt-in, because end users may skip the admission webhook by setting the labels. Default to the empty LabelSelector, which matches everything.", 
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector"
        }, 
        "name": {
          "type": "string", 
          "description": "The name of the admission webhook. Name should be fully qualified, e.g., imagepolicy.kubernetes.io, where \"imagepolicy\" is the name of the webhook, and kubernetes.io is the name of the organization. Required."
        }, 
        "sideEffects": {
          "type": "string", 
          "description": "SideEffects states whether this webhook has side effects. Acceptable values are: None, NoneOnDryRun (webhooks created via v1beta1 may also specify Some or Unknown). Webhooks with side effects MUST implement a reconciliation system, since a request may be rejected by a future step in the admission chain and the side effects therefore need to be undone. Requests with the dryRun attribute will be auto-rejected if they match a webhook with sideEffects == Unknown or Some."
        }, 
        "rules": {
          "items": {
            "$ref": "#/definitions/io.k8s.api.admissionregistration.v1.RuleWithOperations"
          }, 
          "type": "array", 
          "description": "Rules describes what operations on what resources/subresources the webhook cares about. The webhook cares about an operation if it matches _any_ Rule. However, in order to prevent ValidatingAdmissionWebhooks and MutatingAdmissionWebhooks from putting the cluster in a state which cannot be recovered from without completely disabling the plugin, ValidatingAdmissionWebhooks and MutatingAdmissionWebhooks are never called on admission requests for ValidatingWebhookConfiguration and MutatingWebhookConfiguration objects.", 
          "x-kubernetes-list-type": "atomic"
        }, 
        "timeoutSeconds": {
          "type": "integer", 
          "description": "TimeoutSeconds specifies the timeout for this webhook. After the timeout passes, the webhook call will be ignored or the API call will fail based on the failure policy. The timeout value must be between 1 and 30 seconds. Default to 10 seconds.", 
          "format": "int32"
        }, 
        "failurePolicy": {
          "type": "string", 
          "description": "FailurePolicy defines how unrecognized errors from the admission endpoint are handled - allowed values are Ignore or Fail. Defaults to Fail."
        }, 
        "admissionReviewVersions": {
          "items": {
            "type": "string"
          }, 
          "type": "array", 
          "description": "AdmissionReviewVersions is an ordered list of preferred `AdmissionReview` versions the Webhook expects. API server will try to use first version in the list which it supports. If none of the versions specified in this list supported by API server, validation will fail for this object. If a persisted webhook configuration specifies allowed versions and does not include any versions known to the API Server, calls to the webhook will fail and be subject to the failure policy.", 
          "x-kubernetes-list-type": "atomic"
        }, 
        "namespaceSelector": {
          "description": "NamespaceSelector decides whether to run the webhook on an object based on whether the namespace for that object matches the selector. If the object itself is a namespace, the matching is performed on object.metadata.labels. If the object is another cluster scoped resource, it never skips the webhook.\n\nFor example, to run the webhook on any objects whose namespace is not associated with \"runlevel\" of \"0\" or \"1\";  you will set the selector as follows: \"namespaceSelector\": {\n  \"matchExpressions\": [\n    {\n      \"key\": \"runlevel\",\n      \"operator\": \"NotIn\",\n      \"values\": [\n        \"0\",\n        \"1\"\n      ]\n    }\n  ]\n}\n\nIf instead you want to only run the webhook on any objects whose namespace is associated with the \"environment\" of \"prod\" or \"staging\"; you will set the selector as follows: \"namespaceSelector\": {\n  \"matchExpressions\": [\n    {\n      \"key\": \"environment\",\n      \"operator\": \"In\",\n      \"values\": [\n        \"prod\",\n        \"staging\"\n      ]\n    }\n  ]\n}\n\nSee https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/ for more examples of label selectors.\n\nDefault to the empty LabelSelector, which matches everything.", 
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector"
        }, 
        "matchConditions": {
          "description": "MatchConditions is a list of conditions that must be met for a request to be sent to this webhook. Match conditions filter requests that have already been matched by the rules, namespaceSelector, and objectSelector. An empty list of matchConditions matches all requests. There are a maximum of 64 match conditions allowed.\n\nThe exact matching logic is (in order):\n  1. If ANY matchCondition evaluates to FALSE, the webhook is skipped.\n  2. If ALL matchConditions evaluate to TRUE, the webhook is called.\n  3. If any matchCondition evaluates to an error (but none are FALSE):\n     - If failurePolicy=Fail, reject the request\n     - If failurePolicy=Ignore, the error is ignored and the webhook is skipped", 
          "x-kubernetes-list-map-keys": [
            "name"
          ], 
          "x-kubernetes-patch-merge-key": "name", 
          "items": {
            "$ref": "#/definitions/io.k8s.api.admissionregistration.v1.MatchCondition"
          }, 
          "type": "array", 
          "x-kubernetes-list-type": "map", 
          "x-kubernetes-patch-strategy": "merge"
        }
      }
    }, 
    "io.k8s.api.batch.v1.CronJob": {
      "type": "object", 
      "x-kubernetes-group-version-kind": [
        {
          "kind": "CronJob", 
          "version": "v1", 
          "group": "batch"
        }
      ], 
      "description": "CronJob represents the configuration of a single cron job.", 
      "properties": {
        "status": {
          "description": "Current status of a cron job. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status", 
          "$ref": "#/definitions/io.k8s.api.batch.v1.CronJobStatus"
        }, 
        "kind": {
          "enum": [
            "CronJob"
          ], 
          "type": "string", 
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
        }, 
        "spec": {
          "description": "Specification of the desired behavior of a cron job, including the schedule. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status", 
          "$ref": "#/definitions/io.k8s.api.batch.v1.CronJobSpec"
        }, 
        "apiVersion": {
          "type": "string", 
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources"
        }, 
        "metadata": {
          "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata", 
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        }
      }
    }, 
    "io.k8s.api.core.v1.ContainerRestartRule": {
      "required": [
        "action"
      ], 
      "type": "object", 
      "description": "ContainerRestartRule describes how a container exit is handled.", 
      "properties": {
        "action": {
          "type": "string", 
          "description": "Specifies the action taken on a container exit if the requirements are satisfied. The only possible value is \"Restart\" to restart the container."
        }, 
        "exitCodes": {
          "description": "Represents the exit codes to check on container exits.", 
          "$ref": "#/definitions/io.k8s.api.core.v1.ContainerRestartRuleOnExitCodes"
        }
      }
    }, 
    "io.k8s.api.networking.v1.IngressClassSpec": {
      "type": "object", 
      "description": "IngressClassSpec provides information about the class of an Ingress.", 
      "properties": {
        "controller": {
          "type": "string", 
          "description": "controller refers to the name of the controller that should handle this class. This allows for different \"flavors\" that are controlled by the same controller. For example, you may have different parameters for the same implementing controller. This should be specified as a domain-prefixed path no more than 250 characters in length, e.g. \"acme.io/ingress-controller\". This field is immutable."
        }, 
        "parameters": {
          "description": "parameters is a link to a custom resource containing additional configuration for the controller. This is optional if the controller does not require extra parameters.", 
          "$ref": "#/definitions/io.k8s.api.networking.v1.IngressClassParametersReference"
        }
      }
    }, 
    "io.k8s.api.core.v1.PersistentVolume": {
      "type": "object", 
      "x-kubernetes-group-version-kind": [
        {
          "kind": "PersistentVolume", 
          "version": "v1", 
          "group": ""
        }
      ], 
      "description": "PersistentVolume (PV) is a storage resource provisioned by an administrator. It is analogous to a node. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes", 
      "properties": {
        "status": {
          "description": "status represents the current information/status for the persistent volume. Populated by the system. Read-only. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistent-volumes", 
          "$ref": "#/definitions/io.k8s.api.core.v1.PersistentVolumeStatus"
        }, 
        "kind": {
          "enum": [
            "PersistentVolume"
          ], 
          "type": "string", 
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
        }, 
        "spec": {
          "description": "spec defines a specification of a persistent volume owned by the cluster. Provisioned by an administrator. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistent-volumes", 
          "$ref": "#/definitions/io.k8s.api.core.v1.PersistentVolumeSpec"
        }, 
        "apiVersion": {
          "type": "string", 
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources"
        }, 
        "metadata": {
          "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata", 
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        }
      }
    }, 
    "io.k8s.api.core.v1.PersistentVolumeStatus": {
      "type": "object", 
      "description": "PersistentVolumeStatus is the current status of a persistent volume.", 
      "properties": {
        "phase": {
          "type": "string", 
          "description": "phase indicates if a volume is available, bound to a claim, or released by a claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#phase"
        }, 
        "message": {
          "type": "string", 
          "description": "message is a human-readable message indicating details about why the volume is in this state."
        }, 
        "lastPhaseTransitionTime": {
          "description": "lastPhaseTransitionTime is the time the phase transitioned from one to another and automatically resets to current time everytime a volume phase transitions.", 
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
        }, 
        "reason": {
          "type": "string", 
          "description": "reason is a brief CamelCase string that describes any failure and is meant for machine parsing and tidy display in the CLI."
        }
      }
    }, 
    "io.k8s.api.core.v1.PodAffinityTerm": {
      "required": [
        "topologyKey"
      ], 
      "type": "object", 
      "description": "Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key <topologyKey> matches that of any node on which a pod of the set of pods is running", 
      "properties": {
        "mismatchLabelKeys": {
          "items": {
            "type": "string"
          }, 
          "type": "array", 
          "description": "MismatchLabelKeys is a set of pod label keys to select which pods will be taken into consideration. The keys are used to lookup values from the incoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)` to select the group of existing pods which pods will be taken into consideration for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming pod labels will be ignored. The default value is empty. The same key is forbidden to exist in both mismatchLabelKeys and labelSelector. Also, mismatchLabelKeys cannot be set when labelSelector isn't set.", 
          "x-kubernetes-list-type": "atomic"
        }, 
        "labelSelector": {
          "description": "A label query over a set of resources, in this case pods. If it's null, this PodAffinityTerm matches with no Pods.", 
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector"
        }, 
        "namespaces": {
          "items": {
            "type": "string"
          }, 
          "type": "array", 
          "description": "namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means \"this pod's namespace\".", 
          "x-kubernetes-list-type": "atomic"
        }, 
        "namespaceSelector": {
          "description": "A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means \"this pod's namespace\". An empty selector ({}) matches all namespaces.", 
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector"
        }, 
        "matchLabelKeys": {
          "items": {
            "type": "string"
          }, 
          "type": "array", 
          "description": "MatchLabelKeys is a set of pod label keys to select which pods will be taken into consideration. The keys are used to lookup values from the incoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)` to select the group of existing pods which pods will be taken into consideration for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming pod labels will be ignored. The default value is empty. The same key is forbidden to exist in both matchLabelKeys and labelSelector. Also, matchLabelKeys cannot be set when labelSelector isn't set.", 
          "x-kubernetes-list-type": "atomic"
        }, 
        "topologyKey": {
          "type": "string", 
          "description": "This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed."
        }
      }
    }, 
    "io.k8s.api.storage.v1.VolumeAttachmentList": {
      "type": "object", 
      "required": [
        "items"
      ], 
      "x-kubernetes-group-version-kind": [
        {
          "kind": "VolumeAttachmentList", 
          "version": "v1", 
          "group": "storage.k8s.io"
        }
      ], 
      "description": "VolumeAttachmentList is a collection of VolumeAttachment objects.", 
      "properties": {
        "items": {
          "items": {
            "$ref": "#/definitions/io.k8s.api.storage.v1.VolumeAttachment"
          }, 
          "type": "array", 
          "description": "items is the list of VolumeAttachments"
        }, 
        "kind": {
          "enum": [
            "VolumeAttachmentList"
          ], 
          "type": "string", 
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
        }, 
        "apiVersion": {
          "type": "string", 
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources"
        }, 
        "metadata": {
          "description": "Standard list metadata More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata", 
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      }
    }, 
    "io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.CustomResourceDefinitionCondition": {
      "required": [
        "type", 
        "status"
      ], 
      "type": "object", 
      "description": "CustomResourceDefinitionCondition contains details for the current condition of this pod.", 
      "properties": {
        "status": {
          "type": "string", 
          "description": "status is the status of the condition. Can be True, False, Unknown."
        }, 
        "lastTransitionTime": {
          "description": "lastTransitionTime last time the condition transitioned from one status to another.", 
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
        }, 
        "message": {
          "type": "string", 
          "description": "message is a human-readable message indicating details about last transition."
        }, 
        "type": {
          "type": "string", 
          "description": "type is the type of the condition. Types include Established, NamesAccepted and Terminating."
        }, 
        "reason": {
          "type": "string", 
          "description": "reason is a unique, one-word, CamelCase reason for the condition's last transition."
        }
      }
    }, 
    "io.k8s.api.resource.v1.ResourceClaimConsumerReference": {
      "required": [
        "resource", 
        "name", 
        "uid"
      ], 
      "type": "object", 
      "description": "ResourceClaimConsumerReference contains enough information to let you locate the consumer of a ResourceClaim. The user must be a resource in the same namespace as the ResourceClaim.", 
      "properties": {
        "apiGroup": {
          "type": "string", 
          "description": "APIGroup is the group for the resource being referenced. It is empty for the core API. This matches the group in the APIVersion that is used when creating the resources."
        }, 
        "resource": {
          "type": "string", 
          "description": "Resource is the type of resource being referenced, for example \"pods\"."
        }, 
        "name": {
          "type": "string", 
          "description": "Name is the name of resource being referenced."
        }, 
        "uid": {
          "type": "string", 
          "description": "UID identifies exactly one incarnation of the resource."
        }
      }
    }, 
    "io.k8s.api.core.v1.TopologySelectorLabelRequirement": {
      "required": [
        "key", 
        "values"
      ], 
      "type": "object", 
      "description": "A topology selector requirement is a selector that matches given label. This is an alpha feature and may change in the future.", 
      "properties": {
        "values": {
          "items": {
            "type": "string"
          }, 
          "type": "array", 
          "description": "An array of string values. One value must match the label to be selected. Each entry in Values is ORed.", 
          "x-kubernetes-list-type": "atomic"
        }, 
        "key": {
          "type": "string", 
          "description": "The label key that the selector applies to."
        }
      }
    }, 
    "io.k8s.api.scheduling.v1.PriorityClassList": {
      "type": "object", 
      "required": [
        "items"
      ], 
      "x-kubernetes-group-version-kind": [
        {
          "kind": "PriorityClassList", 
          "version": "v1", 
          "group": "scheduling.k8s.io"
        }
      ], 
      "description": "PriorityClassList is a collection of priority classes.", 
      "properties": {
        "items": {
          "items": {
            "$ref": "#/definitions/io.k8s.api.scheduling.v1.PriorityClass"
          }, 
          "type": "array", 
          "description": "items is the list of PriorityClasses"
        }, 
        "kind": {
          "enum": [
            "PriorityClassList"
          ], 
          "type": "string", 
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
        }, 
        "apiVersion": {
          "type": "string", 
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources"
        }, 
        "metadata": {
          "description": "Standard list metadata More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata", 
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      }
    }, 
    "io.k8s.api.resource.v1.DeviceAllocationResult": {
      "type": "object", 
      "description": "DeviceAllocationResult is the result of allocating devices.", 
      "properties": {
        "config": {
          "items": {
            "$ref": "#/definitions/io.k8s.api.resource.v1.DeviceAllocationConfiguration"
          }, 
          "type": "array", 
          "description": "This field is a combination of all the claim and class configuration parameters. Drivers can distinguish between those based on a flag.\n\nThis includes configuration parameters for drivers which have no allocated devices in the result because it is up to the drivers which configuration parameters they support. They can silently ignore unknown configuration parameters.", 
          "x-kubernetes-list-type": "atomic"
        }, 
        "results": {
          "items": {
            "$ref": "#/definitions/io.k8s.api.resource.v1.DeviceRequestAllocationResult"
          }, 
          "type": "array", 
          "description": "Results lists all allocated devices.", 
          "x-kubernetes-list-type": "atomic"
        }
      }
    }, 
    "io.k8s.api.core.v1.FCVolumeSource": {
      "type": "object", 
      "description": "Represents a Fibre Channel volume. Fibre Channel volumes can only be mounted as read/write once. Fibre Channel volumes support ownership management and SELinux relabeling.", 
      "properties": {
        "targetWWNs": {
          "items": {
            "type": "string"
          }, 
          "type": "array", 
          "description": "targetWWNs is Optional: FC target worldwide names (WWNs)", 
          "x-kubernetes-list-type": "atomic"
        }, 
        "readOnly": {
          "type": "boolean", 
          "description": "readOnly is Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts."
        }, 
        "wwids": {
          "items": {
            "type": "string"
          }, 
          "type": "array", 
          "description": "wwids Optional: FC volume world wide identifiers (wwids) Either wwids or combination of targetWWNs and lun must be set, but not both simultaneously.", 
          "x-kubernetes-list-type": "atomic"
        }, 
        "lun": {
          "type": "integer", 
          "description": "lun is Optional: FC target lun number", 
          "format": "int32"
        }, 
        "fsType": {
          "type": "string", 
          "description": "fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified."
        }
      }
    }, 
    "io.k8s.api.core.v1.DownwardAPIVolumeFile": {
      "required": [
        "path"
      ], 
      "type": "object", 
      "description": "DownwardAPIVolumeFile represents information to create the file containing the pod field", 
      "properties": {
        "path": {
          "type": "string", 
          "description": "Required: Path is  the relative path name of the file to be created. Must not be absolute or contain the '..' path. Must be utf-8 encoded. The first item of the relative path must not start with '..'"
        }, 
        "fieldRef": {
          "description": "Required: Selects a field of the pod: only annotations, labels, name, namespace and uid are supported.", 
          "$ref": "#/definitions/io.k8s.api.core.v1.ObjectFieldSelector"
        }, 
        "mode": {
          "type": "integer", 
          "description": "Optional: mode bits used to set permissions on this file, must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.", 
          "format": "int32"
        }, 
        "resourceFieldRef": {
          "description": "Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.", 
          "$ref": "#/definitions/io.k8s.api.core.v1.ResourceFieldSelector"
        }
      }
    }
  }
}